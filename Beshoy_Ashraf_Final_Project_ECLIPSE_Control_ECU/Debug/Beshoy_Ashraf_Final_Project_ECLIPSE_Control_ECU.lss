
Beshoy_Ashraf_Final_Project_ECLIPSE_Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002da0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00800060  00002da0  00002e34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  0080017a  0080017a  00002f4e  2**0
                  ALLOC
  3 .stab         00003048  00000000  00000000  00002f50  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001d88  00000000  00000000  00005f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000080b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000a4bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b843  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000ca1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000cbdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000ced2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d840  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 31 13 	jmp	0x2662	; 0x2662 <__vector_3>
      10:	0c 94 fe 12 	jmp	0x25fc	; 0x25fc <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 cb 12 	jmp	0x2596	; 0x2596 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 98 12 	jmp	0x2530	; 0x2530 <__vector_8>
      24:	0c 94 32 12 	jmp	0x2464	; 0x2464 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 65 12 	jmp	0x24ca	; 0x24ca <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ea       	ldi	r30, 0xA0	; 160
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 39       	cpi	r26, 0x9B	; 155
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 06 09 	call	0x120c	; 0x120c <main>
      8a:	0c 94 ce 16 	jmp	0x2d9c	; 0x2d9c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 97 16 	jmp	0x2d2e	; 0x2d2e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bf 16 	jmp	0x2d7e	; 0x2d7e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bf 16 	jmp	0x2d7e	; 0x2d7e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 97 16 	jmp	0x2d2e	; 0x2d2e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9f 16 	jmp	0x2d3e	; 0x2d3e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 bb 16 	jmp	0x2d76	; 0x2d76 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 bf 16 	jmp	0x2d7e	; 0x2d7e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 bf 16 	jmp	0x2d7e	; 0x2d7e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 bf 16 	jmp	0x2d7e	; 0x2d7e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a7 16 	jmp	0x2d4e	; 0x2d4e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 c3 16 	jmp	0x2d86	; 0x2d86 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 9f 16 	jmp	0x2d3e	; 0x2d3e <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 bb 16 	jmp	0x2d76	; 0x2d76 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <saveNewPassword>:
 * Save the password sent from HMI MC in case of NewPassword/ChangePassword scenarios.
 * Save it inside a global array.
 * Inputs: None.
 * Outputs: None.
 */
void saveNewPassword(void){
     e2e:	0f 93       	push	r16
     e30:	1f 93       	push	r17
     e32:	df 93       	push	r29
     e34:	cf 93       	push	r28
     e36:	0f 92       	push	r0
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
	uint8 i;
	for(i=0;i<PasswordSize;i++)
     e3c:	19 82       	std	Y+1, r1	; 0x01
     e3e:	0c c0       	rjmp	.+24     	; 0xe58 <saveNewPassword+0x2a>
	{
		password1[i]=UART_recieveByte();
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	08 2f       	mov	r16, r24
     e44:	10 e0       	ldi	r17, 0x00	; 0
     e46:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <UART_recieveByte>
     e4a:	f8 01       	movw	r30, r16
     e4c:	ef 56       	subi	r30, 0x6F	; 111
     e4e:	fe 4f       	sbci	r31, 0xFE	; 254
     e50:	80 83       	st	Z, r24
 * Inputs: None.
 * Outputs: None.
 */
void saveNewPassword(void){
	uint8 i;
	for(i=0;i<PasswordSize;i++)
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	8f 5f       	subi	r24, 0xFF	; 255
     e56:	89 83       	std	Y+1, r24	; 0x01
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	85 30       	cpi	r24, 0x05	; 5
     e5c:	88 f3       	brcs	.-30     	; 0xe40 <saveNewPassword+0x12>
	{
		password1[i]=UART_recieveByte();
	}


	for(i=0;i<PasswordSize;i++)
     e5e:	19 82       	std	Y+1, r1	; 0x01
     e60:	0c c0       	rjmp	.+24     	; 0xe7a <saveNewPassword+0x4c>
	{
		password2[i]=UART_recieveByte();
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	08 2f       	mov	r16, r24
     e66:	10 e0       	ldi	r17, 0x00	; 0
     e68:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <UART_recieveByte>
     e6c:	f8 01       	movw	r30, r16
     e6e:	e5 57       	subi	r30, 0x75	; 117
     e70:	fe 4f       	sbci	r31, 0xFE	; 254
     e72:	80 83       	st	Z, r24
	{
		password1[i]=UART_recieveByte();
	}


	for(i=0;i<PasswordSize;i++)
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	8f 5f       	subi	r24, 0xFF	; 255
     e78:	89 83       	std	Y+1, r24	; 0x01
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	85 30       	cpi	r24, 0x05	; 5
     e7e:	88 f3       	brcs	.-30     	; 0xe62 <saveNewPassword+0x34>
	{
		password2[i]=UART_recieveByte();
	}

}
     e80:	0f 90       	pop	r0
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	1f 91       	pop	r17
     e88:	0f 91       	pop	r16
     e8a:	08 95       	ret

00000e8c <saveRequestedPassword>:
 * Save the password sent from HMI MC in case of openDoor/ChangePassword scenarios.
 * Save it inside a global array.
 * Inputs: None.
 * Outputs: None.
 */
void saveRequestedPassword(void){
     e8c:	0f 93       	push	r16
     e8e:	1f 93       	push	r17
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	0f 92       	push	r0
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
	uint8 i;
	for(i=0;i<PasswordSize;i++)
     e9a:	19 82       	std	Y+1, r1	; 0x01
     e9c:	0c c0       	rjmp	.+24     	; 0xeb6 <saveRequestedPassword+0x2a>
	{
		password3[i]=UART_recieveByte();
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	08 2f       	mov	r16, r24
     ea2:	10 e0       	ldi	r17, 0x00	; 0
     ea4:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <UART_recieveByte>
     ea8:	f8 01       	movw	r30, r16
     eaa:	ea 56       	subi	r30, 0x6A	; 106
     eac:	fe 4f       	sbci	r31, 0xFE	; 254
     eae:	80 83       	st	Z, r24
 * Inputs: None.
 * Outputs: None.
 */
void saveRequestedPassword(void){
	uint8 i;
	for(i=0;i<PasswordSize;i++)
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	8f 5f       	subi	r24, 0xFF	; 255
     eb4:	89 83       	std	Y+1, r24	; 0x01
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	85 30       	cpi	r24, 0x05	; 5
     eba:	88 f3       	brcs	.-30     	; 0xe9e <saveRequestedPassword+0x12>
	{
		password3[i]=UART_recieveByte();
	}
}
     ebc:	0f 90       	pop	r0
     ebe:	cf 91       	pop	r28
     ec0:	df 91       	pop	r29
     ec2:	1f 91       	pop	r17
     ec4:	0f 91       	pop	r16
     ec6:	08 95       	ret

00000ec8 <ComparePasswords>:
 * Description :
 * Takes two arrays and compare them.
 * Inputs: Two arrays.
 * Outputs: Number of errors.
 */
uint8 ComparePasswords(uint8 *ptr1, uint8 *ptr2){
     ec8:	df 93       	push	r29
     eca:	cf 93       	push	r28
     ecc:	00 d0       	rcall	.+0      	; 0xece <ComparePasswords+0x6>
     ece:	00 d0       	rcall	.+0      	; 0xed0 <ComparePasswords+0x8>
     ed0:	00 d0       	rcall	.+0      	; 0xed2 <ComparePasswords+0xa>
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
     ed6:	9c 83       	std	Y+4, r25	; 0x04
     ed8:	8b 83       	std	Y+3, r24	; 0x03
     eda:	7e 83       	std	Y+6, r23	; 0x06
     edc:	6d 83       	std	Y+5, r22	; 0x05
	uint8 i, error_count=0;
     ede:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;i<PasswordSize;i++){
     ee0:	1a 82       	std	Y+2, r1	; 0x02
     ee2:	1a c0       	rjmp	.+52     	; 0xf18 <ComparePasswords+0x50>
		if(ptr1[i] != ptr2[i])
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	8b 81       	ldd	r24, Y+3	; 0x03
     eec:	9c 81       	ldd	r25, Y+4	; 0x04
     eee:	fc 01       	movw	r30, r24
     ef0:	e2 0f       	add	r30, r18
     ef2:	f3 1f       	adc	r31, r19
     ef4:	40 81       	ld	r20, Z
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	8d 81       	ldd	r24, Y+5	; 0x05
     efe:	9e 81       	ldd	r25, Y+6	; 0x06
     f00:	fc 01       	movw	r30, r24
     f02:	e2 0f       	add	r30, r18
     f04:	f3 1f       	adc	r31, r19
     f06:	80 81       	ld	r24, Z
     f08:	48 17       	cp	r20, r24
     f0a:	19 f0       	breq	.+6      	; 0xf12 <ComparePasswords+0x4a>
		{
			error_count++;
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	8f 5f       	subi	r24, 0xFF	; 255
     f10:	89 83       	std	Y+1, r24	; 0x01
 * Inputs: Two arrays.
 * Outputs: Number of errors.
 */
uint8 ComparePasswords(uint8 *ptr1, uint8 *ptr2){
	uint8 i, error_count=0;
	for(i=0;i<PasswordSize;i++){
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	8f 5f       	subi	r24, 0xFF	; 255
     f16:	8a 83       	std	Y+2, r24	; 0x02
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	85 30       	cpi	r24, 0x05	; 5
     f1c:	18 f3       	brcs	.-58     	; 0xee4 <ComparePasswords+0x1c>
		if(ptr1[i] != ptr2[i])
		{
			error_count++;
		}
	}
	return error_count;
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
}
     f20:	26 96       	adiw	r28, 0x06	; 6
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	f8 94       	cli
     f26:	de bf       	out	0x3e, r29	; 62
     f28:	0f be       	out	0x3f, r0	; 63
     f2a:	cd bf       	out	0x3d, r28	; 61
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	08 95       	ret

00000f32 <Timer_Count>:

/*
 * Description :
 * Increment the three global variables.
 */
void Timer_Count(){
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
	g_tick2++;
     f3a:	80 91 7c 01 	lds	r24, 0x017C
     f3e:	90 91 7d 01 	lds	r25, 0x017D
     f42:	01 96       	adiw	r24, 0x01	; 1
     f44:	90 93 7d 01 	sts	0x017D, r25
     f48:	80 93 7c 01 	sts	0x017C, r24
	g_tick1++;
     f4c:	80 91 7b 01 	lds	r24, 0x017B
     f50:	8f 5f       	subi	r24, 0xFF	; 255
     f52:	80 93 7b 01 	sts	0x017B, r24
	g_tick3++;
     f56:	80 91 7e 01 	lds	r24, 0x017E
     f5a:	90 91 7f 01 	lds	r25, 0x017F
     f5e:	01 96       	adiw	r24, 0x01	; 1
     f60:	90 93 7f 01 	sts	0x017F, r25
     f64:	80 93 7e 01 	sts	0x017E, r24
}
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	08 95       	ret

00000f6e <EEPROM_writePassword>:
 * Description :
 * Saves password inside EEPROM.
 * Inputs: array.
 * Outputs: None.
 */
void EEPROM_writePassword (uint8 *ptr) {
     f6e:	df 93       	push	r29
     f70:	cf 93       	push	r28
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
     f76:	61 97       	sbiw	r28, 0x11	; 17
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	f8 94       	cli
     f7c:	de bf       	out	0x3e, r29	; 62
     f7e:	0f be       	out	0x3f, r0	; 63
     f80:	cd bf       	out	0x3d, r28	; 61
     f82:	99 8b       	std	Y+17, r25	; 0x11
     f84:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for(i=0 ; i<PasswordSize ; i++)
     f86:	1f 86       	std	Y+15, r1	; 0x0f
     f88:	8a c0       	rjmp	.+276    	; 0x109e <EEPROM_writePassword+0x130>
	{
		EEPROM_writeByte((EEPROM_Address+i), ptr[i]);
     f8a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f8c:	88 2f       	mov	r24, r24
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	ac 01       	movw	r20, r24
     f92:	4f 5e       	subi	r20, 0xEF	; 239
     f94:	5c 4f       	sbci	r21, 0xFC	; 252
     f96:	8f 85       	ldd	r24, Y+15	; 0x0f
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	88 89       	ldd	r24, Y+16	; 0x10
     f9e:	99 89       	ldd	r25, Y+17	; 0x11
     fa0:	fc 01       	movw	r30, r24
     fa2:	e2 0f       	add	r30, r18
     fa4:	f3 1f       	adc	r31, r19
     fa6:	80 81       	ld	r24, Z
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	ca 01       	movw	r24, r20
     fae:	b9 01       	movw	r22, r18
     fb0:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <EEPROM_writeByte>
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	a0 e2       	ldi	r26, 0x20	; 32
     fba:	b1 e4       	ldi	r27, 0x41	; 65
     fbc:	8b 87       	std	Y+11, r24	; 0x0b
     fbe:	9c 87       	std	Y+12, r25	; 0x0c
     fc0:	ad 87       	std	Y+13, r26	; 0x0d
     fc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fc4:	6b 85       	ldd	r22, Y+11	; 0x0b
     fc6:	7c 85       	ldd	r23, Y+12	; 0x0c
     fc8:	8d 85       	ldd	r24, Y+13	; 0x0d
     fca:	9e 85       	ldd	r25, Y+14	; 0x0e
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	4a ef       	ldi	r20, 0xFA	; 250
     fd2:	54 e4       	ldi	r21, 0x44	; 68
     fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fd8:	dc 01       	movw	r26, r24
     fda:	cb 01       	movw	r24, r22
     fdc:	8f 83       	std	Y+7, r24	; 0x07
     fde:	98 87       	std	Y+8, r25	; 0x08
     fe0:	a9 87       	std	Y+9, r26	; 0x09
     fe2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fe4:	6f 81       	ldd	r22, Y+7	; 0x07
     fe6:	78 85       	ldd	r23, Y+8	; 0x08
     fe8:	89 85       	ldd	r24, Y+9	; 0x09
     fea:	9a 85       	ldd	r25, Y+10	; 0x0a
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	40 e8       	ldi	r20, 0x80	; 128
     ff2:	5f e3       	ldi	r21, 0x3F	; 63
     ff4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     ff8:	88 23       	and	r24, r24
     ffa:	2c f4       	brge	.+10     	; 0x1006 <EEPROM_writePassword+0x98>
		__ticks = 1;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	9e 83       	std	Y+6, r25	; 0x06
    1002:	8d 83       	std	Y+5, r24	; 0x05
    1004:	3f c0       	rjmp	.+126    	; 0x1084 <EEPROM_writePassword+0x116>
	else if (__tmp > 65535)
    1006:	6f 81       	ldd	r22, Y+7	; 0x07
    1008:	78 85       	ldd	r23, Y+8	; 0x08
    100a:	89 85       	ldd	r24, Y+9	; 0x09
    100c:	9a 85       	ldd	r25, Y+10	; 0x0a
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	3f ef       	ldi	r19, 0xFF	; 255
    1012:	4f e7       	ldi	r20, 0x7F	; 127
    1014:	57 e4       	ldi	r21, 0x47	; 71
    1016:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    101a:	18 16       	cp	r1, r24
    101c:	4c f5       	brge	.+82     	; 0x1070 <EEPROM_writePassword+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    101e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1020:	7c 85       	ldd	r23, Y+12	; 0x0c
    1022:	8d 85       	ldd	r24, Y+13	; 0x0d
    1024:	9e 85       	ldd	r25, Y+14	; 0x0e
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	40 e2       	ldi	r20, 0x20	; 32
    102c:	51 e4       	ldi	r21, 0x41	; 65
    102e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1032:	dc 01       	movw	r26, r24
    1034:	cb 01       	movw	r24, r22
    1036:	bc 01       	movw	r22, r24
    1038:	cd 01       	movw	r24, r26
    103a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    103e:	dc 01       	movw	r26, r24
    1040:	cb 01       	movw	r24, r22
    1042:	9e 83       	std	Y+6, r25	; 0x06
    1044:	8d 83       	std	Y+5, r24	; 0x05
    1046:	0f c0       	rjmp	.+30     	; 0x1066 <EEPROM_writePassword+0xf8>
    1048:	88 ec       	ldi	r24, 0xC8	; 200
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	9c 83       	std	Y+4, r25	; 0x04
    104e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	9c 81       	ldd	r25, Y+4	; 0x04
    1054:	01 97       	sbiw	r24, 0x01	; 1
    1056:	f1 f7       	brne	.-4      	; 0x1054 <EEPROM_writePassword+0xe6>
    1058:	9c 83       	std	Y+4, r25	; 0x04
    105a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    105c:	8d 81       	ldd	r24, Y+5	; 0x05
    105e:	9e 81       	ldd	r25, Y+6	; 0x06
    1060:	01 97       	sbiw	r24, 0x01	; 1
    1062:	9e 83       	std	Y+6, r25	; 0x06
    1064:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1066:	8d 81       	ldd	r24, Y+5	; 0x05
    1068:	9e 81       	ldd	r25, Y+6	; 0x06
    106a:	00 97       	sbiw	r24, 0x00	; 0
    106c:	69 f7       	brne	.-38     	; 0x1048 <EEPROM_writePassword+0xda>
    106e:	14 c0       	rjmp	.+40     	; 0x1098 <EEPROM_writePassword+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1070:	6f 81       	ldd	r22, Y+7	; 0x07
    1072:	78 85       	ldd	r23, Y+8	; 0x08
    1074:	89 85       	ldd	r24, Y+9	; 0x09
    1076:	9a 85       	ldd	r25, Y+10	; 0x0a
    1078:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	9e 83       	std	Y+6, r25	; 0x06
    1082:	8d 83       	std	Y+5, r24	; 0x05
    1084:	8d 81       	ldd	r24, Y+5	; 0x05
    1086:	9e 81       	ldd	r25, Y+6	; 0x06
    1088:	9a 83       	std	Y+2, r25	; 0x02
    108a:	89 83       	std	Y+1, r24	; 0x01
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	9a 81       	ldd	r25, Y+2	; 0x02
    1090:	01 97       	sbiw	r24, 0x01	; 1
    1092:	f1 f7       	brne	.-4      	; 0x1090 <EEPROM_writePassword+0x122>
    1094:	9a 83       	std	Y+2, r25	; 0x02
    1096:	89 83       	std	Y+1, r24	; 0x01
 * Inputs: array.
 * Outputs: None.
 */
void EEPROM_writePassword (uint8 *ptr) {
	uint8 i;
	for(i=0 ; i<PasswordSize ; i++)
    1098:	8f 85       	ldd	r24, Y+15	; 0x0f
    109a:	8f 5f       	subi	r24, 0xFF	; 255
    109c:	8f 87       	std	Y+15, r24	; 0x0f
    109e:	8f 85       	ldd	r24, Y+15	; 0x0f
    10a0:	85 30       	cpi	r24, 0x05	; 5
    10a2:	08 f4       	brcc	.+2      	; 0x10a6 <EEPROM_writePassword+0x138>
    10a4:	72 cf       	rjmp	.-284    	; 0xf8a <EEPROM_writePassword+0x1c>
	{
		EEPROM_writeByte((EEPROM_Address+i), ptr[i]);
		_delay_ms(10);
	}
}
    10a6:	61 96       	adiw	r28, 0x11	; 17
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	f8 94       	cli
    10ac:	de bf       	out	0x3e, r29	; 62
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	cd bf       	out	0x3d, r28	; 61
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	08 95       	ret

000010b8 <EEPROM_readPassword>:
 * Description :
 * read password from inside EEPROM and save it in global variable.
 * Inputs: array.
 * Outputs: None.
 */
void EEPROM_readPassword (uint8 *ptr) {
    10b8:	df 93       	push	r29
    10ba:	cf 93       	push	r28
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    10c0:	61 97       	sbiw	r28, 0x11	; 17
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	f8 94       	cli
    10c6:	de bf       	out	0x3e, r29	; 62
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	cd bf       	out	0x3d, r28	; 61
    10cc:	99 8b       	std	Y+17, r25	; 0x11
    10ce:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for(i=0 ; i<15 ; i++)
    10d0:	1f 86       	std	Y+15, r1	; 0x0f
    10d2:	8f c0       	rjmp	.+286    	; 0x11f2 <EEPROM_readPassword+0x13a>
		for(i=0 ; i<15 ; i++)
    10d4:	1f 86       	std	Y+15, r1	; 0x0f
    10d6:	86 c0       	rjmp	.+268    	; 0x11e4 <EEPROM_readPassword+0x12c>
		{
			EEPROM_readByte((EEPROM_Address+i), &ptr[i]);
    10d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    10da:	88 2f       	mov	r24, r24
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	ac 01       	movw	r20, r24
    10e0:	4f 5e       	subi	r20, 0xEF	; 239
    10e2:	5c 4f       	sbci	r21, 0xFC	; 252
    10e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	88 89       	ldd	r24, Y+16	; 0x10
    10ec:	99 89       	ldd	r25, Y+17	; 0x11
    10ee:	28 0f       	add	r18, r24
    10f0:	39 1f       	adc	r19, r25
    10f2:	ca 01       	movw	r24, r20
    10f4:	b9 01       	movw	r22, r18
    10f6:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <EEPROM_readByte>
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	a0 e2       	ldi	r26, 0x20	; 32
    1100:	b1 e4       	ldi	r27, 0x41	; 65
    1102:	8b 87       	std	Y+11, r24	; 0x0b
    1104:	9c 87       	std	Y+12, r25	; 0x0c
    1106:	ad 87       	std	Y+13, r26	; 0x0d
    1108:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    110a:	6b 85       	ldd	r22, Y+11	; 0x0b
    110c:	7c 85       	ldd	r23, Y+12	; 0x0c
    110e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1110:	9e 85       	ldd	r25, Y+14	; 0x0e
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	4a ef       	ldi	r20, 0xFA	; 250
    1118:	54 e4       	ldi	r21, 0x44	; 68
    111a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    111e:	dc 01       	movw	r26, r24
    1120:	cb 01       	movw	r24, r22
    1122:	8f 83       	std	Y+7, r24	; 0x07
    1124:	98 87       	std	Y+8, r25	; 0x08
    1126:	a9 87       	std	Y+9, r26	; 0x09
    1128:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    112a:	6f 81       	ldd	r22, Y+7	; 0x07
    112c:	78 85       	ldd	r23, Y+8	; 0x08
    112e:	89 85       	ldd	r24, Y+9	; 0x09
    1130:	9a 85       	ldd	r25, Y+10	; 0x0a
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	40 e8       	ldi	r20, 0x80	; 128
    1138:	5f e3       	ldi	r21, 0x3F	; 63
    113a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    113e:	88 23       	and	r24, r24
    1140:	2c f4       	brge	.+10     	; 0x114c <EEPROM_readPassword+0x94>
		__ticks = 1;
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	9e 83       	std	Y+6, r25	; 0x06
    1148:	8d 83       	std	Y+5, r24	; 0x05
    114a:	3f c0       	rjmp	.+126    	; 0x11ca <EEPROM_readPassword+0x112>
	else if (__tmp > 65535)
    114c:	6f 81       	ldd	r22, Y+7	; 0x07
    114e:	78 85       	ldd	r23, Y+8	; 0x08
    1150:	89 85       	ldd	r24, Y+9	; 0x09
    1152:	9a 85       	ldd	r25, Y+10	; 0x0a
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	3f ef       	ldi	r19, 0xFF	; 255
    1158:	4f e7       	ldi	r20, 0x7F	; 127
    115a:	57 e4       	ldi	r21, 0x47	; 71
    115c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1160:	18 16       	cp	r1, r24
    1162:	4c f5       	brge	.+82     	; 0x11b6 <EEPROM_readPassword+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1164:	6b 85       	ldd	r22, Y+11	; 0x0b
    1166:	7c 85       	ldd	r23, Y+12	; 0x0c
    1168:	8d 85       	ldd	r24, Y+13	; 0x0d
    116a:	9e 85       	ldd	r25, Y+14	; 0x0e
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	40 e2       	ldi	r20, 0x20	; 32
    1172:	51 e4       	ldi	r21, 0x41	; 65
    1174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1178:	dc 01       	movw	r26, r24
    117a:	cb 01       	movw	r24, r22
    117c:	bc 01       	movw	r22, r24
    117e:	cd 01       	movw	r24, r26
    1180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	9e 83       	std	Y+6, r25	; 0x06
    118a:	8d 83       	std	Y+5, r24	; 0x05
    118c:	0f c0       	rjmp	.+30     	; 0x11ac <EEPROM_readPassword+0xf4>
    118e:	88 ec       	ldi	r24, 0xC8	; 200
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	9c 83       	std	Y+4, r25	; 0x04
    1194:	8b 83       	std	Y+3, r24	; 0x03
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	9c 81       	ldd	r25, Y+4	; 0x04
    119a:	01 97       	sbiw	r24, 0x01	; 1
    119c:	f1 f7       	brne	.-4      	; 0x119a <EEPROM_readPassword+0xe2>
    119e:	9c 83       	std	Y+4, r25	; 0x04
    11a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a2:	8d 81       	ldd	r24, Y+5	; 0x05
    11a4:	9e 81       	ldd	r25, Y+6	; 0x06
    11a6:	01 97       	sbiw	r24, 0x01	; 1
    11a8:	9e 83       	std	Y+6, r25	; 0x06
    11aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ac:	8d 81       	ldd	r24, Y+5	; 0x05
    11ae:	9e 81       	ldd	r25, Y+6	; 0x06
    11b0:	00 97       	sbiw	r24, 0x00	; 0
    11b2:	69 f7       	brne	.-38     	; 0x118e <EEPROM_readPassword+0xd6>
    11b4:	14 c0       	rjmp	.+40     	; 0x11de <EEPROM_readPassword+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11b6:	6f 81       	ldd	r22, Y+7	; 0x07
    11b8:	78 85       	ldd	r23, Y+8	; 0x08
    11ba:	89 85       	ldd	r24, Y+9	; 0x09
    11bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    11be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	9e 83       	std	Y+6, r25	; 0x06
    11c8:	8d 83       	std	Y+5, r24	; 0x05
    11ca:	8d 81       	ldd	r24, Y+5	; 0x05
    11cc:	9e 81       	ldd	r25, Y+6	; 0x06
    11ce:	9a 83       	std	Y+2, r25	; 0x02
    11d0:	89 83       	std	Y+1, r24	; 0x01
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	9a 81       	ldd	r25, Y+2	; 0x02
    11d6:	01 97       	sbiw	r24, 0x01	; 1
    11d8:	f1 f7       	brne	.-4      	; 0x11d6 <EEPROM_readPassword+0x11e>
    11da:	9a 83       	std	Y+2, r25	; 0x02
    11dc:	89 83       	std	Y+1, r24	; 0x01
 * Outputs: None.
 */
void EEPROM_readPassword (uint8 *ptr) {
	uint8 i;
	for(i=0 ; i<15 ; i++)
		for(i=0 ; i<15 ; i++)
    11de:	8f 85       	ldd	r24, Y+15	; 0x0f
    11e0:	8f 5f       	subi	r24, 0xFF	; 255
    11e2:	8f 87       	std	Y+15, r24	; 0x0f
    11e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    11e6:	8f 30       	cpi	r24, 0x0F	; 15
    11e8:	08 f4       	brcc	.+2      	; 0x11ec <EEPROM_readPassword+0x134>
    11ea:	76 cf       	rjmp	.-276    	; 0x10d8 <EEPROM_readPassword+0x20>
 * Inputs: array.
 * Outputs: None.
 */
void EEPROM_readPassword (uint8 *ptr) {
	uint8 i;
	for(i=0 ; i<15 ; i++)
    11ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    11ee:	8f 5f       	subi	r24, 0xFF	; 255
    11f0:	8f 87       	std	Y+15, r24	; 0x0f
    11f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    11f4:	8f 30       	cpi	r24, 0x0F	; 15
    11f6:	08 f4       	brcc	.+2      	; 0x11fa <EEPROM_readPassword+0x142>
    11f8:	6d cf       	rjmp	.-294    	; 0x10d4 <EEPROM_readPassword+0x1c>
		for(i=0 ; i<15 ; i++)
		{
			EEPROM_readByte((EEPROM_Address+i), &ptr[i]);
			_delay_ms(10);
		}
}
    11fa:	61 96       	adiw	r28, 0x11	; 17
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	f8 94       	cli
    1200:	de bf       	out	0x3e, r29	; 62
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	cd bf       	out	0x3d, r28	; 61
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	08 95       	ret

0000120c <main>:

int main(void){
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	cc 54       	subi	r28, 0x4C	; 76
    1216:	d0 40       	sbci	r29, 0x00	; 0
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	de bf       	out	0x3e, r29	; 62
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	cd bf       	out	0x3d, r28	; 61
	/* Enable global interrupt bit for the timer */
	SREG |= (1<<7);
    1222:	af e5       	ldi	r26, 0x5F	; 95
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	ef e5       	ldi	r30, 0x5F	; 95
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	80 68       	ori	r24, 0x80	; 128
    122e:	8c 93       	st	X, r24
	 * 8 bit data mode
	 * One stop bit
	 * No parity bit
	 * Baud-rate = 9600 bits/sec
	*/
	UART_Config s_UARTconfig={EIGHT_BITS,DISABLED,ONE,9600};
    1230:	9e 01       	movw	r18, r28
    1232:	25 5d       	subi	r18, 0xD5	; 213
    1234:	3f 4f       	sbci	r19, 0xFF	; 255
    1236:	3f af       	std	Y+63, r19	; 0x3f
    1238:	2e af       	std	Y+62, r18	; 0x3e
    123a:	82 e7       	ldi	r24, 0x72	; 114
    123c:	91 e0       	ldi	r25, 0x01	; 1
    123e:	22 96       	adiw	r28, 0x02	; 2
    1240:	9f af       	std	Y+63, r25	; 0x3f
    1242:	8e af       	std	Y+62, r24	; 0x3e
    1244:	22 97       	sbiw	r28, 0x02	; 2
    1246:	97 e0       	ldi	r25, 0x07	; 7
    1248:	23 96       	adiw	r28, 0x03	; 3
    124a:	9f af       	std	Y+63, r25	; 0x3f
    124c:	23 97       	sbiw	r28, 0x03	; 3
    124e:	22 96       	adiw	r28, 0x02	; 2
    1250:	ee ad       	ldd	r30, Y+62	; 0x3e
    1252:	ff ad       	ldd	r31, Y+63	; 0x3f
    1254:	22 97       	sbiw	r28, 0x02	; 2
    1256:	00 80       	ld	r0, Z
    1258:	22 96       	adiw	r28, 0x02	; 2
    125a:	2e ad       	ldd	r18, Y+62	; 0x3e
    125c:	3f ad       	ldd	r19, Y+63	; 0x3f
    125e:	22 97       	sbiw	r28, 0x02	; 2
    1260:	2f 5f       	subi	r18, 0xFF	; 255
    1262:	3f 4f       	sbci	r19, 0xFF	; 255
    1264:	22 96       	adiw	r28, 0x02	; 2
    1266:	3f af       	std	Y+63, r19	; 0x3f
    1268:	2e af       	std	Y+62, r18	; 0x3e
    126a:	22 97       	sbiw	r28, 0x02	; 2
    126c:	ee ad       	ldd	r30, Y+62	; 0x3e
    126e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1270:	00 82       	st	Z, r0
    1272:	2e ad       	ldd	r18, Y+62	; 0x3e
    1274:	3f ad       	ldd	r19, Y+63	; 0x3f
    1276:	2f 5f       	subi	r18, 0xFF	; 255
    1278:	3f 4f       	sbci	r19, 0xFF	; 255
    127a:	3f af       	std	Y+63, r19	; 0x3f
    127c:	2e af       	std	Y+62, r18	; 0x3e
    127e:	23 96       	adiw	r28, 0x03	; 3
    1280:	3f ad       	ldd	r19, Y+63	; 0x3f
    1282:	23 97       	sbiw	r28, 0x03	; 3
    1284:	31 50       	subi	r19, 0x01	; 1
    1286:	23 96       	adiw	r28, 0x03	; 3
    1288:	3f af       	std	Y+63, r19	; 0x3f
    128a:	23 97       	sbiw	r28, 0x03	; 3
    128c:	23 96       	adiw	r28, 0x03	; 3
    128e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1290:	23 97       	sbiw	r28, 0x03	; 3
    1292:	88 23       	and	r24, r24
    1294:	e1 f6       	brne	.-72     	; 0x124e <main+0x42>
	UART_init(&s_UARTconfig);
    1296:	ce 01       	movw	r24, r28
    1298:	8b 96       	adiw	r24, 0x2b	; 43
    129a:	0e 94 90 15 	call	0x2b20	; 0x2b20 <UART_init>

	/* Initialize the TWI/I2C Driver */
	EEPROM_init();
    129e:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <EEPROM_init>

	/* Initialize the Dc-motor Driver */
	DcMotor_init();
    12a2:	0e 94 14 0c 	call	0x1828	; 0x1828 <DcMotor_init>

	/* Initialize the Buzzer Driver */
	BUZZER_init();
    12a6:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <BUZZER_init>

	/* Wait until MC1 is ready */
	while(UART_recieveByte() != MC1_READY){}
    12aa:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <UART_recieveByte>
    12ae:	80 32       	cpi	r24, 0x20	; 32
    12b0:	e1 f7       	brne	.-8      	; 0x12aa <main+0x9e>
	UART_sendByte(MC2_READY);
    12b2:	80 e1       	ldi	r24, 0x10	; 16
    12b4:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>

	UART_sendByte(getNewPassword);
    12b8:	8e e4       	ldi	r24, 0x4E	; 78
    12ba:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>

	while(1){
		g_order=UART_recieveByte();
    12be:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <UART_recieveByte>
    12c2:	80 93 90 01 	sts	0x0190, r24

		switch(g_order)
    12c6:	80 91 90 01 	lds	r24, 0x0190
    12ca:	e8 2f       	mov	r30, r24
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	fd af       	std	Y+61, r31	; 0x3d
    12d0:	ec af       	std	Y+60, r30	; 0x3c
    12d2:	2c ad       	ldd	r18, Y+60	; 0x3c
    12d4:	3d ad       	ldd	r19, Y+61	; 0x3d
    12d6:	20 34       	cpi	r18, 0x40	; 64
    12d8:	31 05       	cpc	r19, r1
    12da:	09 f4       	brne	.+2      	; 0x12de <main+0xd2>
    12dc:	87 c1       	rjmp	.+782    	; 0x15ec <main+0x3e0>
    12de:	8c ad       	ldd	r24, Y+60	; 0x3c
    12e0:	9d ad       	ldd	r25, Y+61	; 0x3d
    12e2:	80 35       	cpi	r24, 0x50	; 80
    12e4:	91 05       	cpc	r25, r1
    12e6:	31 f0       	breq	.+12     	; 0x12f4 <main+0xe8>
    12e8:	ec ad       	ldd	r30, Y+60	; 0x3c
    12ea:	fd ad       	ldd	r31, Y+61	; 0x3d
    12ec:	e9 32       	cpi	r30, 0x29	; 41
    12ee:	f1 05       	cpc	r31, r1
    12f0:	d1 f0       	breq	.+52     	; 0x1326 <main+0x11a>
    12f2:	73 c2       	rjmp	.+1254   	; 0x17da <main+0x5ce>
		{

		case HMI_PasswordReady :
			g_order=0;
    12f4:	10 92 90 01 	sts	0x0190, r1
			saveNewPassword();
    12f8:	0e 94 17 07 	call	0xe2e	; 0xe2e <saveNewPassword>
			if(((ComparePasswords(password1,password2)) ==0))
    12fc:	81 e9       	ldi	r24, 0x91	; 145
    12fe:	91 e0       	ldi	r25, 0x01	; 1
    1300:	2b e8       	ldi	r18, 0x8B	; 139
    1302:	31 e0       	ldi	r19, 0x01	; 1
    1304:	b9 01       	movw	r22, r18
    1306:	0e 94 64 07 	call	0xec8	; 0xec8 <ComparePasswords>
    130a:	88 23       	and	r24, r24
    130c:	41 f4       	brne	.+16     	; 0x131e <main+0x112>
			{
				//code to store data inside eeprom
				EEPROM_writePassword(password2);
    130e:	8b e8       	ldi	r24, 0x8B	; 139
    1310:	91 e0       	ldi	r25, 0x01	; 1
    1312:	0e 94 b7 07 	call	0xf6e	; 0xf6e <EEPROM_writePassword>
				UART_sendByte(PasswordMatch );
    1316:	82 e5       	ldi	r24, 0x52	; 82
    1318:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>
    131c:	d0 cf       	rjmp	.-96     	; 0x12be <main+0xb2>
			}
			else
			{
				UART_sendByte(passwordsUnmatched);
    131e:	85 e5       	ldi	r24, 0x55	; 85
    1320:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>
    1324:	cc cf       	rjmp	.-104    	; 0x12be <main+0xb2>
			break;


		/* */
		case HMI_RequestedPasswordReady :
			g_order=0;
    1326:	10 92 90 01 	sts	0x0190, r1
			saveRequestedPassword();
    132a:	0e 94 46 07 	call	0xe8c	; 0xe8c <saveRequestedPassword>
			EEPROM_readPassword(EEPROM_password);
    132e:	86 e8       	ldi	r24, 0x86	; 134
    1330:	91 e0       	ldi	r25, 0x01	; 1
    1332:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <EEPROM_readPassword>
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	a8 e4       	ldi	r26, 0x48	; 72
    133c:	b2 e4       	ldi	r27, 0x42	; 66
    133e:	8f a3       	std	Y+39, r24	; 0x27
    1340:	98 a7       	std	Y+40, r25	; 0x28
    1342:	a9 a7       	std	Y+41, r26	; 0x29
    1344:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1346:	6f a1       	ldd	r22, Y+39	; 0x27
    1348:	78 a5       	ldd	r23, Y+40	; 0x28
    134a:	89 a5       	ldd	r24, Y+41	; 0x29
    134c:	9a a5       	ldd	r25, Y+42	; 0x2a
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	4a ef       	ldi	r20, 0xFA	; 250
    1354:	54 e4       	ldi	r21, 0x44	; 68
    1356:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	8b a3       	std	Y+35, r24	; 0x23
    1360:	9c a3       	std	Y+36, r25	; 0x24
    1362:	ad a3       	std	Y+37, r26	; 0x25
    1364:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1366:	6b a1       	ldd	r22, Y+35	; 0x23
    1368:	7c a1       	ldd	r23, Y+36	; 0x24
    136a:	8d a1       	ldd	r24, Y+37	; 0x25
    136c:	9e a1       	ldd	r25, Y+38	; 0x26
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	40 e8       	ldi	r20, 0x80	; 128
    1374:	5f e3       	ldi	r21, 0x3F	; 63
    1376:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    137a:	88 23       	and	r24, r24
    137c:	2c f4       	brge	.+10     	; 0x1388 <main+0x17c>
		__ticks = 1;
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	9a a3       	std	Y+34, r25	; 0x22
    1384:	89 a3       	std	Y+33, r24	; 0x21
    1386:	3f c0       	rjmp	.+126    	; 0x1406 <main+0x1fa>
	else if (__tmp > 65535)
    1388:	6b a1       	ldd	r22, Y+35	; 0x23
    138a:	7c a1       	ldd	r23, Y+36	; 0x24
    138c:	8d a1       	ldd	r24, Y+37	; 0x25
    138e:	9e a1       	ldd	r25, Y+38	; 0x26
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	3f ef       	ldi	r19, 0xFF	; 255
    1394:	4f e7       	ldi	r20, 0x7F	; 127
    1396:	57 e4       	ldi	r21, 0x47	; 71
    1398:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    139c:	18 16       	cp	r1, r24
    139e:	4c f5       	brge	.+82     	; 0x13f2 <main+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a0:	6f a1       	ldd	r22, Y+39	; 0x27
    13a2:	78 a5       	ldd	r23, Y+40	; 0x28
    13a4:	89 a5       	ldd	r24, Y+41	; 0x29
    13a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	40 e2       	ldi	r20, 0x20	; 32
    13ae:	51 e4       	ldi	r21, 0x41	; 65
    13b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	bc 01       	movw	r22, r24
    13ba:	cd 01       	movw	r24, r26
    13bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	9a a3       	std	Y+34, r25	; 0x22
    13c6:	89 a3       	std	Y+33, r24	; 0x21
    13c8:	0f c0       	rjmp	.+30     	; 0x13e8 <main+0x1dc>
    13ca:	88 ec       	ldi	r24, 0xC8	; 200
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	98 a3       	std	Y+32, r25	; 0x20
    13d0:	8f 8f       	std	Y+31, r24	; 0x1f
    13d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13d4:	98 a1       	ldd	r25, Y+32	; 0x20
    13d6:	01 97       	sbiw	r24, 0x01	; 1
    13d8:	f1 f7       	brne	.-4      	; 0x13d6 <main+0x1ca>
    13da:	98 a3       	std	Y+32, r25	; 0x20
    13dc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13de:	89 a1       	ldd	r24, Y+33	; 0x21
    13e0:	9a a1       	ldd	r25, Y+34	; 0x22
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	9a a3       	std	Y+34, r25	; 0x22
    13e6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e8:	89 a1       	ldd	r24, Y+33	; 0x21
    13ea:	9a a1       	ldd	r25, Y+34	; 0x22
    13ec:	00 97       	sbiw	r24, 0x00	; 0
    13ee:	69 f7       	brne	.-38     	; 0x13ca <main+0x1be>
    13f0:	14 c0       	rjmp	.+40     	; 0x141a <main+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13f2:	6b a1       	ldd	r22, Y+35	; 0x23
    13f4:	7c a1       	ldd	r23, Y+36	; 0x24
    13f6:	8d a1       	ldd	r24, Y+37	; 0x25
    13f8:	9e a1       	ldd	r25, Y+38	; 0x26
    13fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13fe:	dc 01       	movw	r26, r24
    1400:	cb 01       	movw	r24, r22
    1402:	9a a3       	std	Y+34, r25	; 0x22
    1404:	89 a3       	std	Y+33, r24	; 0x21
    1406:	89 a1       	ldd	r24, Y+33	; 0x21
    1408:	9a a1       	ldd	r25, Y+34	; 0x22
    140a:	9e 8f       	std	Y+30, r25	; 0x1e
    140c:	8d 8f       	std	Y+29, r24	; 0x1d
    140e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1410:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1412:	01 97       	sbiw	r24, 0x01	; 1
    1414:	f1 f7       	brne	.-4      	; 0x1412 <main+0x206>
    1416:	9e 8f       	std	Y+30, r25	; 0x1e
    1418:	8d 8f       	std	Y+29, r24	; 0x1d

			_delay_ms(50);

			if((ComparePasswords(EEPROM_password,password3)) ==0)
    141a:	86 e8       	ldi	r24, 0x86	; 134
    141c:	91 e0       	ldi	r25, 0x01	; 1
    141e:	26 e9       	ldi	r18, 0x96	; 150
    1420:	31 e0       	ldi	r19, 0x01	; 1
    1422:	b9 01       	movw	r22, r18
    1424:	0e 94 64 07 	call	0xec8	; 0xec8 <ComparePasswords>
    1428:	88 23       	and	r24, r24
    142a:	31 f4       	brne	.+12     	; 0x1438 <main+0x22c>
			{
				UART_sendByte(RequestedCorrectPassword );
    142c:	8c e3       	ldi	r24, 0x3C	; 60
    142e:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>
				g_mismatch=0;
    1432:	10 92 7a 01 	sts	0x017A, r1
    1436:	7a c0       	rjmp	.+244    	; 0x152c <main+0x320>
			}

			else
			{
				g_mismatch++;
    1438:	80 91 7a 01 	lds	r24, 0x017A
    143c:	8f 5f       	subi	r24, 0xFF	; 255
    143e:	80 93 7a 01 	sts	0x017A, r24
				UART_sendByte(RequestedINCorrectPassword);
    1442:	8e e3       	ldi	r24, 0x3E	; 62
    1444:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	aa ef       	ldi	r26, 0xFA	; 250
    144e:	b3 e4       	ldi	r27, 0x43	; 67
    1450:	89 8f       	std	Y+25, r24	; 0x19
    1452:	9a 8f       	std	Y+26, r25	; 0x1a
    1454:	ab 8f       	std	Y+27, r26	; 0x1b
    1456:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1458:	69 8d       	ldd	r22, Y+25	; 0x19
    145a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    145c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    145e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	4a ef       	ldi	r20, 0xFA	; 250
    1466:	54 e4       	ldi	r21, 0x44	; 68
    1468:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    146c:	dc 01       	movw	r26, r24
    146e:	cb 01       	movw	r24, r22
    1470:	8d 8b       	std	Y+21, r24	; 0x15
    1472:	9e 8b       	std	Y+22, r25	; 0x16
    1474:	af 8b       	std	Y+23, r26	; 0x17
    1476:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1478:	6d 89       	ldd	r22, Y+21	; 0x15
    147a:	7e 89       	ldd	r23, Y+22	; 0x16
    147c:	8f 89       	ldd	r24, Y+23	; 0x17
    147e:	98 8d       	ldd	r25, Y+24	; 0x18
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	40 e8       	ldi	r20, 0x80	; 128
    1486:	5f e3       	ldi	r21, 0x3F	; 63
    1488:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    148c:	88 23       	and	r24, r24
    148e:	2c f4       	brge	.+10     	; 0x149a <main+0x28e>
		__ticks = 1;
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	9c 8b       	std	Y+20, r25	; 0x14
    1496:	8b 8b       	std	Y+19, r24	; 0x13
    1498:	3f c0       	rjmp	.+126    	; 0x1518 <main+0x30c>
	else if (__tmp > 65535)
    149a:	6d 89       	ldd	r22, Y+21	; 0x15
    149c:	7e 89       	ldd	r23, Y+22	; 0x16
    149e:	8f 89       	ldd	r24, Y+23	; 0x17
    14a0:	98 8d       	ldd	r25, Y+24	; 0x18
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	3f ef       	ldi	r19, 0xFF	; 255
    14a6:	4f e7       	ldi	r20, 0x7F	; 127
    14a8:	57 e4       	ldi	r21, 0x47	; 71
    14aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14ae:	18 16       	cp	r1, r24
    14b0:	4c f5       	brge	.+82     	; 0x1504 <main+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14b2:	69 8d       	ldd	r22, Y+25	; 0x19
    14b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	40 e2       	ldi	r20, 0x20	; 32
    14c0:	51 e4       	ldi	r21, 0x41	; 65
    14c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	bc 01       	movw	r22, r24
    14cc:	cd 01       	movw	r24, r26
    14ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d2:	dc 01       	movw	r26, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	9c 8b       	std	Y+20, r25	; 0x14
    14d8:	8b 8b       	std	Y+19, r24	; 0x13
    14da:	0f c0       	rjmp	.+30     	; 0x14fa <main+0x2ee>
    14dc:	88 ec       	ldi	r24, 0xC8	; 200
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	9a 8b       	std	Y+18, r25	; 0x12
    14e2:	89 8b       	std	Y+17, r24	; 0x11
    14e4:	89 89       	ldd	r24, Y+17	; 0x11
    14e6:	9a 89       	ldd	r25, Y+18	; 0x12
    14e8:	01 97       	sbiw	r24, 0x01	; 1
    14ea:	f1 f7       	brne	.-4      	; 0x14e8 <main+0x2dc>
    14ec:	9a 8b       	std	Y+18, r25	; 0x12
    14ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f0:	8b 89       	ldd	r24, Y+19	; 0x13
    14f2:	9c 89       	ldd	r25, Y+20	; 0x14
    14f4:	01 97       	sbiw	r24, 0x01	; 1
    14f6:	9c 8b       	std	Y+20, r25	; 0x14
    14f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14fa:	8b 89       	ldd	r24, Y+19	; 0x13
    14fc:	9c 89       	ldd	r25, Y+20	; 0x14
    14fe:	00 97       	sbiw	r24, 0x00	; 0
    1500:	69 f7       	brne	.-38     	; 0x14dc <main+0x2d0>
    1502:	14 c0       	rjmp	.+40     	; 0x152c <main+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1504:	6d 89       	ldd	r22, Y+21	; 0x15
    1506:	7e 89       	ldd	r23, Y+22	; 0x16
    1508:	8f 89       	ldd	r24, Y+23	; 0x17
    150a:	98 8d       	ldd	r25, Y+24	; 0x18
    150c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1510:	dc 01       	movw	r26, r24
    1512:	cb 01       	movw	r24, r22
    1514:	9c 8b       	std	Y+20, r25	; 0x14
    1516:	8b 8b       	std	Y+19, r24	; 0x13
    1518:	8b 89       	ldd	r24, Y+19	; 0x13
    151a:	9c 89       	ldd	r25, Y+20	; 0x14
    151c:	98 8b       	std	Y+16, r25	; 0x10
    151e:	8f 87       	std	Y+15, r24	; 0x0f
    1520:	8f 85       	ldd	r24, Y+15	; 0x0f
    1522:	98 89       	ldd	r25, Y+16	; 0x10
    1524:	01 97       	sbiw	r24, 0x01	; 1
    1526:	f1 f7       	brne	.-4      	; 0x1524 <main+0x318>
    1528:	98 8b       	std	Y+16, r25	; 0x10
    152a:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);

			}

			if(g_mismatch==3)
    152c:	80 91 7a 01 	lds	r24, 0x017A
    1530:	83 30       	cpi	r24, 0x03	; 3
    1532:	09 f0       	breq	.+2      	; 0x1536 <main+0x32a>
    1534:	c4 ce       	rjmp	.-632    	; 0x12be <main+0xb2>
				 * F_CPU/1024 prescaler.
				 * Interrupt mode.
				 * starting value = 0.
				 * Setting callBackFunction with Timer_Count();.
				*/
				Timer0Setup s_Timer0config={OVF0,FCPUT0_1024,OVF0_INT,0,0};
    1536:	9e 01       	movw	r18, r28
    1538:	29 5c       	subi	r18, 0xC9	; 201
    153a:	3f 4f       	sbci	r19, 0xFF	; 255
    153c:	25 96       	adiw	r28, 0x05	; 5
    153e:	3f af       	std	Y+63, r19	; 0x3f
    1540:	2e af       	std	Y+62, r18	; 0x3e
    1542:	25 97       	sbiw	r28, 0x05	; 5
    1544:	8d e6       	ldi	r24, 0x6D	; 109
    1546:	91 e0       	ldi	r25, 0x01	; 1
    1548:	27 96       	adiw	r28, 0x07	; 7
    154a:	9f af       	std	Y+63, r25	; 0x3f
    154c:	8e af       	std	Y+62, r24	; 0x3e
    154e:	27 97       	sbiw	r28, 0x07	; 7
    1550:	95 e0       	ldi	r25, 0x05	; 5
    1552:	28 96       	adiw	r28, 0x08	; 8
    1554:	9f af       	std	Y+63, r25	; 0x3f
    1556:	28 97       	sbiw	r28, 0x08	; 8
    1558:	27 96       	adiw	r28, 0x07	; 7
    155a:	ee ad       	ldd	r30, Y+62	; 0x3e
    155c:	ff ad       	ldd	r31, Y+63	; 0x3f
    155e:	27 97       	sbiw	r28, 0x07	; 7
    1560:	00 80       	ld	r0, Z
    1562:	27 96       	adiw	r28, 0x07	; 7
    1564:	2e ad       	ldd	r18, Y+62	; 0x3e
    1566:	3f ad       	ldd	r19, Y+63	; 0x3f
    1568:	27 97       	sbiw	r28, 0x07	; 7
    156a:	2f 5f       	subi	r18, 0xFF	; 255
    156c:	3f 4f       	sbci	r19, 0xFF	; 255
    156e:	27 96       	adiw	r28, 0x07	; 7
    1570:	3f af       	std	Y+63, r19	; 0x3f
    1572:	2e af       	std	Y+62, r18	; 0x3e
    1574:	27 97       	sbiw	r28, 0x07	; 7
    1576:	25 96       	adiw	r28, 0x05	; 5
    1578:	ee ad       	ldd	r30, Y+62	; 0x3e
    157a:	ff ad       	ldd	r31, Y+63	; 0x3f
    157c:	25 97       	sbiw	r28, 0x05	; 5
    157e:	00 82       	st	Z, r0
    1580:	25 96       	adiw	r28, 0x05	; 5
    1582:	2e ad       	ldd	r18, Y+62	; 0x3e
    1584:	3f ad       	ldd	r19, Y+63	; 0x3f
    1586:	25 97       	sbiw	r28, 0x05	; 5
    1588:	2f 5f       	subi	r18, 0xFF	; 255
    158a:	3f 4f       	sbci	r19, 0xFF	; 255
    158c:	25 96       	adiw	r28, 0x05	; 5
    158e:	3f af       	std	Y+63, r19	; 0x3f
    1590:	2e af       	std	Y+62, r18	; 0x3e
    1592:	25 97       	sbiw	r28, 0x05	; 5
    1594:	28 96       	adiw	r28, 0x08	; 8
    1596:	3f ad       	ldd	r19, Y+63	; 0x3f
    1598:	28 97       	sbiw	r28, 0x08	; 8
    159a:	31 50       	subi	r19, 0x01	; 1
    159c:	28 96       	adiw	r28, 0x08	; 8
    159e:	3f af       	std	Y+63, r19	; 0x3f
    15a0:	28 97       	sbiw	r28, 0x08	; 8
    15a2:	28 96       	adiw	r28, 0x08	; 8
    15a4:	8f ad       	ldd	r24, Y+63	; 0x3f
    15a6:	28 97       	sbiw	r28, 0x08	; 8
    15a8:	88 23       	and	r24, r24
    15aa:	b1 f6       	brne	.-84     	; 0x1558 <main+0x34c>
				Timer0_Start(&s_Timer0config);
    15ac:	ce 01       	movw	r24, r28
    15ae:	c7 96       	adiw	r24, 0x37	; 55
    15b0:	0e 94 64 13 	call	0x26c8	; 0x26c8 <Timer0_Start>
				Timer0_setCallBack(Timer_Count);
    15b4:	89 e9       	ldi	r24, 0x99	; 153
    15b6:	97 e0       	ldi	r25, 0x07	; 7
    15b8:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <Timer0_setCallBack>

				UART_sendByte(errorScreen);
    15bc:	85 e4       	ldi	r24, 0x45	; 69
    15be:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>

				g_mismatch=0;
    15c2:	10 92 7a 01 	sts	0x017A, r1

				BUZZER_on();
    15c6:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <BUZZER_on>
				g_tick3=0;
    15ca:	10 92 7f 01 	sts	0x017F, r1
    15ce:	10 92 7e 01 	sts	0x017E, r1

				while(g_tick3 != 1780);
    15d2:	80 91 7e 01 	lds	r24, 0x017E
    15d6:	90 91 7f 01 	lds	r25, 0x017F
    15da:	e6 e0       	ldi	r30, 0x06	; 6
    15dc:	84 3f       	cpi	r24, 0xF4	; 244
    15de:	9e 07       	cpc	r25, r30
    15e0:	c1 f7       	brne	.-16     	; 0x15d2 <main+0x3c6>
				BUZZER_off();
    15e2:	0e 94 08 0c 	call	0x1810	; 0x1810 <BUZZER_off>

				/* Stops timer2 */
				Timer0_DeInit();
    15e6:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <Timer0_DeInit>
    15ea:	69 ce       	rjmp	.-814    	; 0x12be <main+0xb2>


		/* */
		case openDoor :

			g_order=0;
    15ec:	10 92 90 01 	sts	0x0190, r1
			 * starting value = 0.
			 * Setting callBackFunction with Timer_Count();.
			 * Note: we could have used only one timer (timer0) but i used (timer2) too
			 * to make sure that whole driver is working well.
			*/
			Timer2Setup s_Timer0config={OVF2,FCPUT2_1024,OVF2_INT,0,0};
    15f0:	9e 01       	movw	r18, r28
    15f2:	2e 5c       	subi	r18, 0xCE	; 206
    15f4:	3f 4f       	sbci	r19, 0xFF	; 255
    15f6:	2a 96       	adiw	r28, 0x0a	; 10
    15f8:	3f af       	std	Y+63, r19	; 0x3f
    15fa:	2e af       	std	Y+62, r18	; 0x3e
    15fc:	2a 97       	sbiw	r28, 0x0a	; 10
    15fe:	88 e6       	ldi	r24, 0x68	; 104
    1600:	91 e0       	ldi	r25, 0x01	; 1
    1602:	2c 96       	adiw	r28, 0x0c	; 12
    1604:	9f af       	std	Y+63, r25	; 0x3f
    1606:	8e af       	std	Y+62, r24	; 0x3e
    1608:	2c 97       	sbiw	r28, 0x0c	; 12
    160a:	95 e0       	ldi	r25, 0x05	; 5
    160c:	2d 96       	adiw	r28, 0x0d	; 13
    160e:	9f af       	std	Y+63, r25	; 0x3f
    1610:	2d 97       	sbiw	r28, 0x0d	; 13
    1612:	2c 96       	adiw	r28, 0x0c	; 12
    1614:	ee ad       	ldd	r30, Y+62	; 0x3e
    1616:	ff ad       	ldd	r31, Y+63	; 0x3f
    1618:	2c 97       	sbiw	r28, 0x0c	; 12
    161a:	00 80       	ld	r0, Z
    161c:	2c 96       	adiw	r28, 0x0c	; 12
    161e:	2e ad       	ldd	r18, Y+62	; 0x3e
    1620:	3f ad       	ldd	r19, Y+63	; 0x3f
    1622:	2c 97       	sbiw	r28, 0x0c	; 12
    1624:	2f 5f       	subi	r18, 0xFF	; 255
    1626:	3f 4f       	sbci	r19, 0xFF	; 255
    1628:	2c 96       	adiw	r28, 0x0c	; 12
    162a:	3f af       	std	Y+63, r19	; 0x3f
    162c:	2e af       	std	Y+62, r18	; 0x3e
    162e:	2c 97       	sbiw	r28, 0x0c	; 12
    1630:	2a 96       	adiw	r28, 0x0a	; 10
    1632:	ee ad       	ldd	r30, Y+62	; 0x3e
    1634:	ff ad       	ldd	r31, Y+63	; 0x3f
    1636:	2a 97       	sbiw	r28, 0x0a	; 10
    1638:	00 82       	st	Z, r0
    163a:	2a 96       	adiw	r28, 0x0a	; 10
    163c:	2e ad       	ldd	r18, Y+62	; 0x3e
    163e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1640:	2a 97       	sbiw	r28, 0x0a	; 10
    1642:	2f 5f       	subi	r18, 0xFF	; 255
    1644:	3f 4f       	sbci	r19, 0xFF	; 255
    1646:	2a 96       	adiw	r28, 0x0a	; 10
    1648:	3f af       	std	Y+63, r19	; 0x3f
    164a:	2e af       	std	Y+62, r18	; 0x3e
    164c:	2a 97       	sbiw	r28, 0x0a	; 10
    164e:	2d 96       	adiw	r28, 0x0d	; 13
    1650:	3f ad       	ldd	r19, Y+63	; 0x3f
    1652:	2d 97       	sbiw	r28, 0x0d	; 13
    1654:	31 50       	subi	r19, 0x01	; 1
    1656:	2d 96       	adiw	r28, 0x0d	; 13
    1658:	3f af       	std	Y+63, r19	; 0x3f
    165a:	2d 97       	sbiw	r28, 0x0d	; 13
    165c:	2d 96       	adiw	r28, 0x0d	; 13
    165e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1660:	2d 97       	sbiw	r28, 0x0d	; 13
    1662:	88 23       	and	r24, r24
    1664:	b1 f6       	brne	.-84     	; 0x1612 <main+0x406>
			Timer2_Start(&s_Timer0config);
    1666:	ce 01       	movw	r24, r28
    1668:	c2 96       	adiw	r24, 0x32	; 50
    166a:	0e 94 cc 13 	call	0x2798	; 0x2798 <Timer2_Start>
			Timer2_setCallBack(Timer_Count);
    166e:	89 e9       	ldi	r24, 0x99	; 153
    1670:	97 e0       	ldi	r25, 0x07	; 7
    1672:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <Timer2_setCallBack>
			UART_sendByte(DoorOpening);
    1676:	8f e4       	ldi	r24, 0x4F	; 79
    1678:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>

			DcMotor_Rotate(CLOCK_WISE,100);
    167c:	82 e0       	ldi	r24, 0x02	; 2
    167e:	64 e6       	ldi	r22, 0x64	; 100
    1680:	0e 94 4d 0c 	call	0x189a	; 0x189a <DcMotor_Rotate>
			g_tick2=0;
    1684:	10 92 7d 01 	sts	0x017D, r1
    1688:	10 92 7c 01 	sts	0x017C, r1
			while(g_tick2 != 445);
    168c:	80 91 7c 01 	lds	r24, 0x017C
    1690:	90 91 7d 01 	lds	r25, 0x017D
    1694:	e1 e0       	ldi	r30, 0x01	; 1
    1696:	8d 3b       	cpi	r24, 0xBD	; 189
    1698:	9e 07       	cpc	r25, r30
    169a:	c1 f7       	brne	.-16     	; 0x168c <main+0x480>

			UART_sendByte(DoorIsOpened);
    169c:	86 e2       	ldi	r24, 0x26	; 38
    169e:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>
			DcMotor_Rotate(CLOCK_WISE,0);
    16a2:	82 e0       	ldi	r24, 0x02	; 2
    16a4:	60 e0       	ldi	r22, 0x00	; 0
    16a6:	0e 94 4d 0c 	call	0x189a	; 0x189a <DcMotor_Rotate>
			g_tick1=0;
    16aa:	10 92 7b 01 	sts	0x017B, r1
			while(g_tick1 != 95);
    16ae:	80 91 7b 01 	lds	r24, 0x017B
    16b2:	8f 35       	cpi	r24, 0x5F	; 95
    16b4:	e1 f7       	brne	.-8      	; 0x16ae <main+0x4a2>



			UART_sendByte(DoorClosing);
    16b6:	83 e4       	ldi	r24, 0x43	; 67
    16b8:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>
			DcMotor_Rotate(ANTI_CLOCK_WISE,100);
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	64 e6       	ldi	r22, 0x64	; 100
    16c0:	0e 94 4d 0c 	call	0x189a	; 0x189a <DcMotor_Rotate>
			g_tick2=0;
    16c4:	10 92 7d 01 	sts	0x017D, r1
    16c8:	10 92 7c 01 	sts	0x017C, r1
			while(((g_tick2) != (445)));
    16cc:	80 91 7c 01 	lds	r24, 0x017C
    16d0:	90 91 7d 01 	lds	r25, 0x017D
    16d4:	f1 e0       	ldi	r31, 0x01	; 1
    16d6:	8d 3b       	cpi	r24, 0xBD	; 189
    16d8:	9f 07       	cpc	r25, r31
    16da:	c1 f7       	brne	.-16     	; 0x16cc <main+0x4c0>

			UART_sendByte(DoorIsClosed);
    16dc:	8c e7       	ldi	r24, 0x7C	; 124
    16de:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>
			DcMotor_Rotate(CLOCK_WISE,0);
    16e2:	82 e0       	ldi	r24, 0x02	; 2
    16e4:	60 e0       	ldi	r22, 0x00	; 0
    16e6:	0e 94 4d 0c 	call	0x189a	; 0x189a <DcMotor_Rotate>
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	aa ef       	ldi	r26, 0xFA	; 250
    16f0:	b4 e4       	ldi	r27, 0x44	; 68
    16f2:	8b 87       	std	Y+11, r24	; 0x0b
    16f4:	9c 87       	std	Y+12, r25	; 0x0c
    16f6:	ad 87       	std	Y+13, r26	; 0x0d
    16f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    16fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    16fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1700:	9e 85       	ldd	r25, Y+14	; 0x0e
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	4a ef       	ldi	r20, 0xFA	; 250
    1708:	54 e4       	ldi	r21, 0x44	; 68
    170a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	8f 83       	std	Y+7, r24	; 0x07
    1714:	98 87       	std	Y+8, r25	; 0x08
    1716:	a9 87       	std	Y+9, r26	; 0x09
    1718:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    171a:	6f 81       	ldd	r22, Y+7	; 0x07
    171c:	78 85       	ldd	r23, Y+8	; 0x08
    171e:	89 85       	ldd	r24, Y+9	; 0x09
    1720:	9a 85       	ldd	r25, Y+10	; 0x0a
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	40 e8       	ldi	r20, 0x80	; 128
    1728:	5f e3       	ldi	r21, 0x3F	; 63
    172a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    172e:	88 23       	and	r24, r24
    1730:	2c f4       	brge	.+10     	; 0x173c <main+0x530>
		__ticks = 1;
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	9e 83       	std	Y+6, r25	; 0x06
    1738:	8d 83       	std	Y+5, r24	; 0x05
    173a:	3f c0       	rjmp	.+126    	; 0x17ba <main+0x5ae>
	else if (__tmp > 65535)
    173c:	6f 81       	ldd	r22, Y+7	; 0x07
    173e:	78 85       	ldd	r23, Y+8	; 0x08
    1740:	89 85       	ldd	r24, Y+9	; 0x09
    1742:	9a 85       	ldd	r25, Y+10	; 0x0a
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	3f ef       	ldi	r19, 0xFF	; 255
    1748:	4f e7       	ldi	r20, 0x7F	; 127
    174a:	57 e4       	ldi	r21, 0x47	; 71
    174c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1750:	18 16       	cp	r1, r24
    1752:	4c f5       	brge	.+82     	; 0x17a6 <main+0x59a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1754:	6b 85       	ldd	r22, Y+11	; 0x0b
    1756:	7c 85       	ldd	r23, Y+12	; 0x0c
    1758:	8d 85       	ldd	r24, Y+13	; 0x0d
    175a:	9e 85       	ldd	r25, Y+14	; 0x0e
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	40 e2       	ldi	r20, 0x20	; 32
    1762:	51 e4       	ldi	r21, 0x41	; 65
    1764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1768:	dc 01       	movw	r26, r24
    176a:	cb 01       	movw	r24, r22
    176c:	bc 01       	movw	r22, r24
    176e:	cd 01       	movw	r24, r26
    1770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1774:	dc 01       	movw	r26, r24
    1776:	cb 01       	movw	r24, r22
    1778:	9e 83       	std	Y+6, r25	; 0x06
    177a:	8d 83       	std	Y+5, r24	; 0x05
    177c:	0f c0       	rjmp	.+30     	; 0x179c <main+0x590>
    177e:	88 ec       	ldi	r24, 0xC8	; 200
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	9c 83       	std	Y+4, r25	; 0x04
    1784:	8b 83       	std	Y+3, r24	; 0x03
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	9c 81       	ldd	r25, Y+4	; 0x04
    178a:	01 97       	sbiw	r24, 0x01	; 1
    178c:	f1 f7       	brne	.-4      	; 0x178a <main+0x57e>
    178e:	9c 83       	std	Y+4, r25	; 0x04
    1790:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1792:	8d 81       	ldd	r24, Y+5	; 0x05
    1794:	9e 81       	ldd	r25, Y+6	; 0x06
    1796:	01 97       	sbiw	r24, 0x01	; 1
    1798:	9e 83       	std	Y+6, r25	; 0x06
    179a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    179c:	8d 81       	ldd	r24, Y+5	; 0x05
    179e:	9e 81       	ldd	r25, Y+6	; 0x06
    17a0:	00 97       	sbiw	r24, 0x00	; 0
    17a2:	69 f7       	brne	.-38     	; 0x177e <main+0x572>
    17a4:	14 c0       	rjmp	.+40     	; 0x17ce <main+0x5c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a6:	6f 81       	ldd	r22, Y+7	; 0x07
    17a8:	78 85       	ldd	r23, Y+8	; 0x08
    17aa:	89 85       	ldd	r24, Y+9	; 0x09
    17ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	9e 83       	std	Y+6, r25	; 0x06
    17b8:	8d 83       	std	Y+5, r24	; 0x05
    17ba:	8d 81       	ldd	r24, Y+5	; 0x05
    17bc:	9e 81       	ldd	r25, Y+6	; 0x06
    17be:	9a 83       	std	Y+2, r25	; 0x02
    17c0:	89 83       	std	Y+1, r24	; 0x01
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	9a 81       	ldd	r25, Y+2	; 0x02
    17c6:	01 97       	sbiw	r24, 0x01	; 1
    17c8:	f1 f7       	brne	.-4      	; 0x17c6 <main+0x5ba>
    17ca:	9a 83       	std	Y+2, r25	; 0x02
    17cc:	89 83       	std	Y+1, r24	; 0x01

			_delay_ms(2000);

			UART_sendByte(PasswordMatch);
    17ce:	82 e5       	ldi	r24, 0x52	; 82
    17d0:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>

			/* Stops timer2 */
			Timer2_DeInit();
    17d4:	0e 94 b9 14 	call	0x2972	; 0x2972 <Timer2_DeInit>
    17d8:	72 cd       	rjmp	.-1308   	; 0x12be <main+0xb2>
			break;


		/* */
		default :
			g_order=0;
    17da:	10 92 90 01 	sts	0x0190, r1
    17de:	6f cd       	rjmp	.-1314   	; 0x12be <main+0xb2>

000017e0 <BUZZER_init>:
 *******************************************************************************/
/*
 * Description :
 * Initialize the buzzer pin.
 */
void BUZZER_init(void){
    17e0:	df 93       	push	r29
    17e2:	cf 93       	push	r28
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
    17e8:	82 e0       	ldi	r24, 0x02	; 2
    17ea:	65 e0       	ldi	r22, 0x05	; 5
    17ec:	41 e0       	ldi	r20, 0x01	; 1
    17ee:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <GPIO_setupPinDirection>
}
    17f2:	cf 91       	pop	r28
    17f4:	df 91       	pop	r29
    17f6:	08 95       	ret

000017f8 <BUZZER_on>:

/*
 * Description :
 * Turns on the buzzer.
 */
void BUZZER_on(void){
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,1);
    1800:	82 e0       	ldi	r24, 0x02	; 2
    1802:	65 e0       	ldi	r22, 0x05	; 5
    1804:	41 e0       	ldi	r20, 0x01	; 1
    1806:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <GPIO_writePin>
}
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <BUZZER_off>:

/*
 * Description :
 * Turns off the buzzer.
 */
void BUZZER_off(void){
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,0);
    1818:	82 e0       	ldi	r24, 0x02	; 2
    181a:	65 e0       	ldi	r22, 0x05	; 5
    181c:	40 e0       	ldi	r20, 0x00	; 0
    181e:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <GPIO_writePin>
}
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	08 95       	ret

00001828 <DcMotor_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/
/*
 * Description: Function to initialize Dc-Motor connected to AVR.
 */
void DcMotor_init(void){
    1828:	df 93       	push	r29
    182a:	cf 93       	push	r28
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
	/* Input1 pin of the first motor */
	GPIO_setupPinDirection(MOTOR_INPUT0_PORT_ID, MOTOR_INPUTA_PIN_ID , PIN_OUTPUT);
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	60 e0       	ldi	r22, 0x00	; 0
    1834:	41 e0       	ldi	r20, 0x01	; 1
    1836:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <GPIO_setupPinDirection>
	/* Input2 pin of the first motor */
	GPIO_setupPinDirection(MOTOR_INPUT0_PORT_ID, MOTOR_INPUTB_PIN_ID , PIN_OUTPUT);
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	61 e0       	ldi	r22, 0x01	; 1
    183e:	41 e0       	ldi	r20, 0x01	; 1
    1840:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <GPIO_setupPinDirection>
	/* Enable pin of the first motor */
	GPIO_setupPinDirection(MOTOR_ENABLE0_PORT_ID, MOTOR_ENABLE0_PIN_ID , PIN_OUTPUT);
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	63 e0       	ldi	r22, 0x03	; 3
    1848:	41 e0       	ldi	r20, 0x01	; 1
    184a:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <GPIO_setupPinDirection>
	/* Initialize speed of motor =0 at first */
	GPIO_writePin(MOTOR_INPUT0_PORT_ID, MOTOR_INPUTA_PIN_ID ,0);
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	60 e0       	ldi	r22, 0x00	; 0
    1852:	40 e0       	ldi	r20, 0x00	; 0
    1854:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <GPIO_writePin>
	GPIO_writePin(MOTOR_INPUT0_PORT_ID, MOTOR_INPUTB_PIN_ID ,0);
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	61 e0       	ldi	r22, 0x01	; 1
    185c:	40 e0       	ldi	r20, 0x00	; 0
    185e:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <GPIO_writePin>


	/* Input1 pin of the second motor */
	GPIO_setupPinDirection(MOTOR_INPUT1_PORT_ID, MOTOR_INPUTC_PIN_ID , PIN_OUTPUT);
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	62 e0       	ldi	r22, 0x02	; 2
    1866:	41 e0       	ldi	r20, 0x01	; 1
    1868:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <GPIO_setupPinDirection>
	/* Input2 pin of the second motor */
	GPIO_setupPinDirection(MOTOR_INPUT1_PORT_ID, MOTOR_INPUTD_PIN_ID , PIN_OUTPUT);
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	63 e0       	ldi	r22, 0x03	; 3
    1870:	41 e0       	ldi	r20, 0x01	; 1
    1872:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <GPIO_setupPinDirection>
	/* Enable pin of the second motor */
	GPIO_setupPinDirection(MOTOR_ENABLE1_PORT_ID, MOTOR_ENABLE1_PIN_ID , PIN_OUTPUT);
    1876:	83 e0       	ldi	r24, 0x03	; 3
    1878:	67 e0       	ldi	r22, 0x07	; 7
    187a:	41 e0       	ldi	r20, 0x01	; 1
    187c:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <GPIO_setupPinDirection>
	/* Initialize speed of motor =0 at first */
	GPIO_writePin(MOTOR_INPUT1_PORT_ID, MOTOR_INPUTC_PIN_ID ,0);
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	62 e0       	ldi	r22, 0x02	; 2
    1884:	40 e0       	ldi	r20, 0x00	; 0
    1886:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <GPIO_writePin>
	GPIO_writePin(MOTOR_INPUT1_PORT_ID, MOTOR_INPUTD_PIN_ID ,0);
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	63 e0       	ldi	r22, 0x03	; 3
    188e:	40 e0       	ldi	r20, 0x00	; 0
    1890:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <GPIO_writePin>
}
    1894:	cf 91       	pop	r28
    1896:	df 91       	pop	r29
    1898:	08 95       	ret

0000189a <DcMotor_Rotate>:


/*
 * Description: Function to initialize Dc Motor rotation connected to PWM Timer0 of AVR.
 */
void DcMotor_Rotate(DcMotor_State state, uint8 speed){
    189a:	df 93       	push	r29
    189c:	cf 93       	push	r28
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
    18a2:	27 97       	sbiw	r28, 0x07	; 7
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	f8 94       	cli
    18a8:	de bf       	out	0x3e, r29	; 62
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	cd bf       	out	0x3d, r28	; 61
    18ae:	8e 83       	std	Y+6, r24	; 0x06
    18b0:	6f 83       	std	Y+7, r22	; 0x07
	uint8 value1,value2;
	/* Start pwm mode of timer0 to control speed of motor at pin OC0/PB3 */
	PWM0_ConfigType s_config={FCPU0_8 , speed , NON_INVERTING0};
    18b2:	82 e0       	ldi	r24, 0x02	; 2
    18b4:	8b 83       	std	Y+3, r24	; 0x03
    18b6:	8f 81       	ldd	r24, Y+7	; 0x07
    18b8:	8c 83       	std	Y+4, r24	; 0x04
    18ba:	80 e2       	ldi	r24, 0x20	; 32
    18bc:	8d 83       	std	Y+5, r24	; 0x05
	PWM_Timer0_Start(&s_config);
    18be:	ce 01       	movw	r24, r28
    18c0:	03 96       	adiw	r24, 0x03	; 3
    18c2:	0e 94 d6 10 	call	0x21ac	; 0x21ac <PWM_Timer0_Start>

	/* Configure State of Motor CW/ACW */
	value1= (0x01 & state);
    18c6:	8e 81       	ldd	r24, Y+6	; 0x06
    18c8:	81 70       	andi	r24, 0x01	; 1
    18ca:	8a 83       	std	Y+2, r24	; 0x02
	value2= ((0x02 & state)>>1);
    18cc:	8e 81       	ldd	r24, Y+6	; 0x06
    18ce:	88 2f       	mov	r24, r24
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	82 70       	andi	r24, 0x02	; 2
    18d4:	90 70       	andi	r25, 0x00	; 0
    18d6:	95 95       	asr	r25
    18d8:	87 95       	ror	r24
    18da:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(MOTOR_INPUT0_PORT_ID, MOTOR_INPUTA_PIN_ID , value1);
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	60 e0       	ldi	r22, 0x00	; 0
    18e0:	4a 81       	ldd	r20, Y+2	; 0x02
    18e2:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <GPIO_writePin>
	GPIO_writePin(MOTOR_INPUT0_PORT_ID, MOTOR_INPUTB_PIN_ID , value2);
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	61 e0       	ldi	r22, 0x01	; 1
    18ea:	49 81       	ldd	r20, Y+1	; 0x01
    18ec:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <GPIO_writePin>
}
    18f0:	27 96       	adiw	r28, 0x07	; 7
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	f8 94       	cli
    18f6:	de bf       	out	0x3e, r29	; 62
    18f8:	0f be       	out	0x3f, r0	; 63
    18fa:	cd bf       	out	0x3d, r28	; 61
    18fc:	cf 91       	pop	r28
    18fe:	df 91       	pop	r29
    1900:	08 95       	ret

00001902 <DcMotor_Rotate2>:


/*
 * Description: Function to initialize Dc Motor rotation connected to PWM Timer2 of AVR.
 */
void DcMotor_Rotate2(DcMotor_State state, uint8 speed){
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	27 97       	sbiw	r28, 0x07	; 7
    190c:	0f b6       	in	r0, 0x3f	; 63
    190e:	f8 94       	cli
    1910:	de bf       	out	0x3e, r29	; 62
    1912:	0f be       	out	0x3f, r0	; 63
    1914:	cd bf       	out	0x3d, r28	; 61
    1916:	8e 83       	std	Y+6, r24	; 0x06
    1918:	6f 83       	std	Y+7, r22	; 0x07
	uint8 value1,value2;;
	/* Start pwm mode of timer0 to control speed of motor at pin OC0/PB3 */
	PWM2_ConfigType s_config={FCPU2_8, speed ,NON_INVERTING2};
    191a:	82 e0       	ldi	r24, 0x02	; 2
    191c:	8b 83       	std	Y+3, r24	; 0x03
    191e:	8f 81       	ldd	r24, Y+7	; 0x07
    1920:	8c 83       	std	Y+4, r24	; 0x04
    1922:	80 e2       	ldi	r24, 0x20	; 32
    1924:	8d 83       	std	Y+5, r24	; 0x05
	PWM_Timer2_Start(&s_config);
    1926:	ce 01       	movw	r24, r28
    1928:	03 96       	adiw	r24, 0x03	; 3
    192a:	0e 94 26 11 	call	0x224c	; 0x224c <PWM_Timer2_Start>

	/* Configure State of Motor CW/ACW */
	value1= (0x01 & state);
    192e:	8e 81       	ldd	r24, Y+6	; 0x06
    1930:	81 70       	andi	r24, 0x01	; 1
    1932:	8a 83       	std	Y+2, r24	; 0x02
	value2= ((0x02 & state)>>1);
    1934:	8e 81       	ldd	r24, Y+6	; 0x06
    1936:	88 2f       	mov	r24, r24
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	82 70       	andi	r24, 0x02	; 2
    193c:	90 70       	andi	r25, 0x00	; 0
    193e:	95 95       	asr	r25
    1940:	87 95       	ror	r24
    1942:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(MOTOR_INPUT1_PORT_ID, MOTOR_INPUTC_PIN_ID , value1);
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	62 e0       	ldi	r22, 0x02	; 2
    1948:	4a 81       	ldd	r20, Y+2	; 0x02
    194a:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <GPIO_writePin>
	GPIO_writePin(MOTOR_INPUT1_PORT_ID, MOTOR_INPUTD_PIN_ID , value2);
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	63 e0       	ldi	r22, 0x03	; 3
    1952:	49 81       	ldd	r20, Y+1	; 0x01
    1954:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <GPIO_writePin>
}
    1958:	27 96       	adiw	r28, 0x07	; 7
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	f8 94       	cli
    195e:	de bf       	out	0x3e, r29	; 62
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	cd bf       	out	0x3d, r28	; 61
    1964:	cf 91       	pop	r28
    1966:	df 91       	pop	r29
    1968:	08 95       	ret

0000196a <DcMotor_setSpeed>:


/*
 * Description: Function to change speed of Dc Motor rotation connected to PWM Timer1 of AVR.
 */
void DcMotor_setSpeed(uint8 speed){
    196a:	df 93       	push	r29
    196c:	cf 93       	push	r28
    196e:	0f 92       	push	r0
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
    1974:	89 83       	std	Y+1, r24	; 0x01
	PWM_Timer0_changeDuty(speed);
    1976:	89 81       	ldd	r24, Y+1	; 0x01
    1978:	0e 94 96 11 	call	0x232c	; 0x232c <PWM_Timer0_changeDuty>
}
    197c:	0f 90       	pop	r0
    197e:	cf 91       	pop	r28
    1980:	df 91       	pop	r29
    1982:	08 95       	ret

00001984 <DcMotor_setSpeed2>:


/*
 * Description: Function to change speed of Dc Motor rotation connected to PWM Timer2 of AVR.
 */
void DcMotor_setSpeed2(uint8 speed){
    1984:	df 93       	push	r29
    1986:	cf 93       	push	r28
    1988:	0f 92       	push	r0
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
    198e:	89 83       	std	Y+1, r24	; 0x01
	PWM_Timer2_changeDuty(speed);
    1990:	89 81       	ldd	r24, Y+1	; 0x01
    1992:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <PWM_Timer2_changeDuty>
}
    1996:	0f 90       	pop	r0
    1998:	cf 91       	pop	r28
    199a:	df 91       	pop	r29
    199c:	08 95       	ret

0000199e <DcMotor_stopMotor>:


/*
 * Description: Function to stop Dc Motor rotation connected to PWM Timer1 of AVR.
 */
void DcMotor_stopMotor(void){
    199e:	df 93       	push	r29
    19a0:	cf 93       	push	r28
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
	/* Best Method:
	 * As it stops PWM signal as well to conserve Power Consumption.
	 *  */
	PWM_Timer0_DeInit();
    19a6:	0e 94 76 11 	call	0x22ec	; 0x22ec <PWM_Timer0_DeInit>

	/* Another Method:
	 * can be done by stopping the PWM clock :
	 * PWM_Timer0_changeClock(STOP0);
	 */
}
    19aa:	cf 91       	pop	r28
    19ac:	df 91       	pop	r29
    19ae:	08 95       	ret

000019b0 <DcMotor_stopMotor2>:


/*
 * Description: Function to stop Dc Motor rotation connected to PWM Timer2 of AVR.
 */
void DcMotor_stopMotor2(void){
    19b0:	df 93       	push	r29
    19b2:	cf 93       	push	r28
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
	/* Best Method:
	 * As it stops PWM signal as well to conserve Power Consumption.
	 *  */
	PWM_Timer2_DeInit();
    19b8:	0e 94 86 11 	call	0x230c	; 0x230c <PWM_Timer2_DeInit>

	/* Another Method:
	 * can be done by stopping the PWM clock :
	 * PWM_Timer2_changeClock(STOP2);
	 */
}
    19bc:	cf 91       	pop	r28
    19be:	df 91       	pop	r29
    19c0:	08 95       	ret

000019c2 <EEPROM_init>:
 *
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

void EEPROM_init(){
    19c2:	df 93       	push	r29
    19c4:	cf 93       	push	r28
    19c6:	00 d0       	rcall	.+0      	; 0x19c8 <EEPROM_init+0x6>
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	I2c_ConfigType I2c_Config ={0x02,0b00000010};
    19cc:	82 e0       	ldi	r24, 0x02	; 2
    19ce:	89 83       	std	Y+1, r24	; 0x01
    19d0:	82 e0       	ldi	r24, 0x02	; 2
    19d2:	8a 83       	std	Y+2, r24	; 0x02
	TWI_init(&I2c_Config);
    19d4:	ce 01       	movw	r24, r28
    19d6:	01 96       	adiw	r24, 0x01	; 1
    19d8:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <TWI_init>
}
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	cf 91       	pop	r28
    19e2:	df 91       	pop	r29
    19e4:	08 95       	ret

000019e6 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	00 d0       	rcall	.+0      	; 0x19ec <EEPROM_writeByte+0x6>
    19ec:	00 d0       	rcall	.+0      	; 0x19ee <EEPROM_writeByte+0x8>
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
    19f2:	9a 83       	std	Y+2, r25	; 0x02
    19f4:	89 83       	std	Y+1, r24	; 0x01
    19f6:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    19f8:	0e 94 29 15 	call	0x2a52	; 0x2a52 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    19fc:	0e 94 81 15 	call	0x2b02	; 0x2b02 <TWI_getStatus>
    1a00:	88 30       	cpi	r24, 0x08	; 8
    1a02:	11 f0       	breq	.+4      	; 0x1a08 <EEPROM_writeByte+0x22>
        return ERROR;
    1a04:	1c 82       	std	Y+4, r1	; 0x04
    1a06:	28 c0       	rjmp	.+80     	; 0x1a58 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0c:	80 70       	andi	r24, 0x00	; 0
    1a0e:	97 70       	andi	r25, 0x07	; 7
    1a10:	88 0f       	add	r24, r24
    1a12:	89 2f       	mov	r24, r25
    1a14:	88 1f       	adc	r24, r24
    1a16:	99 0b       	sbc	r25, r25
    1a18:	91 95       	neg	r25
    1a1a:	80 6a       	ori	r24, 0xA0	; 160
    1a1c:	0e 94 44 15 	call	0x2a88	; 0x2a88 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1a20:	0e 94 81 15 	call	0x2b02	; 0x2b02 <TWI_getStatus>
    1a24:	88 31       	cpi	r24, 0x18	; 24
    1a26:	11 f0       	breq	.+4      	; 0x1a2c <EEPROM_writeByte+0x46>
        return ERROR; 
    1a28:	1c 82       	std	Y+4, r1	; 0x04
    1a2a:	16 c0       	rjmp	.+44     	; 0x1a58 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
    1a2e:	0e 94 44 15 	call	0x2a88	; 0x2a88 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1a32:	0e 94 81 15 	call	0x2b02	; 0x2b02 <TWI_getStatus>
    1a36:	88 32       	cpi	r24, 0x28	; 40
    1a38:	11 f0       	breq	.+4      	; 0x1a3e <EEPROM_writeByte+0x58>
        return ERROR;
    1a3a:	1c 82       	std	Y+4, r1	; 0x04
    1a3c:	0d c0       	rjmp	.+26     	; 0x1a58 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a40:	0e 94 44 15 	call	0x2a88	; 0x2a88 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1a44:	0e 94 81 15 	call	0x2b02	; 0x2b02 <TWI_getStatus>
    1a48:	88 32       	cpi	r24, 0x28	; 40
    1a4a:	11 f0       	breq	.+4      	; 0x1a50 <EEPROM_writeByte+0x6a>
        return ERROR;
    1a4c:	1c 82       	std	Y+4, r1	; 0x04
    1a4e:	04 c0       	rjmp	.+8      	; 0x1a58 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1a50:	0e 94 39 15 	call	0x2a72	; 0x2a72 <TWI_stop>
	
    return SUCCESS;
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	8c 83       	std	Y+4, r24	; 0x04
    1a58:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	cf 91       	pop	r28
    1a64:	df 91       	pop	r29
    1a66:	08 95       	ret

00001a68 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	00 d0       	rcall	.+0      	; 0x1a6e <EEPROM_readByte+0x6>
    1a6e:	00 d0       	rcall	.+0      	; 0x1a70 <EEPROM_readByte+0x8>
    1a70:	0f 92       	push	r0
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
    1a76:	9a 83       	std	Y+2, r25	; 0x02
    1a78:	89 83       	std	Y+1, r24	; 0x01
    1a7a:	7c 83       	std	Y+4, r23	; 0x04
    1a7c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1a7e:	0e 94 29 15 	call	0x2a52	; 0x2a52 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1a82:	0e 94 81 15 	call	0x2b02	; 0x2b02 <TWI_getStatus>
    1a86:	88 30       	cpi	r24, 0x08	; 8
    1a88:	11 f0       	breq	.+4      	; 0x1a8e <EEPROM_readByte+0x26>
        return ERROR;
    1a8a:	1d 82       	std	Y+5, r1	; 0x05
    1a8c:	44 c0       	rjmp	.+136    	; 0x1b16 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1a8e:	89 81       	ldd	r24, Y+1	; 0x01
    1a90:	9a 81       	ldd	r25, Y+2	; 0x02
    1a92:	80 70       	andi	r24, 0x00	; 0
    1a94:	97 70       	andi	r25, 0x07	; 7
    1a96:	88 0f       	add	r24, r24
    1a98:	89 2f       	mov	r24, r25
    1a9a:	88 1f       	adc	r24, r24
    1a9c:	99 0b       	sbc	r25, r25
    1a9e:	91 95       	neg	r25
    1aa0:	80 6a       	ori	r24, 0xA0	; 160
    1aa2:	0e 94 44 15 	call	0x2a88	; 0x2a88 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1aa6:	0e 94 81 15 	call	0x2b02	; 0x2b02 <TWI_getStatus>
    1aaa:	88 31       	cpi	r24, 0x18	; 24
    1aac:	11 f0       	breq	.+4      	; 0x1ab2 <EEPROM_readByte+0x4a>
        return ERROR;
    1aae:	1d 82       	std	Y+5, r1	; 0x05
    1ab0:	32 c0       	rjmp	.+100    	; 0x1b16 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	0e 94 44 15 	call	0x2a88	; 0x2a88 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1ab8:	0e 94 81 15 	call	0x2b02	; 0x2b02 <TWI_getStatus>
    1abc:	88 32       	cpi	r24, 0x28	; 40
    1abe:	11 f0       	breq	.+4      	; 0x1ac4 <EEPROM_readByte+0x5c>
        return ERROR;
    1ac0:	1d 82       	std	Y+5, r1	; 0x05
    1ac2:	29 c0       	rjmp	.+82     	; 0x1b16 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1ac4:	0e 94 29 15 	call	0x2a52	; 0x2a52 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1ac8:	0e 94 81 15 	call	0x2b02	; 0x2b02 <TWI_getStatus>
    1acc:	80 31       	cpi	r24, 0x10	; 16
    1ace:	11 f0       	breq	.+4      	; 0x1ad4 <EEPROM_readByte+0x6c>
        return ERROR;
    1ad0:	1d 82       	std	Y+5, r1	; 0x05
    1ad2:	21 c0       	rjmp	.+66     	; 0x1b16 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1ad4:	89 81       	ldd	r24, Y+1	; 0x01
    1ad6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad8:	80 70       	andi	r24, 0x00	; 0
    1ada:	97 70       	andi	r25, 0x07	; 7
    1adc:	88 0f       	add	r24, r24
    1ade:	89 2f       	mov	r24, r25
    1ae0:	88 1f       	adc	r24, r24
    1ae2:	99 0b       	sbc	r25, r25
    1ae4:	91 95       	neg	r25
    1ae6:	81 6a       	ori	r24, 0xA1	; 161
    1ae8:	0e 94 44 15 	call	0x2a88	; 0x2a88 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1aec:	0e 94 81 15 	call	0x2b02	; 0x2b02 <TWI_getStatus>
    1af0:	80 34       	cpi	r24, 0x40	; 64
    1af2:	11 f0       	breq	.+4      	; 0x1af8 <EEPROM_readByte+0x90>
        return ERROR;
    1af4:	1d 82       	std	Y+5, r1	; 0x05
    1af6:	0f c0       	rjmp	.+30     	; 0x1b16 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1af8:	0e 94 6e 15 	call	0x2adc	; 0x2adc <TWI_readByteWithNACK>
    1afc:	eb 81       	ldd	r30, Y+3	; 0x03
    1afe:	fc 81       	ldd	r31, Y+4	; 0x04
    1b00:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1b02:	0e 94 81 15 	call	0x2b02	; 0x2b02 <TWI_getStatus>
    1b06:	88 35       	cpi	r24, 0x58	; 88
    1b08:	11 f0       	breq	.+4      	; 0x1b0e <EEPROM_readByte+0xa6>
        return ERROR;
    1b0a:	1d 82       	std	Y+5, r1	; 0x05
    1b0c:	04 c0       	rjmp	.+8      	; 0x1b16 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1b0e:	0e 94 39 15 	call	0x2a72	; 0x2a72 <TWI_stop>

    return SUCCESS;
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	8d 83       	std	Y+5, r24	; 0x05
    1b16:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1b18:	0f 90       	pop	r0
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	cf 91       	pop	r28
    1b24:	df 91       	pop	r29
    1b26:	08 95       	ret

00001b28 <GPIO_setupPinDirection>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num , uint8 pin_num , GPIO_PinDirectionType direction){
    1b28:	df 93       	push	r29
    1b2a:	cf 93       	push	r28
    1b2c:	00 d0       	rcall	.+0      	; 0x1b2e <GPIO_setupPinDirection+0x6>
    1b2e:	00 d0       	rcall	.+0      	; 0x1b30 <GPIO_setupPinDirection+0x8>
    1b30:	0f 92       	push	r0
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
    1b36:	89 83       	std	Y+1, r24	; 0x01
    1b38:	6a 83       	std	Y+2, r22	; 0x02
    1b3a:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num>=NUM_OF_PORTS) || (pin_num>=NUM_OF_PINS))
    1b3c:	89 81       	ldd	r24, Y+1	; 0x01
    1b3e:	84 30       	cpi	r24, 0x04	; 4
    1b40:	08 f0       	brcs	.+2      	; 0x1b44 <GPIO_setupPinDirection+0x1c>
    1b42:	d5 c0       	rjmp	.+426    	; 0x1cee <GPIO_setupPinDirection+0x1c6>
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
    1b46:	88 30       	cpi	r24, 0x08	; 8
    1b48:	08 f0       	brcs	.+2      	; 0x1b4c <GPIO_setupPinDirection+0x24>
    1b4a:	d1 c0       	rjmp	.+418    	; 0x1cee <GPIO_setupPinDirection+0x1c6>
	{

	}
	else
	{
	switch(port_num){
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
    1b4e:	28 2f       	mov	r18, r24
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	3d 83       	std	Y+5, r19	; 0x05
    1b54:	2c 83       	std	Y+4, r18	; 0x04
    1b56:	8c 81       	ldd	r24, Y+4	; 0x04
    1b58:	9d 81       	ldd	r25, Y+5	; 0x05
    1b5a:	81 30       	cpi	r24, 0x01	; 1
    1b5c:	91 05       	cpc	r25, r1
    1b5e:	09 f4       	brne	.+2      	; 0x1b62 <GPIO_setupPinDirection+0x3a>
    1b60:	43 c0       	rjmp	.+134    	; 0x1be8 <GPIO_setupPinDirection+0xc0>
    1b62:	2c 81       	ldd	r18, Y+4	; 0x04
    1b64:	3d 81       	ldd	r19, Y+5	; 0x05
    1b66:	22 30       	cpi	r18, 0x02	; 2
    1b68:	31 05       	cpc	r19, r1
    1b6a:	2c f4       	brge	.+10     	; 0x1b76 <GPIO_setupPinDirection+0x4e>
    1b6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b70:	00 97       	sbiw	r24, 0x00	; 0
    1b72:	71 f0       	breq	.+28     	; 0x1b90 <GPIO_setupPinDirection+0x68>
    1b74:	bc c0       	rjmp	.+376    	; 0x1cee <GPIO_setupPinDirection+0x1c6>
    1b76:	2c 81       	ldd	r18, Y+4	; 0x04
    1b78:	3d 81       	ldd	r19, Y+5	; 0x05
    1b7a:	22 30       	cpi	r18, 0x02	; 2
    1b7c:	31 05       	cpc	r19, r1
    1b7e:	09 f4       	brne	.+2      	; 0x1b82 <GPIO_setupPinDirection+0x5a>
    1b80:	5f c0       	rjmp	.+190    	; 0x1c40 <GPIO_setupPinDirection+0x118>
    1b82:	8c 81       	ldd	r24, Y+4	; 0x04
    1b84:	9d 81       	ldd	r25, Y+5	; 0x05
    1b86:	83 30       	cpi	r24, 0x03	; 3
    1b88:	91 05       	cpc	r25, r1
    1b8a:	09 f4       	brne	.+2      	; 0x1b8e <GPIO_setupPinDirection+0x66>
    1b8c:	85 c0       	rjmp	.+266    	; 0x1c98 <GPIO_setupPinDirection+0x170>
    1b8e:	af c0       	rjmp	.+350    	; 0x1cee <GPIO_setupPinDirection+0x1c6>

	case PORTA_ID:
		if(direction==PIN_OUTPUT)
    1b90:	8b 81       	ldd	r24, Y+3	; 0x03
    1b92:	81 30       	cpi	r24, 0x01	; 1
    1b94:	a1 f4       	brne	.+40     	; 0x1bbe <GPIO_setupPinDirection+0x96>
		{
			SET_BIT(DIRECTION_REGA,pin_num);
    1b96:	aa e3       	ldi	r26, 0x3A	; 58
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	ea e3       	ldi	r30, 0x3A	; 58
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	48 2f       	mov	r20, r24
    1ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba4:	28 2f       	mov	r18, r24
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	02 2e       	mov	r0, r18
    1bae:	02 c0       	rjmp	.+4      	; 0x1bb4 <GPIO_setupPinDirection+0x8c>
    1bb0:	88 0f       	add	r24, r24
    1bb2:	99 1f       	adc	r25, r25
    1bb4:	0a 94       	dec	r0
    1bb6:	e2 f7       	brpl	.-8      	; 0x1bb0 <GPIO_setupPinDirection+0x88>
    1bb8:	84 2b       	or	r24, r20
    1bba:	8c 93       	st	X, r24
    1bbc:	98 c0       	rjmp	.+304    	; 0x1cee <GPIO_setupPinDirection+0x1c6>
		}
		else
		{
			CLEAR_BIT(DIRECTION_REGA,pin_num);
    1bbe:	aa e3       	ldi	r26, 0x3A	; 58
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	ea e3       	ldi	r30, 0x3A	; 58
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	48 2f       	mov	r20, r24
    1bca:	8a 81       	ldd	r24, Y+2	; 0x02
    1bcc:	28 2f       	mov	r18, r24
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	02 2e       	mov	r0, r18
    1bd6:	02 c0       	rjmp	.+4      	; 0x1bdc <GPIO_setupPinDirection+0xb4>
    1bd8:	88 0f       	add	r24, r24
    1bda:	99 1f       	adc	r25, r25
    1bdc:	0a 94       	dec	r0
    1bde:	e2 f7       	brpl	.-8      	; 0x1bd8 <GPIO_setupPinDirection+0xb0>
    1be0:	80 95       	com	r24
    1be2:	84 23       	and	r24, r20
    1be4:	8c 93       	st	X, r24
    1be6:	83 c0       	rjmp	.+262    	; 0x1cee <GPIO_setupPinDirection+0x1c6>
		}
		break;
	case PORTB_ID:
		if(direction==PIN_OUTPUT)
    1be8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bea:	81 30       	cpi	r24, 0x01	; 1
    1bec:	a1 f4       	brne	.+40     	; 0x1c16 <GPIO_setupPinDirection+0xee>
		{
			SET_BIT(DIRECTION_REGB,pin_num);
    1bee:	a7 e3       	ldi	r26, 0x37	; 55
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	e7 e3       	ldi	r30, 0x37	; 55
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	48 2f       	mov	r20, r24
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	28 2f       	mov	r18, r24
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	02 2e       	mov	r0, r18
    1c06:	02 c0       	rjmp	.+4      	; 0x1c0c <GPIO_setupPinDirection+0xe4>
    1c08:	88 0f       	add	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	0a 94       	dec	r0
    1c0e:	e2 f7       	brpl	.-8      	; 0x1c08 <GPIO_setupPinDirection+0xe0>
    1c10:	84 2b       	or	r24, r20
    1c12:	8c 93       	st	X, r24
    1c14:	6c c0       	rjmp	.+216    	; 0x1cee <GPIO_setupPinDirection+0x1c6>
		}
		else
		{
			CLEAR_BIT(DIRECTION_REGB,pin_num);
    1c16:	a7 e3       	ldi	r26, 0x37	; 55
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	e7 e3       	ldi	r30, 0x37	; 55
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	48 2f       	mov	r20, r24
    1c22:	8a 81       	ldd	r24, Y+2	; 0x02
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	02 2e       	mov	r0, r18
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <GPIO_setupPinDirection+0x10c>
    1c30:	88 0f       	add	r24, r24
    1c32:	99 1f       	adc	r25, r25
    1c34:	0a 94       	dec	r0
    1c36:	e2 f7       	brpl	.-8      	; 0x1c30 <GPIO_setupPinDirection+0x108>
    1c38:	80 95       	com	r24
    1c3a:	84 23       	and	r24, r20
    1c3c:	8c 93       	st	X, r24
    1c3e:	57 c0       	rjmp	.+174    	; 0x1cee <GPIO_setupPinDirection+0x1c6>
		}
		break;
	case PORTC_ID:
		if(direction==PIN_OUTPUT)
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	81 30       	cpi	r24, 0x01	; 1
    1c44:	a1 f4       	brne	.+40     	; 0x1c6e <GPIO_setupPinDirection+0x146>
		{
			SET_BIT(DIRECTION_REGC,pin_num);
    1c46:	a4 e3       	ldi	r26, 0x34	; 52
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	e4 e3       	ldi	r30, 0x34	; 52
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	48 2f       	mov	r20, r24
    1c52:	8a 81       	ldd	r24, Y+2	; 0x02
    1c54:	28 2f       	mov	r18, r24
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	02 2e       	mov	r0, r18
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <GPIO_setupPinDirection+0x13c>
    1c60:	88 0f       	add	r24, r24
    1c62:	99 1f       	adc	r25, r25
    1c64:	0a 94       	dec	r0
    1c66:	e2 f7       	brpl	.-8      	; 0x1c60 <GPIO_setupPinDirection+0x138>
    1c68:	84 2b       	or	r24, r20
    1c6a:	8c 93       	st	X, r24
    1c6c:	40 c0       	rjmp	.+128    	; 0x1cee <GPIO_setupPinDirection+0x1c6>
		}
		else
		{
			CLEAR_BIT(DIRECTION_REGC,pin_num);
    1c6e:	a4 e3       	ldi	r26, 0x34	; 52
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	e4 e3       	ldi	r30, 0x34	; 52
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	48 2f       	mov	r20, r24
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	28 2f       	mov	r18, r24
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	02 2e       	mov	r0, r18
    1c86:	02 c0       	rjmp	.+4      	; 0x1c8c <GPIO_setupPinDirection+0x164>
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	0a 94       	dec	r0
    1c8e:	e2 f7       	brpl	.-8      	; 0x1c88 <GPIO_setupPinDirection+0x160>
    1c90:	80 95       	com	r24
    1c92:	84 23       	and	r24, r20
    1c94:	8c 93       	st	X, r24
    1c96:	2b c0       	rjmp	.+86     	; 0x1cee <GPIO_setupPinDirection+0x1c6>
		}
		break;
	case PORTD_ID:
		if(direction==PIN_OUTPUT)
    1c98:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9a:	81 30       	cpi	r24, 0x01	; 1
    1c9c:	a1 f4       	brne	.+40     	; 0x1cc6 <GPIO_setupPinDirection+0x19e>
		{
			SET_BIT(DIRECTION_REGD,pin_num);
    1c9e:	a1 e3       	ldi	r26, 0x31	; 49
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	e1 e3       	ldi	r30, 0x31	; 49
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	48 2f       	mov	r20, r24
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	28 2f       	mov	r18, r24
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	02 2e       	mov	r0, r18
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <GPIO_setupPinDirection+0x194>
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	0a 94       	dec	r0
    1cbe:	e2 f7       	brpl	.-8      	; 0x1cb8 <GPIO_setupPinDirection+0x190>
    1cc0:	84 2b       	or	r24, r20
    1cc2:	8c 93       	st	X, r24
    1cc4:	14 c0       	rjmp	.+40     	; 0x1cee <GPIO_setupPinDirection+0x1c6>
		}
		else
		{
			CLEAR_BIT(DIRECTION_REGD,pin_num);
    1cc6:	a1 e3       	ldi	r26, 0x31	; 49
    1cc8:	b0 e0       	ldi	r27, 0x00	; 0
    1cca:	e1 e3       	ldi	r30, 0x31	; 49
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	48 2f       	mov	r20, r24
    1cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd4:	28 2f       	mov	r18, r24
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	02 2e       	mov	r0, r18
    1cde:	02 c0       	rjmp	.+4      	; 0x1ce4 <GPIO_setupPinDirection+0x1bc>
    1ce0:	88 0f       	add	r24, r24
    1ce2:	99 1f       	adc	r25, r25
    1ce4:	0a 94       	dec	r0
    1ce6:	e2 f7       	brpl	.-8      	; 0x1ce0 <GPIO_setupPinDirection+0x1b8>
    1ce8:	80 95       	com	r24
    1cea:	84 23       	and	r24, r20
    1cec:	8c 93       	st	X, r24
		}
		break;
	}
	}
}
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	cf 91       	pop	r28
    1cfa:	df 91       	pop	r29
    1cfc:	08 95       	ret

00001cfe <GPIO_writePin>:
 * Description :
 * write the required pin 0/1.
 * If the input port number or pin number or value are not correct, The function will not handle the request.
 * If the pinDirection is input this function will enable/disable the internal pull-up resistor of AVR.
 */
void GPIO_writePin(uint8 port_num,uint8 pin_num,uint8 value){
    1cfe:	df 93       	push	r29
    1d00:	cf 93       	push	r28
    1d02:	00 d0       	rcall	.+0      	; 0x1d04 <GPIO_writePin+0x6>
    1d04:	00 d0       	rcall	.+0      	; 0x1d06 <GPIO_writePin+0x8>
    1d06:	0f 92       	push	r0
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
    1d0c:	89 83       	std	Y+1, r24	; 0x01
    1d0e:	6a 83       	std	Y+2, r22	; 0x02
    1d10:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num>=NUM_OF_PORTS) || (pin_num>=NUM_OF_PINS) || (value>1))
    1d12:	89 81       	ldd	r24, Y+1	; 0x01
    1d14:	84 30       	cpi	r24, 0x04	; 4
    1d16:	08 f0       	brcs	.+2      	; 0x1d1a <GPIO_writePin+0x1c>
    1d18:	d9 c0       	rjmp	.+434    	; 0x1ecc <GPIO_writePin+0x1ce>
    1d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1c:	88 30       	cpi	r24, 0x08	; 8
    1d1e:	08 f0       	brcs	.+2      	; 0x1d22 <GPIO_writePin+0x24>
    1d20:	d5 c0       	rjmp	.+426    	; 0x1ecc <GPIO_writePin+0x1ce>
    1d22:	8b 81       	ldd	r24, Y+3	; 0x03
    1d24:	82 30       	cpi	r24, 0x02	; 2
    1d26:	08 f0       	brcs	.+2      	; 0x1d2a <GPIO_writePin+0x2c>
    1d28:	d1 c0       	rjmp	.+418    	; 0x1ecc <GPIO_writePin+0x1ce>
	{

	}
	else
	{
	switch(port_num){
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	3d 83       	std	Y+5, r19	; 0x05
    1d32:	2c 83       	std	Y+4, r18	; 0x04
    1d34:	8c 81       	ldd	r24, Y+4	; 0x04
    1d36:	9d 81       	ldd	r25, Y+5	; 0x05
    1d38:	81 30       	cpi	r24, 0x01	; 1
    1d3a:	91 05       	cpc	r25, r1
    1d3c:	09 f4       	brne	.+2      	; 0x1d40 <GPIO_writePin+0x42>
    1d3e:	43 c0       	rjmp	.+134    	; 0x1dc6 <GPIO_writePin+0xc8>
    1d40:	2c 81       	ldd	r18, Y+4	; 0x04
    1d42:	3d 81       	ldd	r19, Y+5	; 0x05
    1d44:	22 30       	cpi	r18, 0x02	; 2
    1d46:	31 05       	cpc	r19, r1
    1d48:	2c f4       	brge	.+10     	; 0x1d54 <GPIO_writePin+0x56>
    1d4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d4e:	00 97       	sbiw	r24, 0x00	; 0
    1d50:	71 f0       	breq	.+28     	; 0x1d6e <GPIO_writePin+0x70>
    1d52:	bc c0       	rjmp	.+376    	; 0x1ecc <GPIO_writePin+0x1ce>
    1d54:	2c 81       	ldd	r18, Y+4	; 0x04
    1d56:	3d 81       	ldd	r19, Y+5	; 0x05
    1d58:	22 30       	cpi	r18, 0x02	; 2
    1d5a:	31 05       	cpc	r19, r1
    1d5c:	09 f4       	brne	.+2      	; 0x1d60 <GPIO_writePin+0x62>
    1d5e:	5f c0       	rjmp	.+190    	; 0x1e1e <GPIO_writePin+0x120>
    1d60:	8c 81       	ldd	r24, Y+4	; 0x04
    1d62:	9d 81       	ldd	r25, Y+5	; 0x05
    1d64:	83 30       	cpi	r24, 0x03	; 3
    1d66:	91 05       	cpc	r25, r1
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <GPIO_writePin+0x6e>
    1d6a:	85 c0       	rjmp	.+266    	; 0x1e76 <GPIO_writePin+0x178>
    1d6c:	af c0       	rjmp	.+350    	; 0x1ecc <GPIO_writePin+0x1ce>

	case PORTA_ID:
		if(value==LOGIC_HIGH)
    1d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d70:	81 30       	cpi	r24, 0x01	; 1
    1d72:	a1 f4       	brne	.+40     	; 0x1d9c <GPIO_writePin+0x9e>
		{
			SET_BIT(OUTPUT_REGA,pin_num);
    1d74:	ab e3       	ldi	r26, 0x3B	; 59
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	eb e3       	ldi	r30, 0x3B	; 59
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	48 2f       	mov	r20, r24
    1d80:	8a 81       	ldd	r24, Y+2	; 0x02
    1d82:	28 2f       	mov	r18, r24
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	02 2e       	mov	r0, r18
    1d8c:	02 c0       	rjmp	.+4      	; 0x1d92 <GPIO_writePin+0x94>
    1d8e:	88 0f       	add	r24, r24
    1d90:	99 1f       	adc	r25, r25
    1d92:	0a 94       	dec	r0
    1d94:	e2 f7       	brpl	.-8      	; 0x1d8e <GPIO_writePin+0x90>
    1d96:	84 2b       	or	r24, r20
    1d98:	8c 93       	st	X, r24
    1d9a:	98 c0       	rjmp	.+304    	; 0x1ecc <GPIO_writePin+0x1ce>
		}
		else
		{
			CLEAR_BIT(OUTPUT_REGA,pin_num);
    1d9c:	ab e3       	ldi	r26, 0x3B	; 59
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	eb e3       	ldi	r30, 0x3B	; 59
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	48 2f       	mov	r20, r24
    1da8:	8a 81       	ldd	r24, Y+2	; 0x02
    1daa:	28 2f       	mov	r18, r24
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	02 2e       	mov	r0, r18
    1db4:	02 c0       	rjmp	.+4      	; 0x1dba <GPIO_writePin+0xbc>
    1db6:	88 0f       	add	r24, r24
    1db8:	99 1f       	adc	r25, r25
    1dba:	0a 94       	dec	r0
    1dbc:	e2 f7       	brpl	.-8      	; 0x1db6 <GPIO_writePin+0xb8>
    1dbe:	80 95       	com	r24
    1dc0:	84 23       	and	r24, r20
    1dc2:	8c 93       	st	X, r24
    1dc4:	83 c0       	rjmp	.+262    	; 0x1ecc <GPIO_writePin+0x1ce>
		}
		break;
	case PORTB_ID:
		if(value==LOGIC_HIGH)
    1dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc8:	81 30       	cpi	r24, 0x01	; 1
    1dca:	a1 f4       	brne	.+40     	; 0x1df4 <GPIO_writePin+0xf6>
		{
			SET_BIT(OUTPUT_REGB,pin_num);
    1dcc:	a8 e3       	ldi	r26, 0x38	; 56
    1dce:	b0 e0       	ldi	r27, 0x00	; 0
    1dd0:	e8 e3       	ldi	r30, 0x38	; 56
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	80 81       	ld	r24, Z
    1dd6:	48 2f       	mov	r20, r24
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	28 2f       	mov	r18, r24
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	02 2e       	mov	r0, r18
    1de4:	02 c0       	rjmp	.+4      	; 0x1dea <GPIO_writePin+0xec>
    1de6:	88 0f       	add	r24, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	0a 94       	dec	r0
    1dec:	e2 f7       	brpl	.-8      	; 0x1de6 <GPIO_writePin+0xe8>
    1dee:	84 2b       	or	r24, r20
    1df0:	8c 93       	st	X, r24
    1df2:	6c c0       	rjmp	.+216    	; 0x1ecc <GPIO_writePin+0x1ce>
		}
		else
		{
			CLEAR_BIT(OUTPUT_REGB,pin_num);
    1df4:	a8 e3       	ldi	r26, 0x38	; 56
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	e8 e3       	ldi	r30, 0x38	; 56
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	48 2f       	mov	r20, r24
    1e00:	8a 81       	ldd	r24, Y+2	; 0x02
    1e02:	28 2f       	mov	r18, r24
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	02 2e       	mov	r0, r18
    1e0c:	02 c0       	rjmp	.+4      	; 0x1e12 <GPIO_writePin+0x114>
    1e0e:	88 0f       	add	r24, r24
    1e10:	99 1f       	adc	r25, r25
    1e12:	0a 94       	dec	r0
    1e14:	e2 f7       	brpl	.-8      	; 0x1e0e <GPIO_writePin+0x110>
    1e16:	80 95       	com	r24
    1e18:	84 23       	and	r24, r20
    1e1a:	8c 93       	st	X, r24
    1e1c:	57 c0       	rjmp	.+174    	; 0x1ecc <GPIO_writePin+0x1ce>
		}
		break;
	case PORTC_ID:
		if(value==LOGIC_HIGH)
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	81 30       	cpi	r24, 0x01	; 1
    1e22:	a1 f4       	brne	.+40     	; 0x1e4c <GPIO_writePin+0x14e>
		{
			SET_BIT(OUTPUT_REGC,pin_num);
    1e24:	a5 e3       	ldi	r26, 0x35	; 53
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	e5 e3       	ldi	r30, 0x35	; 53
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	48 2f       	mov	r20, r24
    1e30:	8a 81       	ldd	r24, Y+2	; 0x02
    1e32:	28 2f       	mov	r18, r24
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	02 2e       	mov	r0, r18
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <GPIO_writePin+0x144>
    1e3e:	88 0f       	add	r24, r24
    1e40:	99 1f       	adc	r25, r25
    1e42:	0a 94       	dec	r0
    1e44:	e2 f7       	brpl	.-8      	; 0x1e3e <GPIO_writePin+0x140>
    1e46:	84 2b       	or	r24, r20
    1e48:	8c 93       	st	X, r24
    1e4a:	40 c0       	rjmp	.+128    	; 0x1ecc <GPIO_writePin+0x1ce>
		}
		else
		{
			CLEAR_BIT(OUTPUT_REGC,pin_num);
    1e4c:	a5 e3       	ldi	r26, 0x35	; 53
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	e5 e3       	ldi	r30, 0x35	; 53
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	48 2f       	mov	r20, r24
    1e58:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5a:	28 2f       	mov	r18, r24
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	02 2e       	mov	r0, r18
    1e64:	02 c0       	rjmp	.+4      	; 0x1e6a <GPIO_writePin+0x16c>
    1e66:	88 0f       	add	r24, r24
    1e68:	99 1f       	adc	r25, r25
    1e6a:	0a 94       	dec	r0
    1e6c:	e2 f7       	brpl	.-8      	; 0x1e66 <GPIO_writePin+0x168>
    1e6e:	80 95       	com	r24
    1e70:	84 23       	and	r24, r20
    1e72:	8c 93       	st	X, r24
    1e74:	2b c0       	rjmp	.+86     	; 0x1ecc <GPIO_writePin+0x1ce>
		}
		break;
	case PORTD_ID:
		if(value==LOGIC_HIGH)
    1e76:	8b 81       	ldd	r24, Y+3	; 0x03
    1e78:	81 30       	cpi	r24, 0x01	; 1
    1e7a:	a1 f4       	brne	.+40     	; 0x1ea4 <GPIO_writePin+0x1a6>
		{
			SET_BIT(OUTPUT_REGD,pin_num);
    1e7c:	a2 e3       	ldi	r26, 0x32	; 50
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	e2 e3       	ldi	r30, 0x32	; 50
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	48 2f       	mov	r20, r24
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	28 2f       	mov	r18, r24
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	02 2e       	mov	r0, r18
    1e94:	02 c0       	rjmp	.+4      	; 0x1e9a <GPIO_writePin+0x19c>
    1e96:	88 0f       	add	r24, r24
    1e98:	99 1f       	adc	r25, r25
    1e9a:	0a 94       	dec	r0
    1e9c:	e2 f7       	brpl	.-8      	; 0x1e96 <GPIO_writePin+0x198>
    1e9e:	84 2b       	or	r24, r20
    1ea0:	8c 93       	st	X, r24
    1ea2:	14 c0       	rjmp	.+40     	; 0x1ecc <GPIO_writePin+0x1ce>
		}
		else
		{
			CLEAR_BIT(OUTPUT_REGD,pin_num);
    1ea4:	a2 e3       	ldi	r26, 0x32	; 50
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	e2 e3       	ldi	r30, 0x32	; 50
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	48 2f       	mov	r20, r24
    1eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb2:	28 2f       	mov	r18, r24
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	02 2e       	mov	r0, r18
    1ebc:	02 c0       	rjmp	.+4      	; 0x1ec2 <GPIO_writePin+0x1c4>
    1ebe:	88 0f       	add	r24, r24
    1ec0:	99 1f       	adc	r25, r25
    1ec2:	0a 94       	dec	r0
    1ec4:	e2 f7       	brpl	.-8      	; 0x1ebe <GPIO_writePin+0x1c0>
    1ec6:	80 95       	com	r24
    1ec8:	84 23       	and	r24, r20
    1eca:	8c 93       	st	X, r24
		}
		break;
	}
	}
}
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	cf 91       	pop	r28
    1ed8:	df 91       	pop	r29
    1eda:	08 95       	ret

00001edc <GPIO_readPin>:
/*
 * Description :
 * Read the required pin 0/1 and returns it.
 * If the input port number or pin number or value are not correct, The function will not handle the request and returns logical low value.
 */
uint8 GPIO_readPin(uint8 port_num,uint8 pin_num){
    1edc:	df 93       	push	r29
    1ede:	cf 93       	push	r28
    1ee0:	00 d0       	rcall	.+0      	; 0x1ee2 <GPIO_readPin+0x6>
    1ee2:	00 d0       	rcall	.+0      	; 0x1ee4 <GPIO_readPin+0x8>
    1ee4:	0f 92       	push	r0
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62
    1eea:	8a 83       	std	Y+2, r24	; 0x02
    1eec:	6b 83       	std	Y+3, r22	; 0x03

	uint8 readValue=LOGIC_LOW;
    1eee:	19 82       	std	Y+1, r1	; 0x01

	if((port_num>=NUM_OF_PORTS) || (pin_num>=NUM_OF_PINS))
    1ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef2:	84 30       	cpi	r24, 0x04	; 4
    1ef4:	08 f0       	brcs	.+2      	; 0x1ef8 <GPIO_readPin+0x1c>
    1ef6:	84 c0       	rjmp	.+264    	; 0x2000 <GPIO_readPin+0x124>
    1ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    1efa:	88 30       	cpi	r24, 0x08	; 8
    1efc:	08 f0       	brcs	.+2      	; 0x1f00 <GPIO_readPin+0x24>
    1efe:	80 c0       	rjmp	.+256    	; 0x2000 <GPIO_readPin+0x124>
	{

	}
	else
	{
	switch(port_num){
    1f00:	8a 81       	ldd	r24, Y+2	; 0x02
    1f02:	28 2f       	mov	r18, r24
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	3d 83       	std	Y+5, r19	; 0x05
    1f08:	2c 83       	std	Y+4, r18	; 0x04
    1f0a:	4c 81       	ldd	r20, Y+4	; 0x04
    1f0c:	5d 81       	ldd	r21, Y+5	; 0x05
    1f0e:	41 30       	cpi	r20, 0x01	; 1
    1f10:	51 05       	cpc	r21, r1
    1f12:	79 f1       	breq	.+94     	; 0x1f72 <GPIO_readPin+0x96>
    1f14:	8c 81       	ldd	r24, Y+4	; 0x04
    1f16:	9d 81       	ldd	r25, Y+5	; 0x05
    1f18:	82 30       	cpi	r24, 0x02	; 2
    1f1a:	91 05       	cpc	r25, r1
    1f1c:	34 f4       	brge	.+12     	; 0x1f2a <GPIO_readPin+0x4e>
    1f1e:	2c 81       	ldd	r18, Y+4	; 0x04
    1f20:	3d 81       	ldd	r19, Y+5	; 0x05
    1f22:	21 15       	cp	r18, r1
    1f24:	31 05       	cpc	r19, r1
    1f26:	69 f0       	breq	.+26     	; 0x1f42 <GPIO_readPin+0x66>
    1f28:	6b c0       	rjmp	.+214    	; 0x2000 <GPIO_readPin+0x124>
    1f2a:	4c 81       	ldd	r20, Y+4	; 0x04
    1f2c:	5d 81       	ldd	r21, Y+5	; 0x05
    1f2e:	42 30       	cpi	r20, 0x02	; 2
    1f30:	51 05       	cpc	r21, r1
    1f32:	b9 f1       	breq	.+110    	; 0x1fa2 <GPIO_readPin+0xc6>
    1f34:	8c 81       	ldd	r24, Y+4	; 0x04
    1f36:	9d 81       	ldd	r25, Y+5	; 0x05
    1f38:	83 30       	cpi	r24, 0x03	; 3
    1f3a:	91 05       	cpc	r25, r1
    1f3c:	09 f4       	brne	.+2      	; 0x1f40 <GPIO_readPin+0x64>
    1f3e:	49 c0       	rjmp	.+146    	; 0x1fd2 <GPIO_readPin+0xf6>
    1f40:	5f c0       	rjmp	.+190    	; 0x2000 <GPIO_readPin+0x124>

	case PORTA_ID:
		if(BIT_IS_SET(INPUT_REGA,pin_num))
    1f42:	e9 e3       	ldi	r30, 0x39	; 57
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	28 2f       	mov	r18, r24
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4e:	88 2f       	mov	r24, r24
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	a9 01       	movw	r20, r18
    1f54:	02 c0       	rjmp	.+4      	; 0x1f5a <GPIO_readPin+0x7e>
    1f56:	55 95       	asr	r21
    1f58:	47 95       	ror	r20
    1f5a:	8a 95       	dec	r24
    1f5c:	e2 f7       	brpl	.-8      	; 0x1f56 <GPIO_readPin+0x7a>
    1f5e:	ca 01       	movw	r24, r20
    1f60:	81 70       	andi	r24, 0x01	; 1
    1f62:	90 70       	andi	r25, 0x00	; 0
    1f64:	88 23       	and	r24, r24
    1f66:	19 f0       	breq	.+6      	; 0x1f6e <GPIO_readPin+0x92>
		{
			readValue=LOGIC_HIGH;
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	89 83       	std	Y+1, r24	; 0x01
    1f6c:	49 c0       	rjmp	.+146    	; 0x2000 <GPIO_readPin+0x124>
		}
		else
		{
			readValue=LOGIC_LOW;
    1f6e:	19 82       	std	Y+1, r1	; 0x01
    1f70:	47 c0       	rjmp	.+142    	; 0x2000 <GPIO_readPin+0x124>
		}
		break;
	case PORTB_ID:
		if(BIT_IS_SET(INPUT_REGB,pin_num))
    1f72:	e6 e3       	ldi	r30, 0x36	; 54
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 81       	ld	r24, Z
    1f78:	28 2f       	mov	r18, r24
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7e:	88 2f       	mov	r24, r24
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	a9 01       	movw	r20, r18
    1f84:	02 c0       	rjmp	.+4      	; 0x1f8a <GPIO_readPin+0xae>
    1f86:	55 95       	asr	r21
    1f88:	47 95       	ror	r20
    1f8a:	8a 95       	dec	r24
    1f8c:	e2 f7       	brpl	.-8      	; 0x1f86 <GPIO_readPin+0xaa>
    1f8e:	ca 01       	movw	r24, r20
    1f90:	81 70       	andi	r24, 0x01	; 1
    1f92:	90 70       	andi	r25, 0x00	; 0
    1f94:	88 23       	and	r24, r24
    1f96:	19 f0       	breq	.+6      	; 0x1f9e <GPIO_readPin+0xc2>
		{
			readValue=LOGIC_HIGH;
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	89 83       	std	Y+1, r24	; 0x01
    1f9c:	31 c0       	rjmp	.+98     	; 0x2000 <GPIO_readPin+0x124>
		}
		else
		{
			readValue=LOGIC_LOW;
    1f9e:	19 82       	std	Y+1, r1	; 0x01
    1fa0:	2f c0       	rjmp	.+94     	; 0x2000 <GPIO_readPin+0x124>
		}
		break;
	case PORTC_ID:
		if(BIT_IS_SET(INPUT_REGC,pin_num))
    1fa2:	e3 e3       	ldi	r30, 0x33	; 51
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	28 2f       	mov	r18, r24
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	8b 81       	ldd	r24, Y+3	; 0x03
    1fae:	88 2f       	mov	r24, r24
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	a9 01       	movw	r20, r18
    1fb4:	02 c0       	rjmp	.+4      	; 0x1fba <GPIO_readPin+0xde>
    1fb6:	55 95       	asr	r21
    1fb8:	47 95       	ror	r20
    1fba:	8a 95       	dec	r24
    1fbc:	e2 f7       	brpl	.-8      	; 0x1fb6 <GPIO_readPin+0xda>
    1fbe:	ca 01       	movw	r24, r20
    1fc0:	81 70       	andi	r24, 0x01	; 1
    1fc2:	90 70       	andi	r25, 0x00	; 0
    1fc4:	88 23       	and	r24, r24
    1fc6:	19 f0       	breq	.+6      	; 0x1fce <GPIO_readPin+0xf2>
		{
			readValue=LOGIC_HIGH;
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	89 83       	std	Y+1, r24	; 0x01
    1fcc:	19 c0       	rjmp	.+50     	; 0x2000 <GPIO_readPin+0x124>
		}
		else
		{
			readValue=LOGIC_LOW;
    1fce:	19 82       	std	Y+1, r1	; 0x01
    1fd0:	17 c0       	rjmp	.+46     	; 0x2000 <GPIO_readPin+0x124>
		}
		break;
	case PORTD_ID:
		if(BIT_IS_SET(INPUT_REGD,pin_num))
    1fd2:	e0 e3       	ldi	r30, 0x30	; 48
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	80 81       	ld	r24, Z
    1fd8:	28 2f       	mov	r18, r24
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fde:	88 2f       	mov	r24, r24
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	a9 01       	movw	r20, r18
    1fe4:	02 c0       	rjmp	.+4      	; 0x1fea <GPIO_readPin+0x10e>
    1fe6:	55 95       	asr	r21
    1fe8:	47 95       	ror	r20
    1fea:	8a 95       	dec	r24
    1fec:	e2 f7       	brpl	.-8      	; 0x1fe6 <GPIO_readPin+0x10a>
    1fee:	ca 01       	movw	r24, r20
    1ff0:	81 70       	andi	r24, 0x01	; 1
    1ff2:	90 70       	andi	r25, 0x00	; 0
    1ff4:	88 23       	and	r24, r24
    1ff6:	19 f0       	breq	.+6      	; 0x1ffe <GPIO_readPin+0x122>
		{
			readValue=LOGIC_HIGH;
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	89 83       	std	Y+1, r24	; 0x01
    1ffc:	01 c0       	rjmp	.+2      	; 0x2000 <GPIO_readPin+0x124>
		}
		else
		{
			readValue=LOGIC_LOW;
    1ffe:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
	}
	}
	return readValue;
    2000:	89 81       	ldd	r24, Y+1	; 0x01
}
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	0f 90       	pop	r0
    2008:	0f 90       	pop	r0
    200a:	0f 90       	pop	r0
    200c:	cf 91       	pop	r28
    200e:	df 91       	pop	r29
    2010:	08 95       	ret

00002012 <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num,GPIO_PortDirectionType direction){
    2012:	df 93       	push	r29
    2014:	cf 93       	push	r28
    2016:	00 d0       	rcall	.+0      	; 0x2018 <GPIO_setupPortDirection+0x6>
    2018:	00 d0       	rcall	.+0      	; 0x201a <GPIO_setupPortDirection+0x8>
    201a:	cd b7       	in	r28, 0x3d	; 61
    201c:	de b7       	in	r29, 0x3e	; 62
    201e:	89 83       	std	Y+1, r24	; 0x01
    2020:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num>=NUM_OF_PORTS))
    2022:	89 81       	ldd	r24, Y+1	; 0x01
    2024:	84 30       	cpi	r24, 0x04	; 4
    2026:	90 f5       	brcc	.+100    	; 0x208c <GPIO_setupPortDirection+0x7a>
	{

	}
	else
	{
	switch(port_num){
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	28 2f       	mov	r18, r24
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	3c 83       	std	Y+4, r19	; 0x04
    2030:	2b 83       	std	Y+3, r18	; 0x03
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	9c 81       	ldd	r25, Y+4	; 0x04
    2036:	81 30       	cpi	r24, 0x01	; 1
    2038:	91 05       	cpc	r25, r1
    203a:	d1 f0       	breq	.+52     	; 0x2070 <GPIO_setupPortDirection+0x5e>
    203c:	2b 81       	ldd	r18, Y+3	; 0x03
    203e:	3c 81       	ldd	r19, Y+4	; 0x04
    2040:	22 30       	cpi	r18, 0x02	; 2
    2042:	31 05       	cpc	r19, r1
    2044:	2c f4       	brge	.+10     	; 0x2050 <GPIO_setupPortDirection+0x3e>
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	9c 81       	ldd	r25, Y+4	; 0x04
    204a:	00 97       	sbiw	r24, 0x00	; 0
    204c:	61 f0       	breq	.+24     	; 0x2066 <GPIO_setupPortDirection+0x54>
    204e:	1e c0       	rjmp	.+60     	; 0x208c <GPIO_setupPortDirection+0x7a>
    2050:	2b 81       	ldd	r18, Y+3	; 0x03
    2052:	3c 81       	ldd	r19, Y+4	; 0x04
    2054:	22 30       	cpi	r18, 0x02	; 2
    2056:	31 05       	cpc	r19, r1
    2058:	81 f0       	breq	.+32     	; 0x207a <GPIO_setupPortDirection+0x68>
    205a:	8b 81       	ldd	r24, Y+3	; 0x03
    205c:	9c 81       	ldd	r25, Y+4	; 0x04
    205e:	83 30       	cpi	r24, 0x03	; 3
    2060:	91 05       	cpc	r25, r1
    2062:	81 f0       	breq	.+32     	; 0x2084 <GPIO_setupPortDirection+0x72>
    2064:	13 c0       	rjmp	.+38     	; 0x208c <GPIO_setupPortDirection+0x7a>

	case PORTA_ID:
		DIRECTION_REGA=direction;
    2066:	ea e3       	ldi	r30, 0x3A	; 58
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	80 83       	st	Z, r24
    206e:	0e c0       	rjmp	.+28     	; 0x208c <GPIO_setupPortDirection+0x7a>
		break;
	case PORTB_ID:
		DIRECTION_REGB=direction;
    2070:	e7 e3       	ldi	r30, 0x37	; 55
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	8a 81       	ldd	r24, Y+2	; 0x02
    2076:	80 83       	st	Z, r24
    2078:	09 c0       	rjmp	.+18     	; 0x208c <GPIO_setupPortDirection+0x7a>
		break;
	case PORTC_ID:
		DIRECTION_REGC=direction;
    207a:	e4 e3       	ldi	r30, 0x34	; 52
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	8a 81       	ldd	r24, Y+2	; 0x02
    2080:	80 83       	st	Z, r24
    2082:	04 c0       	rjmp	.+8      	; 0x208c <GPIO_setupPortDirection+0x7a>
		break;
	case PORTD_ID:
		DIRECTION_REGD=direction;
    2084:	e1 e3       	ldi	r30, 0x31	; 49
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	8a 81       	ldd	r24, Y+2	; 0x02
    208a:	80 83       	st	Z, r24
		break;
	}
	}
}
    208c:	0f 90       	pop	r0
    208e:	0f 90       	pop	r0
    2090:	0f 90       	pop	r0
    2092:	0f 90       	pop	r0
    2094:	cf 91       	pop	r28
    2096:	df 91       	pop	r29
    2098:	08 95       	ret

0000209a <GPIO_writePort>:
/*
 * Description :
 * Write all pins of the required port by a an entered value.
 * If the input port number or value is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num,uint8 value){
    209a:	df 93       	push	r29
    209c:	cf 93       	push	r28
    209e:	00 d0       	rcall	.+0      	; 0x20a0 <GPIO_writePort+0x6>
    20a0:	00 d0       	rcall	.+0      	; 0x20a2 <GPIO_writePort+0x8>
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
    20a6:	89 83       	std	Y+1, r24	; 0x01
    20a8:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num>=NUM_OF_PORTS) || (value>255))
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
    20ac:	84 30       	cpi	r24, 0x04	; 4
    20ae:	90 f5       	brcc	.+100    	; 0x2114 <GPIO_writePort+0x7a>
	{

	}
	else
	{
	switch(port_num){
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
    20b2:	28 2f       	mov	r18, r24
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	3c 83       	std	Y+4, r19	; 0x04
    20b8:	2b 83       	std	Y+3, r18	; 0x03
    20ba:	8b 81       	ldd	r24, Y+3	; 0x03
    20bc:	9c 81       	ldd	r25, Y+4	; 0x04
    20be:	81 30       	cpi	r24, 0x01	; 1
    20c0:	91 05       	cpc	r25, r1
    20c2:	d1 f0       	breq	.+52     	; 0x20f8 <GPIO_writePort+0x5e>
    20c4:	2b 81       	ldd	r18, Y+3	; 0x03
    20c6:	3c 81       	ldd	r19, Y+4	; 0x04
    20c8:	22 30       	cpi	r18, 0x02	; 2
    20ca:	31 05       	cpc	r19, r1
    20cc:	2c f4       	brge	.+10     	; 0x20d8 <GPIO_writePort+0x3e>
    20ce:	8b 81       	ldd	r24, Y+3	; 0x03
    20d0:	9c 81       	ldd	r25, Y+4	; 0x04
    20d2:	00 97       	sbiw	r24, 0x00	; 0
    20d4:	61 f0       	breq	.+24     	; 0x20ee <GPIO_writePort+0x54>
    20d6:	1e c0       	rjmp	.+60     	; 0x2114 <GPIO_writePort+0x7a>
    20d8:	2b 81       	ldd	r18, Y+3	; 0x03
    20da:	3c 81       	ldd	r19, Y+4	; 0x04
    20dc:	22 30       	cpi	r18, 0x02	; 2
    20de:	31 05       	cpc	r19, r1
    20e0:	81 f0       	breq	.+32     	; 0x2102 <GPIO_writePort+0x68>
    20e2:	8b 81       	ldd	r24, Y+3	; 0x03
    20e4:	9c 81       	ldd	r25, Y+4	; 0x04
    20e6:	83 30       	cpi	r24, 0x03	; 3
    20e8:	91 05       	cpc	r25, r1
    20ea:	81 f0       	breq	.+32     	; 0x210c <GPIO_writePort+0x72>
    20ec:	13 c0       	rjmp	.+38     	; 0x2114 <GPIO_writePort+0x7a>

	case PORTA_ID:
		OUTPUT_REGA=value;
    20ee:	eb e3       	ldi	r30, 0x3B	; 59
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	8a 81       	ldd	r24, Y+2	; 0x02
    20f4:	80 83       	st	Z, r24
    20f6:	0e c0       	rjmp	.+28     	; 0x2114 <GPIO_writePort+0x7a>
		break;
	case PORTB_ID:
		OUTPUT_REGB=value;
    20f8:	e8 e3       	ldi	r30, 0x38	; 56
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	80 83       	st	Z, r24
    2100:	09 c0       	rjmp	.+18     	; 0x2114 <GPIO_writePort+0x7a>
		break;
	case PORTC_ID:
		OUTPUT_REGC=value;
    2102:	e5 e3       	ldi	r30, 0x35	; 53
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	8a 81       	ldd	r24, Y+2	; 0x02
    2108:	80 83       	st	Z, r24
    210a:	04 c0       	rjmp	.+8      	; 0x2114 <GPIO_writePort+0x7a>
		break;
	case PORTD_ID:
		OUTPUT_REGD=value;
    210c:	e2 e3       	ldi	r30, 0x32	; 50
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	8a 81       	ldd	r24, Y+2	; 0x02
    2112:	80 83       	st	Z, r24
		break;
	}
	}
}
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	cf 91       	pop	r28
    211e:	df 91       	pop	r29
    2120:	08 95       	ret

00002122 <GPIO_readPort>:
/*
 * Description :
 * Read  the required port  value.
 * If the input port number is not correct, The function will not handle the request.
 */
uint8 GPIO_readPort(uint8 port_num){
    2122:	df 93       	push	r29
    2124:	cf 93       	push	r28
    2126:	00 d0       	rcall	.+0      	; 0x2128 <GPIO_readPort+0x6>
    2128:	00 d0       	rcall	.+0      	; 0x212a <GPIO_readPort+0x8>
    212a:	cd b7       	in	r28, 0x3d	; 61
    212c:	de b7       	in	r29, 0x3e	; 62
    212e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 readValue=0;
    2130:	19 82       	std	Y+1, r1	; 0x01
	if((port_num>=NUM_OF_PORTS))
    2132:	8a 81       	ldd	r24, Y+2	; 0x02
    2134:	84 30       	cpi	r24, 0x04	; 4
    2136:	90 f5       	brcc	.+100    	; 0x219c <GPIO_readPort+0x7a>
	{

	}
	else
	{
	switch(port_num){
    2138:	8a 81       	ldd	r24, Y+2	; 0x02
    213a:	28 2f       	mov	r18, r24
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	3c 83       	std	Y+4, r19	; 0x04
    2140:	2b 83       	std	Y+3, r18	; 0x03
    2142:	8b 81       	ldd	r24, Y+3	; 0x03
    2144:	9c 81       	ldd	r25, Y+4	; 0x04
    2146:	81 30       	cpi	r24, 0x01	; 1
    2148:	91 05       	cpc	r25, r1
    214a:	d1 f0       	breq	.+52     	; 0x2180 <GPIO_readPort+0x5e>
    214c:	2b 81       	ldd	r18, Y+3	; 0x03
    214e:	3c 81       	ldd	r19, Y+4	; 0x04
    2150:	22 30       	cpi	r18, 0x02	; 2
    2152:	31 05       	cpc	r19, r1
    2154:	2c f4       	brge	.+10     	; 0x2160 <GPIO_readPort+0x3e>
    2156:	8b 81       	ldd	r24, Y+3	; 0x03
    2158:	9c 81       	ldd	r25, Y+4	; 0x04
    215a:	00 97       	sbiw	r24, 0x00	; 0
    215c:	61 f0       	breq	.+24     	; 0x2176 <GPIO_readPort+0x54>
    215e:	1e c0       	rjmp	.+60     	; 0x219c <GPIO_readPort+0x7a>
    2160:	2b 81       	ldd	r18, Y+3	; 0x03
    2162:	3c 81       	ldd	r19, Y+4	; 0x04
    2164:	22 30       	cpi	r18, 0x02	; 2
    2166:	31 05       	cpc	r19, r1
    2168:	81 f0       	breq	.+32     	; 0x218a <GPIO_readPort+0x68>
    216a:	8b 81       	ldd	r24, Y+3	; 0x03
    216c:	9c 81       	ldd	r25, Y+4	; 0x04
    216e:	83 30       	cpi	r24, 0x03	; 3
    2170:	91 05       	cpc	r25, r1
    2172:	81 f0       	breq	.+32     	; 0x2194 <GPIO_readPort+0x72>
    2174:	13 c0       	rjmp	.+38     	; 0x219c <GPIO_readPort+0x7a>

	case PORTA_ID:
		readValue=OUTPUT_REGA;
    2176:	eb e3       	ldi	r30, 0x3B	; 59
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	89 83       	std	Y+1, r24	; 0x01
    217e:	0e c0       	rjmp	.+28     	; 0x219c <GPIO_readPort+0x7a>
		break;
	case PORTB_ID:
		readValue=OUTPUT_REGB;
    2180:	e8 e3       	ldi	r30, 0x38	; 56
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	89 83       	std	Y+1, r24	; 0x01
    2188:	09 c0       	rjmp	.+18     	; 0x219c <GPIO_readPort+0x7a>
		break;
	case PORTC_ID:
		readValue=OUTPUT_REGC;
    218a:	e5 e3       	ldi	r30, 0x35	; 53
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 81       	ld	r24, Z
    2190:	89 83       	std	Y+1, r24	; 0x01
    2192:	04 c0       	rjmp	.+8      	; 0x219c <GPIO_readPort+0x7a>
		break;
	case PORTD_ID:
		readValue=OUTPUT_REGD;
    2194:	e2 e3       	ldi	r30, 0x32	; 50
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	80 81       	ld	r24, Z
    219a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	}
	return readValue;
    219c:	89 81       	ldd	r24, Y+1	; 0x01
}
    219e:	0f 90       	pop	r0
    21a0:	0f 90       	pop	r0
    21a2:	0f 90       	pop	r0
    21a4:	0f 90       	pop	r0
    21a6:	cf 91       	pop	r28
    21a8:	df 91       	pop	r29
    21aa:	08 95       	ret

000021ac <PWM_Timer0_Start>:
 *                      Functions Definitions                                  *
 *******************************************************************************/
/*
 * Description: Function to initialize PWM Timer0 of AVR.
 */
void PWM_Timer0_Start(const PWM0_ConfigType *Config_Ptr){
    21ac:	0f 93       	push	r16
    21ae:	1f 93       	push	r17
    21b0:	df 93       	push	r29
    21b2:	cf 93       	push	r28
    21b4:	00 d0       	rcall	.+0      	; 0x21b6 <PWM_Timer0_Start+0xa>
    21b6:	cd b7       	in	r28, 0x3d	; 61
    21b8:	de b7       	in	r29, 0x3e	; 62
    21ba:	9a 83       	std	Y+2, r25	; 0x02
    21bc:	89 83       	std	Y+1, r24	; 0x01
 * 1. WGM01:0 =1 to work with fast PWM mode of TIMER0 of AVR.
 * 2. FOC0 =0 to work with fast PWM mode of TIMER0 of AVR.
 * 3. CS02:00 are set with the entered pre-scaler.
 * 4. COM01:00 are set with required mode of PWM (inverting/non-inverting).
 */
	TCCR0 = ( (1<<WGM00) | (1<<WGM01) | (Config_Ptr->prescaler) | (Config_Ptr->mode) );
    21be:	a3 e5       	ldi	r26, 0x53	; 83
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	e9 81       	ldd	r30, Y+1	; 0x01
    21c4:	fa 81       	ldd	r31, Y+2	; 0x02
    21c6:	90 81       	ld	r25, Z
    21c8:	e9 81       	ldd	r30, Y+1	; 0x01
    21ca:	fa 81       	ldd	r31, Y+2	; 0x02
    21cc:	82 81       	ldd	r24, Z+2	; 0x02
    21ce:	89 2b       	or	r24, r25
    21d0:	88 64       	ori	r24, 0x48	; 72
    21d2:	8c 93       	st	X, r24
	TCNT0 =0; /* Reseting TIMER0 register */
    21d4:	e2 e5       	ldi	r30, 0x52	; 82
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	10 82       	st	Z, r1

	/* A simple equation to calculate OCR0 value depending on preferred duty cycle entered. */
	OCR0 = 255*((float)(Config_Ptr->dutyCycle)/100);
    21da:	0c e5       	ldi	r16, 0x5C	; 92
    21dc:	10 e0       	ldi	r17, 0x00	; 0
    21de:	e9 81       	ldd	r30, Y+1	; 0x01
    21e0:	fa 81       	ldd	r31, Y+2	; 0x02
    21e2:	81 81       	ldd	r24, Z+1	; 0x01
    21e4:	88 2f       	mov	r24, r24
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	a0 e0       	ldi	r26, 0x00	; 0
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	bc 01       	movw	r22, r24
    21ee:	cd 01       	movw	r24, r26
    21f0:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	bc 01       	movw	r22, r24
    21fa:	cd 01       	movw	r24, r26
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	48 ec       	ldi	r20, 0xC8	; 200
    2202:	52 e4       	ldi	r21, 0x42	; 66
    2204:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2208:	dc 01       	movw	r26, r24
    220a:	cb 01       	movw	r24, r22
    220c:	bc 01       	movw	r22, r24
    220e:	cd 01       	movw	r24, r26
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	4f e7       	ldi	r20, 0x7F	; 127
    2216:	53 e4       	ldi	r21, 0x43	; 67
    2218:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	bc 01       	movw	r22, r24
    2222:	cd 01       	movw	r24, r26
    2224:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	f8 01       	movw	r30, r16
    222e:	80 83       	st	Z, r24

	/* Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC. */
	DDRB = DDRB | (1<<PB3);
    2230:	a7 e3       	ldi	r26, 0x37	; 55
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	e7 e3       	ldi	r30, 0x37	; 55
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	88 60       	ori	r24, 0x08	; 8
    223c:	8c 93       	st	X, r24
}
    223e:	0f 90       	pop	r0
    2240:	0f 90       	pop	r0
    2242:	cf 91       	pop	r28
    2244:	df 91       	pop	r29
    2246:	1f 91       	pop	r17
    2248:	0f 91       	pop	r16
    224a:	08 95       	ret

0000224c <PWM_Timer2_Start>:


/*
 * Description: Function to initialize PWM of Timer2 of AVR.
 */
void PWM_Timer2_Start(const PWM2_ConfigType *Config_Ptr){
    224c:	0f 93       	push	r16
    224e:	1f 93       	push	r17
    2250:	df 93       	push	r29
    2252:	cf 93       	push	r28
    2254:	00 d0       	rcall	.+0      	; 0x2256 <PWM_Timer2_Start+0xa>
    2256:	cd b7       	in	r28, 0x3d	; 61
    2258:	de b7       	in	r29, 0x3e	; 62
    225a:	9a 83       	std	Y+2, r25	; 0x02
    225c:	89 83       	std	Y+1, r24	; 0x01
 * 1. WGM21:0 =1 to work with fast PWM mode of TIMER0 of AVR.
 * 2. FOC2 =0 to work with fast PWM mode of TIMER0 of AVR.
 * 3. CS22:00 are set with the entered pre-scaler.
 * 4. COM21:00 are set with required mode of PWM (inverting/non-inverting).
 */
	TCCR2 = ( (1<<WGM20) | (1<<WGM21) | (Config_Ptr->prescaler) | (Config_Ptr->mode) );
    225e:	a5 e4       	ldi	r26, 0x45	; 69
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	e9 81       	ldd	r30, Y+1	; 0x01
    2264:	fa 81       	ldd	r31, Y+2	; 0x02
    2266:	90 81       	ld	r25, Z
    2268:	e9 81       	ldd	r30, Y+1	; 0x01
    226a:	fa 81       	ldd	r31, Y+2	; 0x02
    226c:	82 81       	ldd	r24, Z+2	; 0x02
    226e:	89 2b       	or	r24, r25
    2270:	88 64       	ori	r24, 0x48	; 72
    2272:	8c 93       	st	X, r24
	TCNT2 =0; /* Reseting TIMER0 register */
    2274:	e4 e4       	ldi	r30, 0x44	; 68
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	10 82       	st	Z, r1

	/* A simple equation to calculate OCR0 value depending on preferred duty cycle entered. */
	OCR2 = 255*((float)(Config_Ptr->dutyCycle)/100);
    227a:	03 e4       	ldi	r16, 0x43	; 67
    227c:	10 e0       	ldi	r17, 0x00	; 0
    227e:	e9 81       	ldd	r30, Y+1	; 0x01
    2280:	fa 81       	ldd	r31, Y+2	; 0x02
    2282:	81 81       	ldd	r24, Z+1	; 0x01
    2284:	88 2f       	mov	r24, r24
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	a0 e0       	ldi	r26, 0x00	; 0
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	bc 01       	movw	r22, r24
    228e:	cd 01       	movw	r24, r26
    2290:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	bc 01       	movw	r22, r24
    229a:	cd 01       	movw	r24, r26
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	48 ec       	ldi	r20, 0xC8	; 200
    22a2:	52 e4       	ldi	r21, 0x42	; 66
    22a4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22a8:	dc 01       	movw	r26, r24
    22aa:	cb 01       	movw	r24, r22
    22ac:	bc 01       	movw	r22, r24
    22ae:	cd 01       	movw	r24, r26
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	4f e7       	ldi	r20, 0x7F	; 127
    22b6:	53 e4       	ldi	r21, 0x43	; 67
    22b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	bc 01       	movw	r22, r24
    22c2:	cd 01       	movw	r24, r26
    22c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	f8 01       	movw	r30, r16
    22ce:	80 83       	st	Z, r24

	/* Configure PD7/OC2 as output pin --> pin where the PWM signal is generated from MC. */
	DDRD = DDRD | (1<<PD7);
    22d0:	a1 e3       	ldi	r26, 0x31	; 49
    22d2:	b0 e0       	ldi	r27, 0x00	; 0
    22d4:	e1 e3       	ldi	r30, 0x31	; 49
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
    22da:	80 68       	ori	r24, 0x80	; 128
    22dc:	8c 93       	st	X, r24
}
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
    22e2:	cf 91       	pop	r28
    22e4:	df 91       	pop	r29
    22e6:	1f 91       	pop	r17
    22e8:	0f 91       	pop	r16
    22ea:	08 95       	ret

000022ec <PWM_Timer0_DeInit>:


/*
 * Description: Function to de-initialize PWM of Timer0 of AVR.
 */
void PWM_Timer0_DeInit(void){
    22ec:	df 93       	push	r29
    22ee:	cf 93       	push	r28
    22f0:	cd b7       	in	r28, 0x3d	; 61
    22f2:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0;
    22f4:	e3 e5       	ldi	r30, 0x53	; 83
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	10 82       	st	Z, r1
	TCNT0=0;
    22fa:	e2 e5       	ldi	r30, 0x52	; 82
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	10 82       	st	Z, r1
	OCR0=0;
    2300:	ec e5       	ldi	r30, 0x5C	; 92
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	10 82       	st	Z, r1
}
    2306:	cf 91       	pop	r28
    2308:	df 91       	pop	r29
    230a:	08 95       	ret

0000230c <PWM_Timer2_DeInit>:


/*
 * Description: Function to de-initialize PWM of Timer2 of AVR.
 */
void PWM_Timer2_DeInit(void){
    230c:	df 93       	push	r29
    230e:	cf 93       	push	r28
    2310:	cd b7       	in	r28, 0x3d	; 61
    2312:	de b7       	in	r29, 0x3e	; 62
	TCCR2=0;
    2314:	e5 e4       	ldi	r30, 0x45	; 69
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	10 82       	st	Z, r1
	TCNT2=0;
    231a:	e4 e4       	ldi	r30, 0x44	; 68
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	10 82       	st	Z, r1
	OCR2=0;
    2320:	e3 e4       	ldi	r30, 0x43	; 67
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	10 82       	st	Z, r1
}
    2326:	cf 91       	pop	r28
    2328:	df 91       	pop	r29
    232a:	08 95       	ret

0000232c <PWM_Timer0_changeDuty>:


/*
 * Description: Function to change duty cycle of PWM of Timer2 of AVR.
 */
void PWM_Timer0_changeDuty(uint8 duty){
    232c:	0f 93       	push	r16
    232e:	1f 93       	push	r17
    2330:	df 93       	push	r29
    2332:	cf 93       	push	r28
    2334:	0f 92       	push	r0
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
    233a:	89 83       	std	Y+1, r24	; 0x01
	/* A simple equation to calculate OCR0 value depending on preferred duty cycle entered. */
	OCR0 = 255*((float)duty/100);
    233c:	0c e5       	ldi	r16, 0x5C	; 92
    233e:	10 e0       	ldi	r17, 0x00	; 0
    2340:	89 81       	ldd	r24, Y+1	; 0x01
    2342:	88 2f       	mov	r24, r24
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	a0 e0       	ldi	r26, 0x00	; 0
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	bc 01       	movw	r22, r24
    234c:	cd 01       	movw	r24, r26
    234e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	bc 01       	movw	r22, r24
    2358:	cd 01       	movw	r24, r26
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	48 ec       	ldi	r20, 0xC8	; 200
    2360:	52 e4       	ldi	r21, 0x42	; 66
    2362:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	bc 01       	movw	r22, r24
    236c:	cd 01       	movw	r24, r26
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	4f e7       	ldi	r20, 0x7F	; 127
    2374:	53 e4       	ldi	r21, 0x43	; 67
    2376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	bc 01       	movw	r22, r24
    2380:	cd 01       	movw	r24, r26
    2382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	f8 01       	movw	r30, r16
    238c:	80 83       	st	Z, r24
	TCNT0=0;
    238e:	e2 e5       	ldi	r30, 0x52	; 82
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	10 82       	st	Z, r1
}
    2394:	0f 90       	pop	r0
    2396:	cf 91       	pop	r28
    2398:	df 91       	pop	r29
    239a:	1f 91       	pop	r17
    239c:	0f 91       	pop	r16
    239e:	08 95       	ret

000023a0 <PWM_Timer2_changeDuty>:


/*
 * Description: Function to change duty cycle of PWM of Timer2 of AVR.
 */
void PWM_Timer2_changeDuty(uint8 duty){
    23a0:	0f 93       	push	r16
    23a2:	1f 93       	push	r17
    23a4:	df 93       	push	r29
    23a6:	cf 93       	push	r28
    23a8:	0f 92       	push	r0
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
    23ae:	89 83       	std	Y+1, r24	; 0x01
	/* A simple equation to calculate OCR0 value depending on preferred duty cycle entered. */
	OCR2 = 255*((float)duty/100);
    23b0:	03 e4       	ldi	r16, 0x43	; 67
    23b2:	10 e0       	ldi	r17, 0x00	; 0
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
    23b6:	88 2f       	mov	r24, r24
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	a0 e0       	ldi	r26, 0x00	; 0
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	bc 01       	movw	r22, r24
    23c0:	cd 01       	movw	r24, r26
    23c2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	bc 01       	movw	r22, r24
    23cc:	cd 01       	movw	r24, r26
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	48 ec       	ldi	r20, 0xC8	; 200
    23d4:	52 e4       	ldi	r21, 0x42	; 66
    23d6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	bc 01       	movw	r22, r24
    23e0:	cd 01       	movw	r24, r26
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	4f e7       	ldi	r20, 0x7F	; 127
    23e8:	53 e4       	ldi	r21, 0x43	; 67
    23ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	bc 01       	movw	r22, r24
    23f4:	cd 01       	movw	r24, r26
    23f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	f8 01       	movw	r30, r16
    2400:	80 83       	st	Z, r24
	TCNT2=0;
    2402:	e4 e4       	ldi	r30, 0x44	; 68
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	10 82       	st	Z, r1
}
    2408:	0f 90       	pop	r0
    240a:	cf 91       	pop	r28
    240c:	df 91       	pop	r29
    240e:	1f 91       	pop	r17
    2410:	0f 91       	pop	r16
    2412:	08 95       	ret

00002414 <PWM_Timer0_changeClock>:


/*
 * Description: Function to change clock Timer0 of AVR.
 */
void PWM_Timer0_changeClock(TIMER0_Prescaler clock){
    2414:	df 93       	push	r29
    2416:	cf 93       	push	r28
    2418:	0f 92       	push	r0
    241a:	cd b7       	in	r28, 0x3d	; 61
    241c:	de b7       	in	r29, 0x3e	; 62
    241e:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 = (TCCR0 & 0xF8) | clock;
    2420:	a3 e5       	ldi	r26, 0x53	; 83
    2422:	b0 e0       	ldi	r27, 0x00	; 0
    2424:	e3 e5       	ldi	r30, 0x53	; 83
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	98 2f       	mov	r25, r24
    242c:	98 7f       	andi	r25, 0xF8	; 248
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	89 2b       	or	r24, r25
    2432:	8c 93       	st	X, r24
}
    2434:	0f 90       	pop	r0
    2436:	cf 91       	pop	r28
    2438:	df 91       	pop	r29
    243a:	08 95       	ret

0000243c <PWM_Timer2_changeClock>:


/*
 * Description: Function to change clock Timer2 of AVR.
 */
void PWM_Timer2_changeClock(TIMER2_Prescaler clock){
    243c:	df 93       	push	r29
    243e:	cf 93       	push	r28
    2440:	0f 92       	push	r0
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
    2446:	89 83       	std	Y+1, r24	; 0x01
	TCCR2 = (TCCR2 & 0xF8) | clock;
    2448:	a5 e4       	ldi	r26, 0x45	; 69
    244a:	b0 e0       	ldi	r27, 0x00	; 0
    244c:	e5 e4       	ldi	r30, 0x45	; 69
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 81       	ld	r24, Z
    2452:	98 2f       	mov	r25, r24
    2454:	98 7f       	andi	r25, 0xF8	; 248
    2456:	89 81       	ldd	r24, Y+1	; 0x01
    2458:	89 2b       	or	r24, r25
    245a:	8c 93       	st	X, r24
}
    245c:	0f 90       	pop	r0
    245e:	cf 91       	pop	r28
    2460:	df 91       	pop	r29
    2462:	08 95       	ret

00002464 <__vector_9>:

/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/
ISR(TIMER0_OVF_vect)
{
    2464:	1f 92       	push	r1
    2466:	0f 92       	push	r0
    2468:	0f b6       	in	r0, 0x3f	; 63
    246a:	0f 92       	push	r0
    246c:	11 24       	eor	r1, r1
    246e:	2f 93       	push	r18
    2470:	3f 93       	push	r19
    2472:	4f 93       	push	r20
    2474:	5f 93       	push	r21
    2476:	6f 93       	push	r22
    2478:	7f 93       	push	r23
    247a:	8f 93       	push	r24
    247c:	9f 93       	push	r25
    247e:	af 93       	push	r26
    2480:	bf 93       	push	r27
    2482:	ef 93       	push	r30
    2484:	ff 93       	push	r31
    2486:	df 93       	push	r29
    2488:	cf 93       	push	r28
    248a:	cd b7       	in	r28, 0x3d	; 61
    248c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    248e:	80 91 80 01 	lds	r24, 0x0180
    2492:	90 91 81 01 	lds	r25, 0x0181
    2496:	00 97       	sbiw	r24, 0x00	; 0
    2498:	29 f0       	breq	.+10     	; 0x24a4 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the interrupt is detected */
		(*g_callBackPtr0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    249a:	e0 91 80 01 	lds	r30, 0x0180
    249e:	f0 91 81 01 	lds	r31, 0x0181
    24a2:	09 95       	icall
	}
}
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	ff 91       	pop	r31
    24aa:	ef 91       	pop	r30
    24ac:	bf 91       	pop	r27
    24ae:	af 91       	pop	r26
    24b0:	9f 91       	pop	r25
    24b2:	8f 91       	pop	r24
    24b4:	7f 91       	pop	r23
    24b6:	6f 91       	pop	r22
    24b8:	5f 91       	pop	r21
    24ba:	4f 91       	pop	r20
    24bc:	3f 91       	pop	r19
    24be:	2f 91       	pop	r18
    24c0:	0f 90       	pop	r0
    24c2:	0f be       	out	0x3f, r0	; 63
    24c4:	0f 90       	pop	r0
    24c6:	1f 90       	pop	r1
    24c8:	18 95       	reti

000024ca <__vector_19>:


ISR(TIMER0_COMP_vect)
{
    24ca:	1f 92       	push	r1
    24cc:	0f 92       	push	r0
    24ce:	0f b6       	in	r0, 0x3f	; 63
    24d0:	0f 92       	push	r0
    24d2:	11 24       	eor	r1, r1
    24d4:	2f 93       	push	r18
    24d6:	3f 93       	push	r19
    24d8:	4f 93       	push	r20
    24da:	5f 93       	push	r21
    24dc:	6f 93       	push	r22
    24de:	7f 93       	push	r23
    24e0:	8f 93       	push	r24
    24e2:	9f 93       	push	r25
    24e4:	af 93       	push	r26
    24e6:	bf 93       	push	r27
    24e8:	ef 93       	push	r30
    24ea:	ff 93       	push	r31
    24ec:	df 93       	push	r29
    24ee:	cf 93       	push	r28
    24f0:	cd b7       	in	r28, 0x3d	; 61
    24f2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    24f4:	80 91 80 01 	lds	r24, 0x0180
    24f8:	90 91 81 01 	lds	r25, 0x0181
    24fc:	00 97       	sbiw	r24, 0x00	; 0
    24fe:	29 f0       	breq	.+10     	; 0x250a <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the interrupt is detected */
		(*g_callBackPtr0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2500:	e0 91 80 01 	lds	r30, 0x0180
    2504:	f0 91 81 01 	lds	r31, 0x0181
    2508:	09 95       	icall
	}
}
    250a:	cf 91       	pop	r28
    250c:	df 91       	pop	r29
    250e:	ff 91       	pop	r31
    2510:	ef 91       	pop	r30
    2512:	bf 91       	pop	r27
    2514:	af 91       	pop	r26
    2516:	9f 91       	pop	r25
    2518:	8f 91       	pop	r24
    251a:	7f 91       	pop	r23
    251c:	6f 91       	pop	r22
    251e:	5f 91       	pop	r21
    2520:	4f 91       	pop	r20
    2522:	3f 91       	pop	r19
    2524:	2f 91       	pop	r18
    2526:	0f 90       	pop	r0
    2528:	0f be       	out	0x3f, r0	; 63
    252a:	0f 90       	pop	r0
    252c:	1f 90       	pop	r1
    252e:	18 95       	reti

00002530 <__vector_8>:




ISR(TIMER1_OVF_vect)
{
    2530:	1f 92       	push	r1
    2532:	0f 92       	push	r0
    2534:	0f b6       	in	r0, 0x3f	; 63
    2536:	0f 92       	push	r0
    2538:	11 24       	eor	r1, r1
    253a:	2f 93       	push	r18
    253c:	3f 93       	push	r19
    253e:	4f 93       	push	r20
    2540:	5f 93       	push	r21
    2542:	6f 93       	push	r22
    2544:	7f 93       	push	r23
    2546:	8f 93       	push	r24
    2548:	9f 93       	push	r25
    254a:	af 93       	push	r26
    254c:	bf 93       	push	r27
    254e:	ef 93       	push	r30
    2550:	ff 93       	push	r31
    2552:	df 93       	push	r29
    2554:	cf 93       	push	r28
    2556:	cd b7       	in	r28, 0x3d	; 61
    2558:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    255a:	80 91 82 01 	lds	r24, 0x0182
    255e:	90 91 83 01 	lds	r25, 0x0183
    2562:	00 97       	sbiw	r24, 0x00	; 0
    2564:	29 f0       	breq	.+10     	; 0x2570 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the interrupt is detected */
		(*g_callBackPtr1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2566:	e0 91 82 01 	lds	r30, 0x0182
    256a:	f0 91 83 01 	lds	r31, 0x0183
    256e:	09 95       	icall
	}
}
    2570:	cf 91       	pop	r28
    2572:	df 91       	pop	r29
    2574:	ff 91       	pop	r31
    2576:	ef 91       	pop	r30
    2578:	bf 91       	pop	r27
    257a:	af 91       	pop	r26
    257c:	9f 91       	pop	r25
    257e:	8f 91       	pop	r24
    2580:	7f 91       	pop	r23
    2582:	6f 91       	pop	r22
    2584:	5f 91       	pop	r21
    2586:	4f 91       	pop	r20
    2588:	3f 91       	pop	r19
    258a:	2f 91       	pop	r18
    258c:	0f 90       	pop	r0
    258e:	0f be       	out	0x3f, r0	; 63
    2590:	0f 90       	pop	r0
    2592:	1f 90       	pop	r1
    2594:	18 95       	reti

00002596 <__vector_6>:


ISR(TIMER1_COMPA_vect)
{
    2596:	1f 92       	push	r1
    2598:	0f 92       	push	r0
    259a:	0f b6       	in	r0, 0x3f	; 63
    259c:	0f 92       	push	r0
    259e:	11 24       	eor	r1, r1
    25a0:	2f 93       	push	r18
    25a2:	3f 93       	push	r19
    25a4:	4f 93       	push	r20
    25a6:	5f 93       	push	r21
    25a8:	6f 93       	push	r22
    25aa:	7f 93       	push	r23
    25ac:	8f 93       	push	r24
    25ae:	9f 93       	push	r25
    25b0:	af 93       	push	r26
    25b2:	bf 93       	push	r27
    25b4:	ef 93       	push	r30
    25b6:	ff 93       	push	r31
    25b8:	df 93       	push	r29
    25ba:	cf 93       	push	r28
    25bc:	cd b7       	in	r28, 0x3d	; 61
    25be:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    25c0:	80 91 82 01 	lds	r24, 0x0182
    25c4:	90 91 83 01 	lds	r25, 0x0183
    25c8:	00 97       	sbiw	r24, 0x00	; 0
    25ca:	29 f0       	breq	.+10     	; 0x25d6 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the interrupt is detected */
		(*g_callBackPtr1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    25cc:	e0 91 82 01 	lds	r30, 0x0182
    25d0:	f0 91 83 01 	lds	r31, 0x0183
    25d4:	09 95       	icall
	}
}
    25d6:	cf 91       	pop	r28
    25d8:	df 91       	pop	r29
    25da:	ff 91       	pop	r31
    25dc:	ef 91       	pop	r30
    25de:	bf 91       	pop	r27
    25e0:	af 91       	pop	r26
    25e2:	9f 91       	pop	r25
    25e4:	8f 91       	pop	r24
    25e6:	7f 91       	pop	r23
    25e8:	6f 91       	pop	r22
    25ea:	5f 91       	pop	r21
    25ec:	4f 91       	pop	r20
    25ee:	3f 91       	pop	r19
    25f0:	2f 91       	pop	r18
    25f2:	0f 90       	pop	r0
    25f4:	0f be       	out	0x3f, r0	; 63
    25f6:	0f 90       	pop	r0
    25f8:	1f 90       	pop	r1
    25fa:	18 95       	reti

000025fc <__vector_4>:




ISR(TIMER2_OVF_vect)
{
    25fc:	1f 92       	push	r1
    25fe:	0f 92       	push	r0
    2600:	0f b6       	in	r0, 0x3f	; 63
    2602:	0f 92       	push	r0
    2604:	11 24       	eor	r1, r1
    2606:	2f 93       	push	r18
    2608:	3f 93       	push	r19
    260a:	4f 93       	push	r20
    260c:	5f 93       	push	r21
    260e:	6f 93       	push	r22
    2610:	7f 93       	push	r23
    2612:	8f 93       	push	r24
    2614:	9f 93       	push	r25
    2616:	af 93       	push	r26
    2618:	bf 93       	push	r27
    261a:	ef 93       	push	r30
    261c:	ff 93       	push	r31
    261e:	df 93       	push	r29
    2620:	cf 93       	push	r28
    2622:	cd b7       	in	r28, 0x3d	; 61
    2624:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    2626:	80 91 84 01 	lds	r24, 0x0184
    262a:	90 91 85 01 	lds	r25, 0x0185
    262e:	00 97       	sbiw	r24, 0x00	; 0
    2630:	29 f0       	breq	.+10     	; 0x263c <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the interrupt is detected */
		(*g_callBackPtr2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2632:	e0 91 84 01 	lds	r30, 0x0184
    2636:	f0 91 85 01 	lds	r31, 0x0185
    263a:	09 95       	icall
	}
}
    263c:	cf 91       	pop	r28
    263e:	df 91       	pop	r29
    2640:	ff 91       	pop	r31
    2642:	ef 91       	pop	r30
    2644:	bf 91       	pop	r27
    2646:	af 91       	pop	r26
    2648:	9f 91       	pop	r25
    264a:	8f 91       	pop	r24
    264c:	7f 91       	pop	r23
    264e:	6f 91       	pop	r22
    2650:	5f 91       	pop	r21
    2652:	4f 91       	pop	r20
    2654:	3f 91       	pop	r19
    2656:	2f 91       	pop	r18
    2658:	0f 90       	pop	r0
    265a:	0f be       	out	0x3f, r0	; 63
    265c:	0f 90       	pop	r0
    265e:	1f 90       	pop	r1
    2660:	18 95       	reti

00002662 <__vector_3>:


ISR(TIMER2_COMP_vect)
{
    2662:	1f 92       	push	r1
    2664:	0f 92       	push	r0
    2666:	0f b6       	in	r0, 0x3f	; 63
    2668:	0f 92       	push	r0
    266a:	11 24       	eor	r1, r1
    266c:	2f 93       	push	r18
    266e:	3f 93       	push	r19
    2670:	4f 93       	push	r20
    2672:	5f 93       	push	r21
    2674:	6f 93       	push	r22
    2676:	7f 93       	push	r23
    2678:	8f 93       	push	r24
    267a:	9f 93       	push	r25
    267c:	af 93       	push	r26
    267e:	bf 93       	push	r27
    2680:	ef 93       	push	r30
    2682:	ff 93       	push	r31
    2684:	df 93       	push	r29
    2686:	cf 93       	push	r28
    2688:	cd b7       	in	r28, 0x3d	; 61
    268a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    268c:	80 91 84 01 	lds	r24, 0x0184
    2690:	90 91 85 01 	lds	r25, 0x0185
    2694:	00 97       	sbiw	r24, 0x00	; 0
    2696:	29 f0       	breq	.+10     	; 0x26a2 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the interrupt is detected */
		(*g_callBackPtr2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2698:	e0 91 84 01 	lds	r30, 0x0184
    269c:	f0 91 85 01 	lds	r31, 0x0185
    26a0:	09 95       	icall
	}
}
    26a2:	cf 91       	pop	r28
    26a4:	df 91       	pop	r29
    26a6:	ff 91       	pop	r31
    26a8:	ef 91       	pop	r30
    26aa:	bf 91       	pop	r27
    26ac:	af 91       	pop	r26
    26ae:	9f 91       	pop	r25
    26b0:	8f 91       	pop	r24
    26b2:	7f 91       	pop	r23
    26b4:	6f 91       	pop	r22
    26b6:	5f 91       	pop	r21
    26b8:	4f 91       	pop	r20
    26ba:	3f 91       	pop	r19
    26bc:	2f 91       	pop	r18
    26be:	0f 90       	pop	r0
    26c0:	0f be       	out	0x3f, r0	; 63
    26c2:	0f 90       	pop	r0
    26c4:	1f 90       	pop	r1
    26c6:	18 95       	reti

000026c8 <Timer0_Start>:
 *******************************************************************************/
/*
 * Description: Function to initialize Timer0 of AVR.
 */
void Timer0_Start(const Timer0Setup * Config_Ptr)
{
    26c8:	df 93       	push	r29
    26ca:	cf 93       	push	r28
    26cc:	00 d0       	rcall	.+0      	; 0x26ce <Timer0_Start+0x6>
    26ce:	cd b7       	in	r28, 0x3d	; 61
    26d0:	de b7       	in	r29, 0x3e	; 62
    26d2:	9a 83       	std	Y+2, r25	; 0x02
    26d4:	89 83       	std	Y+1, r24	; 0x01
	 * FOC0 = 1 (when PWM mode is disabled) (set auto with Config_Ptr->mode)
	 * WGM01:0  to choose mode of timer (CTC-PWM(fast)-OVF).
	 * COM01:0  to choose mode of CTC mode.
	 * CS02:0   to choose clock and prescaler of timer0.
	 */
	TCCR0 |= (Config_Ptr->mode) | (Config_Ptr->prescaler) ;
    26d6:	a3 e5       	ldi	r26, 0x53	; 83
    26d8:	b0 e0       	ldi	r27, 0x00	; 0
    26da:	e3 e5       	ldi	r30, 0x53	; 83
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	20 81       	ld	r18, Z
    26e0:	e9 81       	ldd	r30, Y+1	; 0x01
    26e2:	fa 81       	ldd	r31, Y+2	; 0x02
    26e4:	90 81       	ld	r25, Z
    26e6:	e9 81       	ldd	r30, Y+1	; 0x01
    26e8:	fa 81       	ldd	r31, Y+2	; 0x02
    26ea:	81 81       	ldd	r24, Z+1	; 0x01
    26ec:	89 2b       	or	r24, r25
    26ee:	82 2b       	or	r24, r18
    26f0:	8c 93       	st	X, r24
	TCNT0  = (Config_Ptr->TCNTValue);
    26f2:	a2 e5       	ldi	r26, 0x52	; 82
    26f4:	b0 e0       	ldi	r27, 0x00	; 0
    26f6:	e9 81       	ldd	r30, Y+1	; 0x01
    26f8:	fa 81       	ldd	r31, Y+2	; 0x02
    26fa:	83 81       	ldd	r24, Z+3	; 0x03
    26fc:	8c 93       	st	X, r24
	OCR0   = (Config_Ptr->OCRValue);
    26fe:	ac e5       	ldi	r26, 0x5C	; 92
    2700:	b0 e0       	ldi	r27, 0x00	; 0
    2702:	e9 81       	ldd	r30, Y+1	; 0x01
    2704:	fa 81       	ldd	r31, Y+2	; 0x02
    2706:	84 81       	ldd	r24, Z+4	; 0x04
    2708:	8c 93       	st	X, r24
	/* TIMSK Register Bits Description:
	 * TOIE0    = 1 Enable interrupt request for timer0 OVF mode.
	 * OCIE0    = 1 Enable interrupt request for timer0 CTC mode.
	 */
	TIMSK = (Config_Ptr->intEnable0);
    270a:	a9 e5       	ldi	r26, 0x59	; 89
    270c:	b0 e0       	ldi	r27, 0x00	; 0
    270e:	e9 81       	ldd	r30, Y+1	; 0x01
    2710:	fa 81       	ldd	r31, Y+2	; 0x02
    2712:	82 81       	ldd	r24, Z+2	; 0x02
    2714:	8c 93       	st	X, r24
}
    2716:	0f 90       	pop	r0
    2718:	0f 90       	pop	r0
    271a:	cf 91       	pop	r28
    271c:	df 91       	pop	r29
    271e:	08 95       	ret

00002720 <Timer1_Start>:

/*
 * Description: Function to initialize Timer2 of AVR.
 */
void Timer1_Start(const Timer1Setup * Config_Ptr)
{
    2720:	df 93       	push	r29
    2722:	cf 93       	push	r28
    2724:	00 d0       	rcall	.+0      	; 0x2726 <Timer1_Start+0x6>
    2726:	cd b7       	in	r28, 0x3d	; 61
    2728:	de b7       	in	r29, 0x3e	; 62
    272a:	9a 83       	std	Y+2, r25	; 0x02
    272c:	89 83       	std	Y+1, r24	; 0x01
	 * FOC1B = 1 (when PWM mode is disabled) (set auto with Config_Ptr->mode)
	 * WGM13:0  to choose mode of timer (CTC-PWM(fast)-OVF).
	 * COM1A1/COM1B1:0  to choose mode of CTC mode.
	 * CS12:0   to choose clock and prescaler of timer0.
	 */
	TCCR1A |= (Config_Ptr->modeA)  ;
    272e:	af e4       	ldi	r26, 0x4F	; 79
    2730:	b0 e0       	ldi	r27, 0x00	; 0
    2732:	ef e4       	ldi	r30, 0x4F	; 79
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	90 81       	ld	r25, Z
    2738:	e9 81       	ldd	r30, Y+1	; 0x01
    273a:	fa 81       	ldd	r31, Y+2	; 0x02
    273c:	80 81       	ld	r24, Z
    273e:	89 2b       	or	r24, r25
    2740:	8c 93       	st	X, r24
	TCCR1B |= (Config_Ptr->modeB) | (Config_Ptr->prescaler) ;
    2742:	ae e4       	ldi	r26, 0x4E	; 78
    2744:	b0 e0       	ldi	r27, 0x00	; 0
    2746:	ee e4       	ldi	r30, 0x4E	; 78
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	20 81       	ld	r18, Z
    274c:	e9 81       	ldd	r30, Y+1	; 0x01
    274e:	fa 81       	ldd	r31, Y+2	; 0x02
    2750:	91 81       	ldd	r25, Z+1	; 0x01
    2752:	e9 81       	ldd	r30, Y+1	; 0x01
    2754:	fa 81       	ldd	r31, Y+2	; 0x02
    2756:	82 81       	ldd	r24, Z+2	; 0x02
    2758:	89 2b       	or	r24, r25
    275a:	82 2b       	or	r24, r18
    275c:	8c 93       	st	X, r24
	TCNT1   = (Config_Ptr->TCNTValue);
    275e:	ac e4       	ldi	r26, 0x4C	; 76
    2760:	b0 e0       	ldi	r27, 0x00	; 0
    2762:	e9 81       	ldd	r30, Y+1	; 0x01
    2764:	fa 81       	ldd	r31, Y+2	; 0x02
    2766:	84 81       	ldd	r24, Z+4	; 0x04
    2768:	95 81       	ldd	r25, Z+5	; 0x05
    276a:	11 96       	adiw	r26, 0x01	; 1
    276c:	9c 93       	st	X, r25
    276e:	8e 93       	st	-X, r24
	OCR1A   = (Config_Ptr->OCRValue);
    2770:	aa e4       	ldi	r26, 0x4A	; 74
    2772:	b0 e0       	ldi	r27, 0x00	; 0
    2774:	e9 81       	ldd	r30, Y+1	; 0x01
    2776:	fa 81       	ldd	r31, Y+2	; 0x02
    2778:	86 81       	ldd	r24, Z+6	; 0x06
    277a:	97 81       	ldd	r25, Z+7	; 0x07
    277c:	11 96       	adiw	r26, 0x01	; 1
    277e:	9c 93       	st	X, r25
    2780:	8e 93       	st	-X, r24
	 * TOIE1    = 1 Enable interrupt request for timer1 OVF mode.
	 * OCIE1A   = 1 Enable interrupt request for timer1-(channel A) CTC mode.
	 * OCIE1B   = 1 Enable interrupt request for timer1-(channel B) CTC mode (Needed PWM mode/ Not supported here).
	 * OCIE2    = 1 Enable interrupt request for timer2 CTC mode.
	 */
	TIMSK = (Config_Ptr->intEnable1);
    2782:	a9 e5       	ldi	r26, 0x59	; 89
    2784:	b0 e0       	ldi	r27, 0x00	; 0
    2786:	e9 81       	ldd	r30, Y+1	; 0x01
    2788:	fa 81       	ldd	r31, Y+2	; 0x02
    278a:	83 81       	ldd	r24, Z+3	; 0x03
    278c:	8c 93       	st	X, r24
}
    278e:	0f 90       	pop	r0
    2790:	0f 90       	pop	r0
    2792:	cf 91       	pop	r28
    2794:	df 91       	pop	r29
    2796:	08 95       	ret

00002798 <Timer2_Start>:

/*
 * Description: Function to initialize Timer2 of AVR.
 */
void Timer2_Start(const Timer2Setup * Config_Ptr)
{
    2798:	df 93       	push	r29
    279a:	cf 93       	push	r28
    279c:	00 d0       	rcall	.+0      	; 0x279e <Timer2_Start+0x6>
    279e:	cd b7       	in	r28, 0x3d	; 61
    27a0:	de b7       	in	r29, 0x3e	; 62
    27a2:	9a 83       	std	Y+2, r25	; 0x02
    27a4:	89 83       	std	Y+1, r24	; 0x01
	 * FOC2 = 1 (when PWM mode is disabled) (set auto with Config_Ptr->mode)
	 * WGM21:0  to choose mode of timer (CTC-PWM(fast)-OVF).
	 * COM21:0  to choose mode of PWM mode or CTC mode.
	 * CS22:0   to choose clock and prescaler of timer0.
	 */
	TCCR2 |= (Config_Ptr->mode) | (Config_Ptr->prescaler) ;
    27a6:	a5 e4       	ldi	r26, 0x45	; 69
    27a8:	b0 e0       	ldi	r27, 0x00	; 0
    27aa:	e5 e4       	ldi	r30, 0x45	; 69
    27ac:	f0 e0       	ldi	r31, 0x00	; 0
    27ae:	20 81       	ld	r18, Z
    27b0:	e9 81       	ldd	r30, Y+1	; 0x01
    27b2:	fa 81       	ldd	r31, Y+2	; 0x02
    27b4:	90 81       	ld	r25, Z
    27b6:	e9 81       	ldd	r30, Y+1	; 0x01
    27b8:	fa 81       	ldd	r31, Y+2	; 0x02
    27ba:	81 81       	ldd	r24, Z+1	; 0x01
    27bc:	89 2b       	or	r24, r25
    27be:	82 2b       	or	r24, r18
    27c0:	8c 93       	st	X, r24
	TCNT2 = (Config_Ptr->TCNTValue);
    27c2:	a4 e4       	ldi	r26, 0x44	; 68
    27c4:	b0 e0       	ldi	r27, 0x00	; 0
    27c6:	e9 81       	ldd	r30, Y+1	; 0x01
    27c8:	fa 81       	ldd	r31, Y+2	; 0x02
    27ca:	83 81       	ldd	r24, Z+3	; 0x03
    27cc:	8c 93       	st	X, r24
	OCR2  = (Config_Ptr->OCRValue);
    27ce:	a3 e4       	ldi	r26, 0x43	; 67
    27d0:	b0 e0       	ldi	r27, 0x00	; 0
    27d2:	e9 81       	ldd	r30, Y+1	; 0x01
    27d4:	fa 81       	ldd	r31, Y+2	; 0x02
    27d6:	84 81       	ldd	r24, Z+4	; 0x04
    27d8:	8c 93       	st	X, r24
	/* TIMSK Register Bits Description:
	 * TOIE2    = 1 Enable interrupt request for timer2 OVF mode.
	 * OCIE2    = 1 Enable interrupt request for timer2 CTC mode.
	 */
	TIMSK = (Config_Ptr->intEnable2);
    27da:	a9 e5       	ldi	r26, 0x59	; 89
    27dc:	b0 e0       	ldi	r27, 0x00	; 0
    27de:	e9 81       	ldd	r30, Y+1	; 0x01
    27e0:	fa 81       	ldd	r31, Y+2	; 0x02
    27e2:	82 81       	ldd	r24, Z+2	; 0x02
    27e4:	8c 93       	st	X, r24
}
    27e6:	0f 90       	pop	r0
    27e8:	0f 90       	pop	r0
    27ea:	cf 91       	pop	r28
    27ec:	df 91       	pop	r29
    27ee:	08 95       	ret

000027f0 <Timer0_setClock>:


/*
 * Description: Function to change clock of timer0.
 */
void Timer0_setClock(uint8 clock ){
    27f0:	df 93       	push	r29
    27f2:	cf 93       	push	r28
    27f4:	0f 92       	push	r0
    27f6:	cd b7       	in	r28, 0x3d	; 61
    27f8:	de b7       	in	r29, 0x3e	; 62
    27fa:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 |= ((TCCR0 & 0xF8) | clock);
    27fc:	a3 e5       	ldi	r26, 0x53	; 83
    27fe:	b0 e0       	ldi	r27, 0x00	; 0
    2800:	e3 e5       	ldi	r30, 0x53	; 83
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	80 81       	ld	r24, Z
    2806:	28 2f       	mov	r18, r24
    2808:	e3 e5       	ldi	r30, 0x53	; 83
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	80 81       	ld	r24, Z
    280e:	98 2f       	mov	r25, r24
    2810:	98 7f       	andi	r25, 0xF8	; 248
    2812:	89 81       	ldd	r24, Y+1	; 0x01
    2814:	89 2b       	or	r24, r25
    2816:	82 2b       	or	r24, r18
    2818:	8c 93       	st	X, r24
}
    281a:	0f 90       	pop	r0
    281c:	cf 91       	pop	r28
    281e:	df 91       	pop	r29
    2820:	08 95       	ret

00002822 <Timer1_setClock>:


/*
 * Description: Function to change clock of timer1.
 */
void Timer1_setClock(uint8 clock ){
    2822:	df 93       	push	r29
    2824:	cf 93       	push	r28
    2826:	0f 92       	push	r0
    2828:	cd b7       	in	r28, 0x3d	; 61
    282a:	de b7       	in	r29, 0x3e	; 62
    282c:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B |= ((TCCR1B & 0xF8) | clock);
    282e:	ae e4       	ldi	r26, 0x4E	; 78
    2830:	b0 e0       	ldi	r27, 0x00	; 0
    2832:	ee e4       	ldi	r30, 0x4E	; 78
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	80 81       	ld	r24, Z
    2838:	28 2f       	mov	r18, r24
    283a:	ee e4       	ldi	r30, 0x4E	; 78
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	80 81       	ld	r24, Z
    2840:	98 2f       	mov	r25, r24
    2842:	98 7f       	andi	r25, 0xF8	; 248
    2844:	89 81       	ldd	r24, Y+1	; 0x01
    2846:	89 2b       	or	r24, r25
    2848:	82 2b       	or	r24, r18
    284a:	8c 93       	st	X, r24
}
    284c:	0f 90       	pop	r0
    284e:	cf 91       	pop	r28
    2850:	df 91       	pop	r29
    2852:	08 95       	ret

00002854 <Timer2_setClock>:


/*
 * Description: Function to change clock of timer2.
 */
void Timer2_setClock(uint8 clock ){
    2854:	df 93       	push	r29
    2856:	cf 93       	push	r28
    2858:	0f 92       	push	r0
    285a:	cd b7       	in	r28, 0x3d	; 61
    285c:	de b7       	in	r29, 0x3e	; 62
    285e:	89 83       	std	Y+1, r24	; 0x01
	TCCR2 |= ((TCCR2 & 0xF8) | clock);
    2860:	a5 e4       	ldi	r26, 0x45	; 69
    2862:	b0 e0       	ldi	r27, 0x00	; 0
    2864:	e5 e4       	ldi	r30, 0x45	; 69
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	80 81       	ld	r24, Z
    286a:	28 2f       	mov	r18, r24
    286c:	e5 e4       	ldi	r30, 0x45	; 69
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	80 81       	ld	r24, Z
    2872:	98 2f       	mov	r25, r24
    2874:	98 7f       	andi	r25, 0xF8	; 248
    2876:	89 81       	ldd	r24, Y+1	; 0x01
    2878:	89 2b       	or	r24, r25
    287a:	82 2b       	or	r24, r18
    287c:	8c 93       	st	X, r24
}
    287e:	0f 90       	pop	r0
    2880:	cf 91       	pop	r28
    2882:	df 91       	pop	r29
    2884:	08 95       	ret

00002886 <Timer0_setCTC>:


/*
 * Description: Function to change compare value of timer0.
 */
void Timer0_setCTC(uint8 ctc ){
    2886:	df 93       	push	r29
    2888:	cf 93       	push	r28
    288a:	0f 92       	push	r0
    288c:	cd b7       	in	r28, 0x3d	; 61
    288e:	de b7       	in	r29, 0x3e	; 62
    2890:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=0;
    2892:	e2 e5       	ldi	r30, 0x52	; 82
    2894:	f0 e0       	ldi	r31, 0x00	; 0
    2896:	10 82       	st	Z, r1
	OCR0=ctc;
    2898:	ec e5       	ldi	r30, 0x5C	; 92
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	89 81       	ldd	r24, Y+1	; 0x01
    289e:	80 83       	st	Z, r24
}
    28a0:	0f 90       	pop	r0
    28a2:	cf 91       	pop	r28
    28a4:	df 91       	pop	r29
    28a6:	08 95       	ret

000028a8 <Timer1_setCTC>:


/*
 * Description: Function to change compare value of timer1.
 */
void Timer1_setCTC(uint16 ctc ){
    28a8:	df 93       	push	r29
    28aa:	cf 93       	push	r28
    28ac:	00 d0       	rcall	.+0      	; 0x28ae <Timer1_setCTC+0x6>
    28ae:	cd b7       	in	r28, 0x3d	; 61
    28b0:	de b7       	in	r29, 0x3e	; 62
    28b2:	9a 83       	std	Y+2, r25	; 0x02
    28b4:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=0;
    28b6:	ec e4       	ldi	r30, 0x4C	; 76
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	11 82       	std	Z+1, r1	; 0x01
    28bc:	10 82       	st	Z, r1
	OCR1A=ctc;
    28be:	ea e4       	ldi	r30, 0x4A	; 74
    28c0:	f0 e0       	ldi	r31, 0x00	; 0
    28c2:	89 81       	ldd	r24, Y+1	; 0x01
    28c4:	9a 81       	ldd	r25, Y+2	; 0x02
    28c6:	91 83       	std	Z+1, r25	; 0x01
    28c8:	80 83       	st	Z, r24
}
    28ca:	0f 90       	pop	r0
    28cc:	0f 90       	pop	r0
    28ce:	cf 91       	pop	r28
    28d0:	df 91       	pop	r29
    28d2:	08 95       	ret

000028d4 <Timer2_setCTC>:


/*
 * Description: Function to change compare value of timer2.
 */
void Timer2_setCTC(uint8 ctc ){
    28d4:	df 93       	push	r29
    28d6:	cf 93       	push	r28
    28d8:	0f 92       	push	r0
    28da:	cd b7       	in	r28, 0x3d	; 61
    28dc:	de b7       	in	r29, 0x3e	; 62
    28de:	89 83       	std	Y+1, r24	; 0x01
	TCNT2=0;
    28e0:	e4 e4       	ldi	r30, 0x44	; 68
    28e2:	f0 e0       	ldi	r31, 0x00	; 0
    28e4:	10 82       	st	Z, r1
	OCR2=ctc;
    28e6:	e3 e4       	ldi	r30, 0x43	; 67
    28e8:	f0 e0       	ldi	r31, 0x00	; 0
    28ea:	89 81       	ldd	r24, Y+1	; 0x01
    28ec:	80 83       	st	Z, r24
}
    28ee:	0f 90       	pop	r0
    28f0:	cf 91       	pop	r28
    28f2:	df 91       	pop	r29
    28f4:	08 95       	ret

000028f6 <Timer0_DeInit>:


/*
 * Description: Function to stop Timer2 of AVR after done.
 */
void Timer0_DeInit(){
    28f6:	df 93       	push	r29
    28f8:	cf 93       	push	r28
    28fa:	cd b7       	in	r28, 0x3d	; 61
    28fc:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0;
    28fe:	e3 e5       	ldi	r30, 0x53	; 83
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	10 82       	st	Z, r1
	OCR0=0;
    2904:	ec e5       	ldi	r30, 0x5C	; 92
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	10 82       	st	Z, r1
	TIMSK &= ~(1<<OCIE0);
    290a:	a9 e5       	ldi	r26, 0x59	; 89
    290c:	b0 e0       	ldi	r27, 0x00	; 0
    290e:	e9 e5       	ldi	r30, 0x59	; 89
    2910:	f0 e0       	ldi	r31, 0x00	; 0
    2912:	80 81       	ld	r24, Z
    2914:	8d 7f       	andi	r24, 0xFD	; 253
    2916:	8c 93       	st	X, r24
	TIMSK &= ~(1<<TOIE0);
    2918:	a9 e5       	ldi	r26, 0x59	; 89
    291a:	b0 e0       	ldi	r27, 0x00	; 0
    291c:	e9 e5       	ldi	r30, 0x59	; 89
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	80 81       	ld	r24, Z
    2922:	8e 7f       	andi	r24, 0xFE	; 254
    2924:	8c 93       	st	X, r24
}
    2926:	cf 91       	pop	r28
    2928:	df 91       	pop	r29
    292a:	08 95       	ret

0000292c <Timer1_DeInit>:


/*
 * Description: Function to stop Timer2 of AVR after done.
 */
void Timer1_DeInit(){
    292c:	df 93       	push	r29
    292e:	cf 93       	push	r28
    2930:	cd b7       	in	r28, 0x3d	; 61
    2932:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
    2934:	ef e4       	ldi	r30, 0x4F	; 79
    2936:	f0 e0       	ldi	r31, 0x00	; 0
    2938:	10 82       	st	Z, r1
	TCCR1B=0;
    293a:	ee e4       	ldi	r30, 0x4E	; 78
    293c:	f0 e0       	ldi	r31, 0x00	; 0
    293e:	10 82       	st	Z, r1
	OCR1A=0;
    2940:	ea e4       	ldi	r30, 0x4A	; 74
    2942:	f0 e0       	ldi	r31, 0x00	; 0
    2944:	11 82       	std	Z+1, r1	; 0x01
    2946:	10 82       	st	Z, r1
	TCNT1=0;
    2948:	ec e4       	ldi	r30, 0x4C	; 76
    294a:	f0 e0       	ldi	r31, 0x00	; 0
    294c:	11 82       	std	Z+1, r1	; 0x01
    294e:	10 82       	st	Z, r1
	TIMSK &= ~(1<<OCIE1A);
    2950:	a9 e5       	ldi	r26, 0x59	; 89
    2952:	b0 e0       	ldi	r27, 0x00	; 0
    2954:	e9 e5       	ldi	r30, 0x59	; 89
    2956:	f0 e0       	ldi	r31, 0x00	; 0
    2958:	80 81       	ld	r24, Z
    295a:	8f 7e       	andi	r24, 0xEF	; 239
    295c:	8c 93       	st	X, r24
	TIMSK &= ~(1<<TOIE1);
    295e:	a9 e5       	ldi	r26, 0x59	; 89
    2960:	b0 e0       	ldi	r27, 0x00	; 0
    2962:	e9 e5       	ldi	r30, 0x59	; 89
    2964:	f0 e0       	ldi	r31, 0x00	; 0
    2966:	80 81       	ld	r24, Z
    2968:	8b 7f       	andi	r24, 0xFB	; 251
    296a:	8c 93       	st	X, r24
}
    296c:	cf 91       	pop	r28
    296e:	df 91       	pop	r29
    2970:	08 95       	ret

00002972 <Timer2_DeInit>:


/*
 * Description: Function to stop Timer2 of AVR after done.
 */
void Timer2_DeInit(){
    2972:	df 93       	push	r29
    2974:	cf 93       	push	r28
    2976:	cd b7       	in	r28, 0x3d	; 61
    2978:	de b7       	in	r29, 0x3e	; 62
	TCCR2=0;
    297a:	e5 e4       	ldi	r30, 0x45	; 69
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	10 82       	st	Z, r1
	OCR2=0;
    2980:	e3 e4       	ldi	r30, 0x43	; 67
    2982:	f0 e0       	ldi	r31, 0x00	; 0
    2984:	10 82       	st	Z, r1
	TIMSK &= ~(1<<OCIE2);
    2986:	a9 e5       	ldi	r26, 0x59	; 89
    2988:	b0 e0       	ldi	r27, 0x00	; 0
    298a:	e9 e5       	ldi	r30, 0x59	; 89
    298c:	f0 e0       	ldi	r31, 0x00	; 0
    298e:	80 81       	ld	r24, Z
    2990:	8f 77       	andi	r24, 0x7F	; 127
    2992:	8c 93       	st	X, r24
	TIMSK &= ~(1<<TOIE2);
    2994:	a9 e5       	ldi	r26, 0x59	; 89
    2996:	b0 e0       	ldi	r27, 0x00	; 0
    2998:	e9 e5       	ldi	r30, 0x59	; 89
    299a:	f0 e0       	ldi	r31, 0x00	; 0
    299c:	80 81       	ld	r24, Z
    299e:	8f 7b       	andi	r24, 0xBF	; 191
    29a0:	8c 93       	st	X, r24
}
    29a2:	cf 91       	pop	r28
    29a4:	df 91       	pop	r29
    29a6:	08 95       	ret

000029a8 <Timer0_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer0_setCallBack(void(*a_ptr)(void))
{
    29a8:	df 93       	push	r29
    29aa:	cf 93       	push	r28
    29ac:	00 d0       	rcall	.+0      	; 0x29ae <Timer0_setCallBack+0x6>
    29ae:	cd b7       	in	r28, 0x3d	; 61
    29b0:	de b7       	in	r29, 0x3e	; 62
    29b2:	9a 83       	std	Y+2, r25	; 0x02
    29b4:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr0 = a_ptr;
    29b6:	89 81       	ldd	r24, Y+1	; 0x01
    29b8:	9a 81       	ldd	r25, Y+2	; 0x02
    29ba:	90 93 81 01 	sts	0x0181, r25
    29be:	80 93 80 01 	sts	0x0180, r24
}
    29c2:	0f 90       	pop	r0
    29c4:	0f 90       	pop	r0
    29c6:	cf 91       	pop	r28
    29c8:	df 91       	pop	r29
    29ca:	08 95       	ret

000029cc <Timer1_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    29cc:	df 93       	push	r29
    29ce:	cf 93       	push	r28
    29d0:	00 d0       	rcall	.+0      	; 0x29d2 <Timer1_setCallBack+0x6>
    29d2:	cd b7       	in	r28, 0x3d	; 61
    29d4:	de b7       	in	r29, 0x3e	; 62
    29d6:	9a 83       	std	Y+2, r25	; 0x02
    29d8:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr1 = a_ptr;
    29da:	89 81       	ldd	r24, Y+1	; 0x01
    29dc:	9a 81       	ldd	r25, Y+2	; 0x02
    29de:	90 93 83 01 	sts	0x0183, r25
    29e2:	80 93 82 01 	sts	0x0182, r24
}
    29e6:	0f 90       	pop	r0
    29e8:	0f 90       	pop	r0
    29ea:	cf 91       	pop	r28
    29ec:	df 91       	pop	r29
    29ee:	08 95       	ret

000029f0 <Timer2_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer2_setCallBack(void(*a_ptr)(void))
{
    29f0:	df 93       	push	r29
    29f2:	cf 93       	push	r28
    29f4:	00 d0       	rcall	.+0      	; 0x29f6 <Timer2_setCallBack+0x6>
    29f6:	cd b7       	in	r28, 0x3d	; 61
    29f8:	de b7       	in	r29, 0x3e	; 62
    29fa:	9a 83       	std	Y+2, r25	; 0x02
    29fc:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr2 = a_ptr;
    29fe:	89 81       	ldd	r24, Y+1	; 0x01
    2a00:	9a 81       	ldd	r25, Y+2	; 0x02
    2a02:	90 93 85 01 	sts	0x0185, r25
    2a06:	80 93 84 01 	sts	0x0184, r24
}
    2a0a:	0f 90       	pop	r0
    2a0c:	0f 90       	pop	r0
    2a0e:	cf 91       	pop	r28
    2a10:	df 91       	pop	r29
    2a12:	08 95       	ret

00002a14 <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const I2c_ConfigType * Config_Ptr)
{
    2a14:	df 93       	push	r29
    2a16:	cf 93       	push	r28
    2a18:	00 d0       	rcall	.+0      	; 0x2a1a <TWI_init+0x6>
    2a1a:	cd b7       	in	r28, 0x3d	; 61
    2a1c:	de b7       	in	r29, 0x3e	; 62
    2a1e:	9a 83       	std	Y+2, r25	; 0x02
    2a20:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = (Config_Ptr->bitRate);
    2a22:	a0 e2       	ldi	r26, 0x20	; 32
    2a24:	b0 e0       	ldi	r27, 0x00	; 0
    2a26:	e9 81       	ldd	r30, Y+1	; 0x01
    2a28:	fa 81       	ldd	r31, Y+2	; 0x02
    2a2a:	81 81       	ldd	r24, Z+1	; 0x01
    2a2c:	8c 93       	st	X, r24
	TWSR = 0x00;
    2a2e:	e1 e2       	ldi	r30, 0x21	; 33
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = (Config_Ptr->slaveAddress); // my address
    2a34:	a2 e2       	ldi	r26, 0x22	; 34
    2a36:	b0 e0       	ldi	r27, 0x00	; 0
    2a38:	e9 81       	ldd	r30, Y+1	; 0x01
    2a3a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a3c:	80 81       	ld	r24, Z
    2a3e:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    2a40:	e6 e5       	ldi	r30, 0x56	; 86
    2a42:	f0 e0       	ldi	r31, 0x00	; 0
    2a44:	84 e0       	ldi	r24, 0x04	; 4
    2a46:	80 83       	st	Z, r24
}
    2a48:	0f 90       	pop	r0
    2a4a:	0f 90       	pop	r0
    2a4c:	cf 91       	pop	r28
    2a4e:	df 91       	pop	r29
    2a50:	08 95       	ret

00002a52 <TWI_start>:

void TWI_start(void)
{
    2a52:	df 93       	push	r29
    2a54:	cf 93       	push	r28
    2a56:	cd b7       	in	r28, 0x3d	; 61
    2a58:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2a5a:	e6 e5       	ldi	r30, 0x56	; 86
    2a5c:	f0 e0       	ldi	r31, 0x00	; 0
    2a5e:	84 ea       	ldi	r24, 0xA4	; 164
    2a60:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2a62:	e6 e5       	ldi	r30, 0x56	; 86
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	80 81       	ld	r24, Z
    2a68:	88 23       	and	r24, r24
    2a6a:	dc f7       	brge	.-10     	; 0x2a62 <TWI_start+0x10>
}
    2a6c:	cf 91       	pop	r28
    2a6e:	df 91       	pop	r29
    2a70:	08 95       	ret

00002a72 <TWI_stop>:

void TWI_stop(void)
{
    2a72:	df 93       	push	r29
    2a74:	cf 93       	push	r28
    2a76:	cd b7       	in	r28, 0x3d	; 61
    2a78:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2a7a:	e6 e5       	ldi	r30, 0x56	; 86
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	84 e9       	ldi	r24, 0x94	; 148
    2a80:	80 83       	st	Z, r24
}
    2a82:	cf 91       	pop	r28
    2a84:	df 91       	pop	r29
    2a86:	08 95       	ret

00002a88 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2a88:	df 93       	push	r29
    2a8a:	cf 93       	push	r28
    2a8c:	0f 92       	push	r0
    2a8e:	cd b7       	in	r28, 0x3d	; 61
    2a90:	de b7       	in	r29, 0x3e	; 62
    2a92:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2a94:	e3 e2       	ldi	r30, 0x23	; 35
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	89 81       	ldd	r24, Y+1	; 0x01
    2a9a:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2a9c:	e6 e5       	ldi	r30, 0x56	; 86
    2a9e:	f0 e0       	ldi	r31, 0x00	; 0
    2aa0:	84 e8       	ldi	r24, 0x84	; 132
    2aa2:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2aa4:	e6 e5       	ldi	r30, 0x56	; 86
    2aa6:	f0 e0       	ldi	r31, 0x00	; 0
    2aa8:	80 81       	ld	r24, Z
    2aaa:	88 23       	and	r24, r24
    2aac:	dc f7       	brge	.-10     	; 0x2aa4 <TWI_writeByte+0x1c>
}
    2aae:	0f 90       	pop	r0
    2ab0:	cf 91       	pop	r28
    2ab2:	df 91       	pop	r29
    2ab4:	08 95       	ret

00002ab6 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2ab6:	df 93       	push	r29
    2ab8:	cf 93       	push	r28
    2aba:	cd b7       	in	r28, 0x3d	; 61
    2abc:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2abe:	e6 e5       	ldi	r30, 0x56	; 86
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	84 ec       	ldi	r24, 0xC4	; 196
    2ac4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2ac6:	e6 e5       	ldi	r30, 0x56	; 86
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	80 81       	ld	r24, Z
    2acc:	88 23       	and	r24, r24
    2ace:	dc f7       	brge	.-10     	; 0x2ac6 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2ad0:	e3 e2       	ldi	r30, 0x23	; 35
    2ad2:	f0 e0       	ldi	r31, 0x00	; 0
    2ad4:	80 81       	ld	r24, Z
}
    2ad6:	cf 91       	pop	r28
    2ad8:	df 91       	pop	r29
    2ada:	08 95       	ret

00002adc <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2adc:	df 93       	push	r29
    2ade:	cf 93       	push	r28
    2ae0:	cd b7       	in	r28, 0x3d	; 61
    2ae2:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2ae4:	e6 e5       	ldi	r30, 0x56	; 86
    2ae6:	f0 e0       	ldi	r31, 0x00	; 0
    2ae8:	84 e8       	ldi	r24, 0x84	; 132
    2aea:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2aec:	e6 e5       	ldi	r30, 0x56	; 86
    2aee:	f0 e0       	ldi	r31, 0x00	; 0
    2af0:	80 81       	ld	r24, Z
    2af2:	88 23       	and	r24, r24
    2af4:	dc f7       	brge	.-10     	; 0x2aec <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2af6:	e3 e2       	ldi	r30, 0x23	; 35
    2af8:	f0 e0       	ldi	r31, 0x00	; 0
    2afa:	80 81       	ld	r24, Z
}
    2afc:	cf 91       	pop	r28
    2afe:	df 91       	pop	r29
    2b00:	08 95       	ret

00002b02 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2b02:	df 93       	push	r29
    2b04:	cf 93       	push	r28
    2b06:	0f 92       	push	r0
    2b08:	cd b7       	in	r28, 0x3d	; 61
    2b0a:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2b0c:	e1 e2       	ldi	r30, 0x21	; 33
    2b0e:	f0 e0       	ldi	r31, 0x00	; 0
    2b10:	80 81       	ld	r24, Z
    2b12:	88 7f       	andi	r24, 0xF8	; 248
    2b14:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2b16:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b18:	0f 90       	pop	r0
    2b1a:	cf 91       	pop	r28
    2b1c:	df 91       	pop	r29
    2b1e:	08 95       	ret

00002b20 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_Config *Config_Ptr)
{
    2b20:	df 93       	push	r29
    2b22:	cf 93       	push	r28
    2b24:	00 d0       	rcall	.+0      	; 0x2b26 <UART_init+0x6>
    2b26:	00 d0       	rcall	.+0      	; 0x2b28 <UART_init+0x8>
    2b28:	cd b7       	in	r28, 0x3d	; 61
    2b2a:	de b7       	in	r29, 0x3e	; 62
    2b2c:	9c 83       	std	Y+4, r25	; 0x04
    2b2e:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2b30:	1a 82       	std	Y+2, r1	; 0x02
    2b32:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2b34:	eb e2       	ldi	r30, 0x2B	; 43
    2b36:	f0 e0       	ldi	r31, 0x00	; 0
    2b38:	82 e0       	ldi	r24, 0x02	; 2
    2b3a:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2b3c:	ea e2       	ldi	r30, 0x2A	; 42
    2b3e:	f0 e0       	ldi	r31, 0x00	; 0
    2b40:	88 e1       	ldi	r24, 0x18	; 24
    2b42:	80 83       	st	Z, r24
	 * UPM1:0  = entered value for (none-even-odd) parity bit
	 * USBS    = entered value for (1-2) stop bits
	 * UCSZ1:0 = entered value for (5-6-7-8) bit data-mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (Config_Ptr->parity) | (Config_Ptr->stop) | (Config_Ptr->size);
    2b44:	a0 e4       	ldi	r26, 0x40	; 64
    2b46:	b0 e0       	ldi	r27, 0x00	; 0
    2b48:	eb 81       	ldd	r30, Y+3	; 0x03
    2b4a:	fc 81       	ldd	r31, Y+4	; 0x04
    2b4c:	91 81       	ldd	r25, Z+1	; 0x01
    2b4e:	eb 81       	ldd	r30, Y+3	; 0x03
    2b50:	fc 81       	ldd	r31, Y+4	; 0x04
    2b52:	82 81       	ldd	r24, Z+2	; 0x02
    2b54:	98 2b       	or	r25, r24
    2b56:	eb 81       	ldd	r30, Y+3	; 0x03
    2b58:	fc 81       	ldd	r31, Y+4	; 0x04
    2b5a:	80 81       	ld	r24, Z
    2b5c:	89 2b       	or	r24, r25
    2b5e:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baudRate) * 8UL))) - 1);
    2b60:	eb 81       	ldd	r30, Y+3	; 0x03
    2b62:	fc 81       	ldd	r31, Y+4	; 0x04
    2b64:	83 81       	ldd	r24, Z+3	; 0x03
    2b66:	94 81       	ldd	r25, Z+4	; 0x04
    2b68:	a5 81       	ldd	r26, Z+5	; 0x05
    2b6a:	b6 81       	ldd	r27, Z+6	; 0x06
    2b6c:	88 0f       	add	r24, r24
    2b6e:	99 1f       	adc	r25, r25
    2b70:	aa 1f       	adc	r26, r26
    2b72:	bb 1f       	adc	r27, r27
    2b74:	88 0f       	add	r24, r24
    2b76:	99 1f       	adc	r25, r25
    2b78:	aa 1f       	adc	r26, r26
    2b7a:	bb 1f       	adc	r27, r27
    2b7c:	88 0f       	add	r24, r24
    2b7e:	99 1f       	adc	r25, r25
    2b80:	aa 1f       	adc	r26, r26
    2b82:	bb 1f       	adc	r27, r27
    2b84:	9c 01       	movw	r18, r24
    2b86:	ad 01       	movw	r20, r26
    2b88:	80 e0       	ldi	r24, 0x00	; 0
    2b8a:	92 e1       	ldi	r25, 0x12	; 18
    2b8c:	aa e7       	ldi	r26, 0x7A	; 122
    2b8e:	b0 e0       	ldi	r27, 0x00	; 0
    2b90:	bc 01       	movw	r22, r24
    2b92:	cd 01       	movw	r24, r26
    2b94:	0e 94 75 16 	call	0x2cea	; 0x2cea <__udivmodsi4>
    2b98:	da 01       	movw	r26, r20
    2b9a:	c9 01       	movw	r24, r18
    2b9c:	01 97       	sbiw	r24, 0x01	; 1
    2b9e:	9a 83       	std	Y+2, r25	; 0x02
    2ba0:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2ba2:	e0 e4       	ldi	r30, 0x40	; 64
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	89 81       	ldd	r24, Y+1	; 0x01
    2ba8:	9a 81       	ldd	r25, Y+2	; 0x02
    2baa:	89 2f       	mov	r24, r25
    2bac:	99 27       	eor	r25, r25
    2bae:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2bb0:	e9 e2       	ldi	r30, 0x29	; 41
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	89 81       	ldd	r24, Y+1	; 0x01
    2bb6:	80 83       	st	Z, r24
}
    2bb8:	0f 90       	pop	r0
    2bba:	0f 90       	pop	r0
    2bbc:	0f 90       	pop	r0
    2bbe:	0f 90       	pop	r0
    2bc0:	cf 91       	pop	r28
    2bc2:	df 91       	pop	r29
    2bc4:	08 95       	ret

00002bc6 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2bc6:	df 93       	push	r29
    2bc8:	cf 93       	push	r28
    2bca:	0f 92       	push	r0
    2bcc:	cd b7       	in	r28, 0x3d	; 61
    2bce:	de b7       	in	r29, 0x3e	; 62
    2bd0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2bd2:	eb e2       	ldi	r30, 0x2B	; 43
    2bd4:	f0 e0       	ldi	r31, 0x00	; 0
    2bd6:	80 81       	ld	r24, Z
    2bd8:	88 2f       	mov	r24, r24
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	80 72       	andi	r24, 0x20	; 32
    2bde:	90 70       	andi	r25, 0x00	; 0
    2be0:	00 97       	sbiw	r24, 0x00	; 0
    2be2:	b9 f3       	breq	.-18     	; 0x2bd2 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2be4:	ec e2       	ldi	r30, 0x2C	; 44
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	89 81       	ldd	r24, Y+1	; 0x01
    2bea:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2bec:	0f 90       	pop	r0
    2bee:	cf 91       	pop	r28
    2bf0:	df 91       	pop	r29
    2bf2:	08 95       	ret

00002bf4 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2bf4:	df 93       	push	r29
    2bf6:	cf 93       	push	r28
    2bf8:	cd b7       	in	r28, 0x3d	; 61
    2bfa:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2bfc:	eb e2       	ldi	r30, 0x2B	; 43
    2bfe:	f0 e0       	ldi	r31, 0x00	; 0
    2c00:	80 81       	ld	r24, Z
    2c02:	88 23       	and	r24, r24
    2c04:	dc f7       	brge	.-10     	; 0x2bfc <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    2c06:	ec e2       	ldi	r30, 0x2C	; 44
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	80 81       	ld	r24, Z
}
    2c0c:	cf 91       	pop	r28
    2c0e:	df 91       	pop	r29
    2c10:	08 95       	ret

00002c12 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2c12:	df 93       	push	r29
    2c14:	cf 93       	push	r28
    2c16:	00 d0       	rcall	.+0      	; 0x2c18 <UART_sendString+0x6>
    2c18:	0f 92       	push	r0
    2c1a:	cd b7       	in	r28, 0x3d	; 61
    2c1c:	de b7       	in	r29, 0x3e	; 62
    2c1e:	9b 83       	std	Y+3, r25	; 0x03
    2c20:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c22:	19 82       	std	Y+1, r1	; 0x01
    2c24:	0e c0       	rjmp	.+28     	; 0x2c42 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2c26:	89 81       	ldd	r24, Y+1	; 0x01
    2c28:	28 2f       	mov	r18, r24
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c30:	fc 01       	movw	r30, r24
    2c32:	e2 0f       	add	r30, r18
    2c34:	f3 1f       	adc	r31, r19
    2c36:	80 81       	ld	r24, Z
    2c38:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>
		i++;
    2c3c:	89 81       	ldd	r24, Y+1	; 0x01
    2c3e:	8f 5f       	subi	r24, 0xFF	; 255
    2c40:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2c42:	89 81       	ldd	r24, Y+1	; 0x01
    2c44:	28 2f       	mov	r18, r24
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c4c:	fc 01       	movw	r30, r24
    2c4e:	e2 0f       	add	r30, r18
    2c50:	f3 1f       	adc	r31, r19
    2c52:	80 81       	ld	r24, Z
    2c54:	88 23       	and	r24, r24
    2c56:	39 f7       	brne	.-50     	; 0x2c26 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    2c58:	0f 90       	pop	r0
    2c5a:	0f 90       	pop	r0
    2c5c:	0f 90       	pop	r0
    2c5e:	cf 91       	pop	r28
    2c60:	df 91       	pop	r29
    2c62:	08 95       	ret

00002c64 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2c64:	0f 93       	push	r16
    2c66:	1f 93       	push	r17
    2c68:	df 93       	push	r29
    2c6a:	cf 93       	push	r28
    2c6c:	00 d0       	rcall	.+0      	; 0x2c6e <UART_receiveString+0xa>
    2c6e:	0f 92       	push	r0
    2c70:	cd b7       	in	r28, 0x3d	; 61
    2c72:	de b7       	in	r29, 0x3e	; 62
    2c74:	9b 83       	std	Y+3, r25	; 0x03
    2c76:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c78:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2c7a:	89 81       	ldd	r24, Y+1	; 0x01
    2c7c:	28 2f       	mov	r18, r24
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	8a 81       	ldd	r24, Y+2	; 0x02
    2c82:	9b 81       	ldd	r25, Y+3	; 0x03
    2c84:	8c 01       	movw	r16, r24
    2c86:	02 0f       	add	r16, r18
    2c88:	13 1f       	adc	r17, r19
    2c8a:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <UART_recieveByte>
    2c8e:	f8 01       	movw	r30, r16
    2c90:	80 83       	st	Z, r24
    2c92:	0f c0       	rjmp	.+30     	; 0x2cb2 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2c94:	89 81       	ldd	r24, Y+1	; 0x01
    2c96:	8f 5f       	subi	r24, 0xFF	; 255
    2c98:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2c9a:	89 81       	ldd	r24, Y+1	; 0x01
    2c9c:	28 2f       	mov	r18, r24
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ca4:	8c 01       	movw	r16, r24
    2ca6:	02 0f       	add	r16, r18
    2ca8:	13 1f       	adc	r17, r19
    2caa:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <UART_recieveByte>
    2cae:	f8 01       	movw	r30, r16
    2cb0:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2cb2:	89 81       	ldd	r24, Y+1	; 0x01
    2cb4:	28 2f       	mov	r18, r24
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cba:	9b 81       	ldd	r25, Y+3	; 0x03
    2cbc:	fc 01       	movw	r30, r24
    2cbe:	e2 0f       	add	r30, r18
    2cc0:	f3 1f       	adc	r31, r19
    2cc2:	80 81       	ld	r24, Z
    2cc4:	83 32       	cpi	r24, 0x23	; 35
    2cc6:	31 f7       	brne	.-52     	; 0x2c94 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2cc8:	89 81       	ldd	r24, Y+1	; 0x01
    2cca:	28 2f       	mov	r18, r24
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd0:	9b 81       	ldd	r25, Y+3	; 0x03
    2cd2:	fc 01       	movw	r30, r24
    2cd4:	e2 0f       	add	r30, r18
    2cd6:	f3 1f       	adc	r31, r19
    2cd8:	10 82       	st	Z, r1
}
    2cda:	0f 90       	pop	r0
    2cdc:	0f 90       	pop	r0
    2cde:	0f 90       	pop	r0
    2ce0:	cf 91       	pop	r28
    2ce2:	df 91       	pop	r29
    2ce4:	1f 91       	pop	r17
    2ce6:	0f 91       	pop	r16
    2ce8:	08 95       	ret

00002cea <__udivmodsi4>:
    2cea:	a1 e2       	ldi	r26, 0x21	; 33
    2cec:	1a 2e       	mov	r1, r26
    2cee:	aa 1b       	sub	r26, r26
    2cf0:	bb 1b       	sub	r27, r27
    2cf2:	fd 01       	movw	r30, r26
    2cf4:	0d c0       	rjmp	.+26     	; 0x2d10 <__udivmodsi4_ep>

00002cf6 <__udivmodsi4_loop>:
    2cf6:	aa 1f       	adc	r26, r26
    2cf8:	bb 1f       	adc	r27, r27
    2cfa:	ee 1f       	adc	r30, r30
    2cfc:	ff 1f       	adc	r31, r31
    2cfe:	a2 17       	cp	r26, r18
    2d00:	b3 07       	cpc	r27, r19
    2d02:	e4 07       	cpc	r30, r20
    2d04:	f5 07       	cpc	r31, r21
    2d06:	20 f0       	brcs	.+8      	; 0x2d10 <__udivmodsi4_ep>
    2d08:	a2 1b       	sub	r26, r18
    2d0a:	b3 0b       	sbc	r27, r19
    2d0c:	e4 0b       	sbc	r30, r20
    2d0e:	f5 0b       	sbc	r31, r21

00002d10 <__udivmodsi4_ep>:
    2d10:	66 1f       	adc	r22, r22
    2d12:	77 1f       	adc	r23, r23
    2d14:	88 1f       	adc	r24, r24
    2d16:	99 1f       	adc	r25, r25
    2d18:	1a 94       	dec	r1
    2d1a:	69 f7       	brne	.-38     	; 0x2cf6 <__udivmodsi4_loop>
    2d1c:	60 95       	com	r22
    2d1e:	70 95       	com	r23
    2d20:	80 95       	com	r24
    2d22:	90 95       	com	r25
    2d24:	9b 01       	movw	r18, r22
    2d26:	ac 01       	movw	r20, r24
    2d28:	bd 01       	movw	r22, r26
    2d2a:	cf 01       	movw	r24, r30
    2d2c:	08 95       	ret

00002d2e <__prologue_saves__>:
    2d2e:	2f 92       	push	r2
    2d30:	3f 92       	push	r3
    2d32:	4f 92       	push	r4
    2d34:	5f 92       	push	r5
    2d36:	6f 92       	push	r6
    2d38:	7f 92       	push	r7
    2d3a:	8f 92       	push	r8
    2d3c:	9f 92       	push	r9
    2d3e:	af 92       	push	r10
    2d40:	bf 92       	push	r11
    2d42:	cf 92       	push	r12
    2d44:	df 92       	push	r13
    2d46:	ef 92       	push	r14
    2d48:	ff 92       	push	r15
    2d4a:	0f 93       	push	r16
    2d4c:	1f 93       	push	r17
    2d4e:	cf 93       	push	r28
    2d50:	df 93       	push	r29
    2d52:	cd b7       	in	r28, 0x3d	; 61
    2d54:	de b7       	in	r29, 0x3e	; 62
    2d56:	ca 1b       	sub	r28, r26
    2d58:	db 0b       	sbc	r29, r27
    2d5a:	0f b6       	in	r0, 0x3f	; 63
    2d5c:	f8 94       	cli
    2d5e:	de bf       	out	0x3e, r29	; 62
    2d60:	0f be       	out	0x3f, r0	; 63
    2d62:	cd bf       	out	0x3d, r28	; 61
    2d64:	09 94       	ijmp

00002d66 <__epilogue_restores__>:
    2d66:	2a 88       	ldd	r2, Y+18	; 0x12
    2d68:	39 88       	ldd	r3, Y+17	; 0x11
    2d6a:	48 88       	ldd	r4, Y+16	; 0x10
    2d6c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d6e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d70:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d72:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d74:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d76:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d78:	b9 84       	ldd	r11, Y+9	; 0x09
    2d7a:	c8 84       	ldd	r12, Y+8	; 0x08
    2d7c:	df 80       	ldd	r13, Y+7	; 0x07
    2d7e:	ee 80       	ldd	r14, Y+6	; 0x06
    2d80:	fd 80       	ldd	r15, Y+5	; 0x05
    2d82:	0c 81       	ldd	r16, Y+4	; 0x04
    2d84:	1b 81       	ldd	r17, Y+3	; 0x03
    2d86:	aa 81       	ldd	r26, Y+2	; 0x02
    2d88:	b9 81       	ldd	r27, Y+1	; 0x01
    2d8a:	ce 0f       	add	r28, r30
    2d8c:	d1 1d       	adc	r29, r1
    2d8e:	0f b6       	in	r0, 0x3f	; 63
    2d90:	f8 94       	cli
    2d92:	de bf       	out	0x3e, r29	; 62
    2d94:	0f be       	out	0x3f, r0	; 63
    2d96:	cd bf       	out	0x3d, r28	; 61
    2d98:	ed 01       	movw	r28, r26
    2d9a:	08 95       	ret

00002d9c <_exit>:
    2d9c:	f8 94       	cli

00002d9e <__stop_program>:
    2d9e:	ff cf       	rjmp	.-2      	; 0x2d9e <__stop_program>
