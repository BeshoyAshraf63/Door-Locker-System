
Beshoy_Ashraf_Final_Project_ECLIPSE_HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d0  00800060  000033da  0000346e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  00800130  00800130  0000353e  2**0
                  ALLOC
  3 .stab         000030a8  00000000  00000000  00003540  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000180a  00000000  00000000  000065e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007f32  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000080a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000abd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b984  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bd71  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c53f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 8f 16 	jmp	0x2d1e	; 0x2d1e <__vector_3>
      10:	0c 94 5c 16 	jmp	0x2cb8	; 0x2cb8 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 29 16 	jmp	0x2c52	; 0x2c52 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 f6 15 	jmp	0x2bec	; 0x2bec <__vector_8>
      24:	0c 94 90 15 	jmp	0x2b20	; 0x2b20 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 33       	cpi	r26, 0x30	; 48
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e3       	ldi	r26, 0x30	; 48
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 34       	cpi	r26, 0x4B	; 75
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 08 09 	call	0x1210	; 0x1210 <main>
      8a:	0c 94 eb 19 	jmp	0x33d6	; 0x33d6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e1       	ldi	r26, 0x1C	; 28
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8b 19 	jmp	0x3316	; 0x3316 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 97 19 	jmp	0x332e	; 0x332e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 97 19 	jmp	0x332e	; 0x332e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8c e1       	ldi	r24, 0x1C	; 28
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8b 19 	jmp	0x3316	; 0x3316 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 97 19 	jmp	0x332e	; 0x332e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 97 19 	jmp	0x332e	; 0x332e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 97 19 	jmp	0x332e	; 0x332e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 7f 19 	jmp	0x32fe	; 0x32fe <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 9b 19 	jmp	0x3336	; 0x3336 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <getUserNewPassword>:
 * Takes the New password from user in case of first time of by choice of user.
 * Saves the two password inside two global arrays.
 * Inputs: None.
 * Outputs: None.
 */
void getUserNewPassword(void){
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	ab 97       	sbiw	r28, 0x2b	; 43
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	LCD_clearScreen();
     b5e:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Enter new pass!");
     b62:	20 e6       	ldi	r18, 0x60	; 96
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	a9 01       	movw	r20, r18
     b6c:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	0e 94 08 15 	call	0x2a10	; 0x2a10 <LCD_moveCursor>
	for(i=0;i<PasswordSize;i++)
     b78:	1b a6       	std	Y+43, r1	; 0x2b
     b7a:	81 c0       	rjmp	.+258    	; 0xc7e <getUserNewPassword+0x138>
	{
		password1[i]=KEYPAD_getPressedKey();
     b7c:	8b a5       	ldd	r24, Y+43	; 0x2b
     b7e:	08 2f       	mov	r16, r24
     b80:	10 e0       	ldi	r17, 0x00	; 0
     b82:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <KEYPAD_getPressedKey>
     b86:	f8 01       	movw	r30, r16
     b88:	e0 5c       	subi	r30, 0xC0	; 192
     b8a:	fe 4f       	sbci	r31, 0xFE	; 254
     b8c:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
     b8e:	8a e2       	ldi	r24, 0x2A	; 42
     b90:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <LCD_displayCharacter>
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	af ea       	ldi	r26, 0xAF	; 175
     b9a:	b3 e4       	ldi	r27, 0x43	; 67
     b9c:	8f a3       	std	Y+39, r24	; 0x27
     b9e:	98 a7       	std	Y+40, r25	; 0x28
     ba0:	a9 a7       	std	Y+41, r26	; 0x29
     ba2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ba4:	6f a1       	ldd	r22, Y+39	; 0x27
     ba6:	78 a5       	ldd	r23, Y+40	; 0x28
     ba8:	89 a5       	ldd	r24, Y+41	; 0x29
     baa:	9a a5       	ldd	r25, Y+42	; 0x2a
     bac:	20 e0       	ldi	r18, 0x00	; 0
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	4a ef       	ldi	r20, 0xFA	; 250
     bb2:	54 e4       	ldi	r21, 0x44	; 68
     bb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bb8:	dc 01       	movw	r26, r24
     bba:	cb 01       	movw	r24, r22
     bbc:	8b a3       	std	Y+35, r24	; 0x23
     bbe:	9c a3       	std	Y+36, r25	; 0x24
     bc0:	ad a3       	std	Y+37, r26	; 0x25
     bc2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     bc4:	6b a1       	ldd	r22, Y+35	; 0x23
     bc6:	7c a1       	ldd	r23, Y+36	; 0x24
     bc8:	8d a1       	ldd	r24, Y+37	; 0x25
     bca:	9e a1       	ldd	r25, Y+38	; 0x26
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	40 e8       	ldi	r20, 0x80	; 128
     bd2:	5f e3       	ldi	r21, 0x3F	; 63
     bd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bd8:	88 23       	and	r24, r24
     bda:	2c f4       	brge	.+10     	; 0xbe6 <getUserNewPassword+0xa0>
		__ticks = 1;
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	9a a3       	std	Y+34, r25	; 0x22
     be2:	89 a3       	std	Y+33, r24	; 0x21
     be4:	3f c0       	rjmp	.+126    	; 0xc64 <getUserNewPassword+0x11e>
	else if (__tmp > 65535)
     be6:	6b a1       	ldd	r22, Y+35	; 0x23
     be8:	7c a1       	ldd	r23, Y+36	; 0x24
     bea:	8d a1       	ldd	r24, Y+37	; 0x25
     bec:	9e a1       	ldd	r25, Y+38	; 0x26
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	3f ef       	ldi	r19, 0xFF	; 255
     bf2:	4f e7       	ldi	r20, 0x7F	; 127
     bf4:	57 e4       	ldi	r21, 0x47	; 71
     bf6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bfa:	18 16       	cp	r1, r24
     bfc:	4c f5       	brge	.+82     	; 0xc50 <getUserNewPassword+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bfe:	6f a1       	ldd	r22, Y+39	; 0x27
     c00:	78 a5       	ldd	r23, Y+40	; 0x28
     c02:	89 a5       	ldd	r24, Y+41	; 0x29
     c04:	9a a5       	ldd	r25, Y+42	; 0x2a
     c06:	20 e0       	ldi	r18, 0x00	; 0
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	40 e2       	ldi	r20, 0x20	; 32
     c0c:	51 e4       	ldi	r21, 0x41	; 65
     c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c12:	dc 01       	movw	r26, r24
     c14:	cb 01       	movw	r24, r22
     c16:	bc 01       	movw	r22, r24
     c18:	cd 01       	movw	r24, r26
     c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c1e:	dc 01       	movw	r26, r24
     c20:	cb 01       	movw	r24, r22
     c22:	9a a3       	std	Y+34, r25	; 0x22
     c24:	89 a3       	std	Y+33, r24	; 0x21
     c26:	0f c0       	rjmp	.+30     	; 0xc46 <getUserNewPassword+0x100>
     c28:	88 ec       	ldi	r24, 0xC8	; 200
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	98 a3       	std	Y+32, r25	; 0x20
     c2e:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c30:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c32:	98 a1       	ldd	r25, Y+32	; 0x20
     c34:	01 97       	sbiw	r24, 0x01	; 1
     c36:	f1 f7       	brne	.-4      	; 0xc34 <getUserNewPassword+0xee>
     c38:	98 a3       	std	Y+32, r25	; 0x20
     c3a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c3c:	89 a1       	ldd	r24, Y+33	; 0x21
     c3e:	9a a1       	ldd	r25, Y+34	; 0x22
     c40:	01 97       	sbiw	r24, 0x01	; 1
     c42:	9a a3       	std	Y+34, r25	; 0x22
     c44:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c46:	89 a1       	ldd	r24, Y+33	; 0x21
     c48:	9a a1       	ldd	r25, Y+34	; 0x22
     c4a:	00 97       	sbiw	r24, 0x00	; 0
     c4c:	69 f7       	brne	.-38     	; 0xc28 <getUserNewPassword+0xe2>
     c4e:	14 c0       	rjmp	.+40     	; 0xc78 <getUserNewPassword+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c50:	6b a1       	ldd	r22, Y+35	; 0x23
     c52:	7c a1       	ldd	r23, Y+36	; 0x24
     c54:	8d a1       	ldd	r24, Y+37	; 0x25
     c56:	9e a1       	ldd	r25, Y+38	; 0x26
     c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c5c:	dc 01       	movw	r26, r24
     c5e:	cb 01       	movw	r24, r22
     c60:	9a a3       	std	Y+34, r25	; 0x22
     c62:	89 a3       	std	Y+33, r24	; 0x21
     c64:	89 a1       	ldd	r24, Y+33	; 0x21
     c66:	9a a1       	ldd	r25, Y+34	; 0x22
     c68:	9e 8f       	std	Y+30, r25	; 0x1e
     c6a:	8d 8f       	std	Y+29, r24	; 0x1d
     c6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c6e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c70:	01 97       	sbiw	r24, 0x01	; 1
     c72:	f1 f7       	brne	.-4      	; 0xc70 <getUserNewPassword+0x12a>
     c74:	9e 8f       	std	Y+30, r25	; 0x1e
     c76:	8d 8f       	std	Y+29, r24	; 0x1d
void getUserNewPassword(void){
	uint8 i;
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Enter new pass!");
	LCD_moveCursor(1,0);
	for(i=0;i<PasswordSize;i++)
     c78:	8b a5       	ldd	r24, Y+43	; 0x2b
     c7a:	8f 5f       	subi	r24, 0xFF	; 255
     c7c:	8b a7       	std	Y+43, r24	; 0x2b
     c7e:	8b a5       	ldd	r24, Y+43	; 0x2b
     c80:	85 30       	cpi	r24, 0x05	; 5
     c82:	08 f4       	brcc	.+2      	; 0xc86 <getUserNewPassword+0x140>
     c84:	7b cf       	rjmp	.-266    	; 0xb7c <getUserNewPassword+0x36>
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	af ea       	ldi	r26, 0xAF	; 175
     c8c:	b3 e4       	ldi	r27, 0x43	; 67
     c8e:	89 8f       	std	Y+25, r24	; 0x19
     c90:	9a 8f       	std	Y+26, r25	; 0x1a
     c92:	ab 8f       	std	Y+27, r26	; 0x1b
     c94:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c96:	69 8d       	ldd	r22, Y+25	; 0x19
     c98:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c9e:	20 e0       	ldi	r18, 0x00	; 0
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	4a ef       	ldi	r20, 0xFA	; 250
     ca4:	54 e4       	ldi	r21, 0x44	; 68
     ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     caa:	dc 01       	movw	r26, r24
     cac:	cb 01       	movw	r24, r22
     cae:	8d 8b       	std	Y+21, r24	; 0x15
     cb0:	9e 8b       	std	Y+22, r25	; 0x16
     cb2:	af 8b       	std	Y+23, r26	; 0x17
     cb4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     cb6:	6d 89       	ldd	r22, Y+21	; 0x15
     cb8:	7e 89       	ldd	r23, Y+22	; 0x16
     cba:	8f 89       	ldd	r24, Y+23	; 0x17
     cbc:	98 8d       	ldd	r25, Y+24	; 0x18
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	40 e8       	ldi	r20, 0x80	; 128
     cc4:	5f e3       	ldi	r21, 0x3F	; 63
     cc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cca:	88 23       	and	r24, r24
     ccc:	2c f4       	brge	.+10     	; 0xcd8 <getUserNewPassword+0x192>
		__ticks = 1;
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	9c 8b       	std	Y+20, r25	; 0x14
     cd4:	8b 8b       	std	Y+19, r24	; 0x13
     cd6:	3f c0       	rjmp	.+126    	; 0xd56 <getUserNewPassword+0x210>
	else if (__tmp > 65535)
     cd8:	6d 89       	ldd	r22, Y+21	; 0x15
     cda:	7e 89       	ldd	r23, Y+22	; 0x16
     cdc:	8f 89       	ldd	r24, Y+23	; 0x17
     cde:	98 8d       	ldd	r25, Y+24	; 0x18
     ce0:	20 e0       	ldi	r18, 0x00	; 0
     ce2:	3f ef       	ldi	r19, 0xFF	; 255
     ce4:	4f e7       	ldi	r20, 0x7F	; 127
     ce6:	57 e4       	ldi	r21, 0x47	; 71
     ce8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cec:	18 16       	cp	r1, r24
     cee:	4c f5       	brge	.+82     	; 0xd42 <getUserNewPassword+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cf0:	69 8d       	ldd	r22, Y+25	; 0x19
     cf2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cf4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cf6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	40 e2       	ldi	r20, 0x20	; 32
     cfe:	51 e4       	ldi	r21, 0x41	; 65
     d00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d04:	dc 01       	movw	r26, r24
     d06:	cb 01       	movw	r24, r22
     d08:	bc 01       	movw	r22, r24
     d0a:	cd 01       	movw	r24, r26
     d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d10:	dc 01       	movw	r26, r24
     d12:	cb 01       	movw	r24, r22
     d14:	9c 8b       	std	Y+20, r25	; 0x14
     d16:	8b 8b       	std	Y+19, r24	; 0x13
     d18:	0f c0       	rjmp	.+30     	; 0xd38 <getUserNewPassword+0x1f2>
     d1a:	88 ec       	ldi	r24, 0xC8	; 200
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	9a 8b       	std	Y+18, r25	; 0x12
     d20:	89 8b       	std	Y+17, r24	; 0x11
     d22:	89 89       	ldd	r24, Y+17	; 0x11
     d24:	9a 89       	ldd	r25, Y+18	; 0x12
     d26:	01 97       	sbiw	r24, 0x01	; 1
     d28:	f1 f7       	brne	.-4      	; 0xd26 <getUserNewPassword+0x1e0>
     d2a:	9a 8b       	std	Y+18, r25	; 0x12
     d2c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d2e:	8b 89       	ldd	r24, Y+19	; 0x13
     d30:	9c 89       	ldd	r25, Y+20	; 0x14
     d32:	01 97       	sbiw	r24, 0x01	; 1
     d34:	9c 8b       	std	Y+20, r25	; 0x14
     d36:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d38:	8b 89       	ldd	r24, Y+19	; 0x13
     d3a:	9c 89       	ldd	r25, Y+20	; 0x14
     d3c:	00 97       	sbiw	r24, 0x00	; 0
     d3e:	69 f7       	brne	.-38     	; 0xd1a <getUserNewPassword+0x1d4>
     d40:	14 c0       	rjmp	.+40     	; 0xd6a <getUserNewPassword+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d42:	6d 89       	ldd	r22, Y+21	; 0x15
     d44:	7e 89       	ldd	r23, Y+22	; 0x16
     d46:	8f 89       	ldd	r24, Y+23	; 0x17
     d48:	98 8d       	ldd	r25, Y+24	; 0x18
     d4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d4e:	dc 01       	movw	r26, r24
     d50:	cb 01       	movw	r24, r22
     d52:	9c 8b       	std	Y+20, r25	; 0x14
     d54:	8b 8b       	std	Y+19, r24	; 0x13
     d56:	8b 89       	ldd	r24, Y+19	; 0x13
     d58:	9c 89       	ldd	r25, Y+20	; 0x14
     d5a:	98 8b       	std	Y+16, r25	; 0x10
     d5c:	8f 87       	std	Y+15, r24	; 0x0f
     d5e:	8f 85       	ldd	r24, Y+15	; 0x0f
     d60:	98 89       	ldd	r25, Y+16	; 0x10
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	f1 f7       	brne	.-4      	; 0xd62 <getUserNewPassword+0x21c>
     d66:	98 8b       	std	Y+16, r25	; 0x10
     d68:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(350);
	}

	_delay_ms(350);

	LCD_clearScreen();
     d6a:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Renter new pass!");
     d6e:	20 e7       	ldi	r18, 0x70	; 112
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	a9 01       	movw	r20, r18
     d78:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	60 e0       	ldi	r22, 0x00	; 0
     d80:	0e 94 08 15 	call	0x2a10	; 0x2a10 <LCD_moveCursor>
	for(i=0;i<PasswordSize;i++)
     d84:	1b a6       	std	Y+43, r1	; 0x2b
     d86:	81 c0       	rjmp	.+258    	; 0xe8a <getUserNewPassword+0x344>
	{
		password2[i]=KEYPAD_getPressedKey();
     d88:	8b a5       	ldd	r24, Y+43	; 0x2b
     d8a:	08 2f       	mov	r16, r24
     d8c:	10 e0       	ldi	r17, 0x00	; 0
     d8e:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <KEYPAD_getPressedKey>
     d92:	f8 01       	movw	r30, r16
     d94:	e5 5c       	subi	r30, 0xC5	; 197
     d96:	fe 4f       	sbci	r31, 0xFE	; 254
     d98:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
     d9a:	8a e2       	ldi	r24, 0x2A	; 42
     d9c:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <LCD_displayCharacter>
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	af ea       	ldi	r26, 0xAF	; 175
     da6:	b3 e4       	ldi	r27, 0x43	; 67
     da8:	8b 87       	std	Y+11, r24	; 0x0b
     daa:	9c 87       	std	Y+12, r25	; 0x0c
     dac:	ad 87       	std	Y+13, r26	; 0x0d
     dae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     db0:	6b 85       	ldd	r22, Y+11	; 0x0b
     db2:	7c 85       	ldd	r23, Y+12	; 0x0c
     db4:	8d 85       	ldd	r24, Y+13	; 0x0d
     db6:	9e 85       	ldd	r25, Y+14	; 0x0e
     db8:	20 e0       	ldi	r18, 0x00	; 0
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	4a ef       	ldi	r20, 0xFA	; 250
     dbe:	54 e4       	ldi	r21, 0x44	; 68
     dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc4:	dc 01       	movw	r26, r24
     dc6:	cb 01       	movw	r24, r22
     dc8:	8f 83       	std	Y+7, r24	; 0x07
     dca:	98 87       	std	Y+8, r25	; 0x08
     dcc:	a9 87       	std	Y+9, r26	; 0x09
     dce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dd0:	6f 81       	ldd	r22, Y+7	; 0x07
     dd2:	78 85       	ldd	r23, Y+8	; 0x08
     dd4:	89 85       	ldd	r24, Y+9	; 0x09
     dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd8:	20 e0       	ldi	r18, 0x00	; 0
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	40 e8       	ldi	r20, 0x80	; 128
     dde:	5f e3       	ldi	r21, 0x3F	; 63
     de0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     de4:	88 23       	and	r24, r24
     de6:	2c f4       	brge	.+10     	; 0xdf2 <getUserNewPassword+0x2ac>
		__ticks = 1;
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	9e 83       	std	Y+6, r25	; 0x06
     dee:	8d 83       	std	Y+5, r24	; 0x05
     df0:	3f c0       	rjmp	.+126    	; 0xe70 <getUserNewPassword+0x32a>
	else if (__tmp > 65535)
     df2:	6f 81       	ldd	r22, Y+7	; 0x07
     df4:	78 85       	ldd	r23, Y+8	; 0x08
     df6:	89 85       	ldd	r24, Y+9	; 0x09
     df8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	3f ef       	ldi	r19, 0xFF	; 255
     dfe:	4f e7       	ldi	r20, 0x7F	; 127
     e00:	57 e4       	ldi	r21, 0x47	; 71
     e02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e06:	18 16       	cp	r1, r24
     e08:	4c f5       	brge	.+82     	; 0xe5c <getUserNewPassword+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e0a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e0c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e0e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e10:	9e 85       	ldd	r25, Y+14	; 0x0e
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	40 e2       	ldi	r20, 0x20	; 32
     e18:	51 e4       	ldi	r21, 0x41	; 65
     e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e1e:	dc 01       	movw	r26, r24
     e20:	cb 01       	movw	r24, r22
     e22:	bc 01       	movw	r22, r24
     e24:	cd 01       	movw	r24, r26
     e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e2a:	dc 01       	movw	r26, r24
     e2c:	cb 01       	movw	r24, r22
     e2e:	9e 83       	std	Y+6, r25	; 0x06
     e30:	8d 83       	std	Y+5, r24	; 0x05
     e32:	0f c0       	rjmp	.+30     	; 0xe52 <getUserNewPassword+0x30c>
     e34:	88 ec       	ldi	r24, 0xC8	; 200
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	9c 83       	std	Y+4, r25	; 0x04
     e3a:	8b 83       	std	Y+3, r24	; 0x03
     e3c:	8b 81       	ldd	r24, Y+3	; 0x03
     e3e:	9c 81       	ldd	r25, Y+4	; 0x04
     e40:	01 97       	sbiw	r24, 0x01	; 1
     e42:	f1 f7       	brne	.-4      	; 0xe40 <getUserNewPassword+0x2fa>
     e44:	9c 83       	std	Y+4, r25	; 0x04
     e46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e48:	8d 81       	ldd	r24, Y+5	; 0x05
     e4a:	9e 81       	ldd	r25, Y+6	; 0x06
     e4c:	01 97       	sbiw	r24, 0x01	; 1
     e4e:	9e 83       	std	Y+6, r25	; 0x06
     e50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e52:	8d 81       	ldd	r24, Y+5	; 0x05
     e54:	9e 81       	ldd	r25, Y+6	; 0x06
     e56:	00 97       	sbiw	r24, 0x00	; 0
     e58:	69 f7       	brne	.-38     	; 0xe34 <getUserNewPassword+0x2ee>
     e5a:	14 c0       	rjmp	.+40     	; 0xe84 <getUserNewPassword+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e5c:	6f 81       	ldd	r22, Y+7	; 0x07
     e5e:	78 85       	ldd	r23, Y+8	; 0x08
     e60:	89 85       	ldd	r24, Y+9	; 0x09
     e62:	9a 85       	ldd	r25, Y+10	; 0x0a
     e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e68:	dc 01       	movw	r26, r24
     e6a:	cb 01       	movw	r24, r22
     e6c:	9e 83       	std	Y+6, r25	; 0x06
     e6e:	8d 83       	std	Y+5, r24	; 0x05
     e70:	8d 81       	ldd	r24, Y+5	; 0x05
     e72:	9e 81       	ldd	r25, Y+6	; 0x06
     e74:	9a 83       	std	Y+2, r25	; 0x02
     e76:	89 83       	std	Y+1, r24	; 0x01
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	9a 81       	ldd	r25, Y+2	; 0x02
     e7c:	01 97       	sbiw	r24, 0x01	; 1
     e7e:	f1 f7       	brne	.-4      	; 0xe7c <getUserNewPassword+0x336>
     e80:	9a 83       	std	Y+2, r25	; 0x02
     e82:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(350);

	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Renter new pass!");
	LCD_moveCursor(1,0);
	for(i=0;i<PasswordSize;i++)
     e84:	8b a5       	ldd	r24, Y+43	; 0x2b
     e86:	8f 5f       	subi	r24, 0xFF	; 255
     e88:	8b a7       	std	Y+43, r24	; 0x2b
     e8a:	8b a5       	ldd	r24, Y+43	; 0x2b
     e8c:	85 30       	cpi	r24, 0x05	; 5
     e8e:	08 f4       	brcc	.+2      	; 0xe92 <getUserNewPassword+0x34c>
     e90:	7b cf       	rjmp	.-266    	; 0xd88 <getUserNewPassword+0x242>
		LCD_displayCharacter('*');
		_delay_ms(350);
	}


}
     e92:	ab 96       	adiw	r28, 0x2b	; 43
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	f8 94       	cli
     e98:	de bf       	out	0x3e, r29	; 62
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	cd bf       	out	0x3d, r28	; 61
     e9e:	cf 91       	pop	r28
     ea0:	df 91       	pop	r29
     ea2:	1f 91       	pop	r17
     ea4:	0f 91       	pop	r16
     ea6:	08 95       	ret

00000ea8 <requestPassword>:
 * Takes the password from user in case of openDoor/ChangePassword scenarios.
 * Save it inside a global array.
 * Inputs: None.
 * Outputs: None.
 */
void requestPassword(void){
     ea8:	0f 93       	push	r16
     eaa:	1f 93       	push	r17
     eac:	df 93       	push	r29
     eae:	cf 93       	push	r28
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	2f 97       	sbiw	r28, 0x0f	; 15
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	LCD_clearScreen();
     ec0:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Enter old pass!");
     ec4:	21 e8       	ldi	r18, 0x81	; 129
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	60 e0       	ldi	r22, 0x00	; 0
     ecc:	a9 01       	movw	r20, r18
     ece:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	60 e0       	ldi	r22, 0x00	; 0
     ed6:	0e 94 08 15 	call	0x2a10	; 0x2a10 <LCD_moveCursor>
	for(i=0;i<PasswordSize;i++)
     eda:	1f 86       	std	Y+15, r1	; 0x0f
     edc:	81 c0       	rjmp	.+258    	; 0xfe0 <requestPassword+0x138>
	{
		password3[i]=KEYPAD_getPressedKey();
     ede:	8f 85       	ldd	r24, Y+15	; 0x0f
     ee0:	08 2f       	mov	r16, r24
     ee2:	10 e0       	ldi	r17, 0x00	; 0
     ee4:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <KEYPAD_getPressedKey>
     ee8:	f8 01       	movw	r30, r16
     eea:	ea 5b       	subi	r30, 0xBA	; 186
     eec:	fe 4f       	sbci	r31, 0xFE	; 254
     eee:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
     ef0:	8a e2       	ldi	r24, 0x2A	; 42
     ef2:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <LCD_displayCharacter>
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	af ea       	ldi	r26, 0xAF	; 175
     efc:	b3 e4       	ldi	r27, 0x43	; 67
     efe:	8b 87       	std	Y+11, r24	; 0x0b
     f00:	9c 87       	std	Y+12, r25	; 0x0c
     f02:	ad 87       	std	Y+13, r26	; 0x0d
     f04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f06:	6b 85       	ldd	r22, Y+11	; 0x0b
     f08:	7c 85       	ldd	r23, Y+12	; 0x0c
     f0a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f0c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	4a ef       	ldi	r20, 0xFA	; 250
     f14:	54 e4       	ldi	r21, 0x44	; 68
     f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	8f 83       	std	Y+7, r24	; 0x07
     f20:	98 87       	std	Y+8, r25	; 0x08
     f22:	a9 87       	std	Y+9, r26	; 0x09
     f24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f26:	6f 81       	ldd	r22, Y+7	; 0x07
     f28:	78 85       	ldd	r23, Y+8	; 0x08
     f2a:	89 85       	ldd	r24, Y+9	; 0x09
     f2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	40 e8       	ldi	r20, 0x80	; 128
     f34:	5f e3       	ldi	r21, 0x3F	; 63
     f36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f3a:	88 23       	and	r24, r24
     f3c:	2c f4       	brge	.+10     	; 0xf48 <requestPassword+0xa0>
		__ticks = 1;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	9e 83       	std	Y+6, r25	; 0x06
     f44:	8d 83       	std	Y+5, r24	; 0x05
     f46:	3f c0       	rjmp	.+126    	; 0xfc6 <requestPassword+0x11e>
	else if (__tmp > 65535)
     f48:	6f 81       	ldd	r22, Y+7	; 0x07
     f4a:	78 85       	ldd	r23, Y+8	; 0x08
     f4c:	89 85       	ldd	r24, Y+9	; 0x09
     f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	3f ef       	ldi	r19, 0xFF	; 255
     f54:	4f e7       	ldi	r20, 0x7F	; 127
     f56:	57 e4       	ldi	r21, 0x47	; 71
     f58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f5c:	18 16       	cp	r1, r24
     f5e:	4c f5       	brge	.+82     	; 0xfb2 <requestPassword+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f60:	6b 85       	ldd	r22, Y+11	; 0x0b
     f62:	7c 85       	ldd	r23, Y+12	; 0x0c
     f64:	8d 85       	ldd	r24, Y+13	; 0x0d
     f66:	9e 85       	ldd	r25, Y+14	; 0x0e
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	40 e2       	ldi	r20, 0x20	; 32
     f6e:	51 e4       	ldi	r21, 0x41	; 65
     f70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	bc 01       	movw	r22, r24
     f7a:	cd 01       	movw	r24, r26
     f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	9e 83       	std	Y+6, r25	; 0x06
     f86:	8d 83       	std	Y+5, r24	; 0x05
     f88:	0f c0       	rjmp	.+30     	; 0xfa8 <requestPassword+0x100>
     f8a:	88 ec       	ldi	r24, 0xC8	; 200
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	9c 83       	std	Y+4, r25	; 0x04
     f90:	8b 83       	std	Y+3, r24	; 0x03
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	9c 81       	ldd	r25, Y+4	; 0x04
     f96:	01 97       	sbiw	r24, 0x01	; 1
     f98:	f1 f7       	brne	.-4      	; 0xf96 <requestPassword+0xee>
     f9a:	9c 83       	std	Y+4, r25	; 0x04
     f9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f9e:	8d 81       	ldd	r24, Y+5	; 0x05
     fa0:	9e 81       	ldd	r25, Y+6	; 0x06
     fa2:	01 97       	sbiw	r24, 0x01	; 1
     fa4:	9e 83       	std	Y+6, r25	; 0x06
     fa6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa8:	8d 81       	ldd	r24, Y+5	; 0x05
     faa:	9e 81       	ldd	r25, Y+6	; 0x06
     fac:	00 97       	sbiw	r24, 0x00	; 0
     fae:	69 f7       	brne	.-38     	; 0xf8a <requestPassword+0xe2>
     fb0:	14 c0       	rjmp	.+40     	; 0xfda <requestPassword+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb2:	6f 81       	ldd	r22, Y+7	; 0x07
     fb4:	78 85       	ldd	r23, Y+8	; 0x08
     fb6:	89 85       	ldd	r24, Y+9	; 0x09
     fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fbe:	dc 01       	movw	r26, r24
     fc0:	cb 01       	movw	r24, r22
     fc2:	9e 83       	std	Y+6, r25	; 0x06
     fc4:	8d 83       	std	Y+5, r24	; 0x05
     fc6:	8d 81       	ldd	r24, Y+5	; 0x05
     fc8:	9e 81       	ldd	r25, Y+6	; 0x06
     fca:	9a 83       	std	Y+2, r25	; 0x02
     fcc:	89 83       	std	Y+1, r24	; 0x01
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	9a 81       	ldd	r25, Y+2	; 0x02
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	f1 f7       	brne	.-4      	; 0xfd2 <requestPassword+0x12a>
     fd6:	9a 83       	std	Y+2, r25	; 0x02
     fd8:	89 83       	std	Y+1, r24	; 0x01
void requestPassword(void){
	uint8 i;
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Enter old pass!");
	LCD_moveCursor(1,0);
	for(i=0;i<PasswordSize;i++)
     fda:	8f 85       	ldd	r24, Y+15	; 0x0f
     fdc:	8f 5f       	subi	r24, 0xFF	; 255
     fde:	8f 87       	std	Y+15, r24	; 0x0f
     fe0:	8f 85       	ldd	r24, Y+15	; 0x0f
     fe2:	85 30       	cpi	r24, 0x05	; 5
     fe4:	08 f4       	brcc	.+2      	; 0xfe8 <requestPassword+0x140>
     fe6:	7b cf       	rjmp	.-266    	; 0xede <requestPassword+0x36>
	{
		password3[i]=KEYPAD_getPressedKey();
		LCD_displayCharacter('*');
		_delay_ms(350);
	}
}
     fe8:	2f 96       	adiw	r28, 0x0f	; 15
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	f8 94       	cli
     fee:	de bf       	out	0x3e, r29	; 62
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	cd bf       	out	0x3d, r28	; 61
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	1f 91       	pop	r17
     ffa:	0f 91       	pop	r16
     ffc:	08 95       	ret

00000ffe <sendRequestedPassword>:
 * Sends the two password entered by user to check it in second controller.
 * Save it inside a global array.
 * Inputs: None.
 * Outputs: None.
 */
void sendRequestedPassword(void){
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	0f 92       	push	r0
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
	uint8 i;
	for(i=0;i<PasswordSize;i++)
    1008:	19 82       	std	Y+1, r1	; 0x01
    100a:	0c c0       	rjmp	.+24     	; 0x1024 <sendRequestedPassword+0x26>
	{
		UART_sendByte(password3[i]);
    100c:	89 81       	ldd	r24, Y+1	; 0x01
    100e:	88 2f       	mov	r24, r24
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	fc 01       	movw	r30, r24
    1014:	ea 5b       	subi	r30, 0xBA	; 186
    1016:	fe 4f       	sbci	r31, 0xFE	; 254
    1018:	80 81       	ld	r24, Z
    101a:	0e 94 bb 18 	call	0x3176	; 0x3176 <UART_sendByte>
 * Inputs: None.
 * Outputs: None.
 */
void sendRequestedPassword(void){
	uint8 i;
	for(i=0;i<PasswordSize;i++)
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	8f 5f       	subi	r24, 0xFF	; 255
    1022:	89 83       	std	Y+1, r24	; 0x01
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	85 30       	cpi	r24, 0x05	; 5
    1028:	88 f3       	brcs	.-30     	; 0x100c <sendRequestedPassword+0xe>
	{
		UART_sendByte(password3[i]);
	}
}
    102a:	0f 90       	pop	r0
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <mainOptions>:
 * Description :
 * Display main menu to user.
 * Inputs: None.
 * Outputs: None.
 */
void mainOptions(void){
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	2e 97       	sbiw	r28, 0x0e	; 14
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	de bf       	out	0x3e, r29	; 62
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1046:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"+ :open door") ;
    104a:	21 e9       	ldi	r18, 0x91	; 145
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	60 e0       	ldi	r22, 0x00	; 0
    1052:	a9 01       	movw	r20, r18
    1054:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"- :change pass");
    1058:	2e e9       	ldi	r18, 0x9E	; 158
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	a9 01       	movw	r20, r18
    1062:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <LCD_displayStringRowColumn>
	g_key=KEYPAD_getPressedKey();
    1066:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <KEYPAD_getPressedKey>
    106a:	80 93 45 01 	sts	0x0145, r24
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	af ea       	ldi	r26, 0xAF	; 175
    1074:	b3 e4       	ldi	r27, 0x43	; 67
    1076:	8b 87       	std	Y+11, r24	; 0x0b
    1078:	9c 87       	std	Y+12, r25	; 0x0c
    107a:	ad 87       	std	Y+13, r26	; 0x0d
    107c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    107e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1080:	7c 85       	ldd	r23, Y+12	; 0x0c
    1082:	8d 85       	ldd	r24, Y+13	; 0x0d
    1084:	9e 85       	ldd	r25, Y+14	; 0x0e
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	4a ef       	ldi	r20, 0xFA	; 250
    108c:	54 e4       	ldi	r21, 0x44	; 68
    108e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1092:	dc 01       	movw	r26, r24
    1094:	cb 01       	movw	r24, r22
    1096:	8f 83       	std	Y+7, r24	; 0x07
    1098:	98 87       	std	Y+8, r25	; 0x08
    109a:	a9 87       	std	Y+9, r26	; 0x09
    109c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    109e:	6f 81       	ldd	r22, Y+7	; 0x07
    10a0:	78 85       	ldd	r23, Y+8	; 0x08
    10a2:	89 85       	ldd	r24, Y+9	; 0x09
    10a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	40 e8       	ldi	r20, 0x80	; 128
    10ac:	5f e3       	ldi	r21, 0x3F	; 63
    10ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10b2:	88 23       	and	r24, r24
    10b4:	2c f4       	brge	.+10     	; 0x10c0 <mainOptions+0x8e>
		__ticks = 1;
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	9e 83       	std	Y+6, r25	; 0x06
    10bc:	8d 83       	std	Y+5, r24	; 0x05
    10be:	3f c0       	rjmp	.+126    	; 0x113e <mainOptions+0x10c>
	else if (__tmp > 65535)
    10c0:	6f 81       	ldd	r22, Y+7	; 0x07
    10c2:	78 85       	ldd	r23, Y+8	; 0x08
    10c4:	89 85       	ldd	r24, Y+9	; 0x09
    10c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	3f ef       	ldi	r19, 0xFF	; 255
    10cc:	4f e7       	ldi	r20, 0x7F	; 127
    10ce:	57 e4       	ldi	r21, 0x47	; 71
    10d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10d4:	18 16       	cp	r1, r24
    10d6:	4c f5       	brge	.+82     	; 0x112a <mainOptions+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    10da:	7c 85       	ldd	r23, Y+12	; 0x0c
    10dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    10de:	9e 85       	ldd	r25, Y+14	; 0x0e
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	40 e2       	ldi	r20, 0x20	; 32
    10e6:	51 e4       	ldi	r21, 0x41	; 65
    10e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ec:	dc 01       	movw	r26, r24
    10ee:	cb 01       	movw	r24, r22
    10f0:	bc 01       	movw	r22, r24
    10f2:	cd 01       	movw	r24, r26
    10f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	9e 83       	std	Y+6, r25	; 0x06
    10fe:	8d 83       	std	Y+5, r24	; 0x05
    1100:	0f c0       	rjmp	.+30     	; 0x1120 <mainOptions+0xee>
    1102:	88 ec       	ldi	r24, 0xC8	; 200
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	9c 83       	std	Y+4, r25	; 0x04
    1108:	8b 83       	std	Y+3, r24	; 0x03
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	9c 81       	ldd	r25, Y+4	; 0x04
    110e:	01 97       	sbiw	r24, 0x01	; 1
    1110:	f1 f7       	brne	.-4      	; 0x110e <mainOptions+0xdc>
    1112:	9c 83       	std	Y+4, r25	; 0x04
    1114:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1116:	8d 81       	ldd	r24, Y+5	; 0x05
    1118:	9e 81       	ldd	r25, Y+6	; 0x06
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	9e 83       	std	Y+6, r25	; 0x06
    111e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1120:	8d 81       	ldd	r24, Y+5	; 0x05
    1122:	9e 81       	ldd	r25, Y+6	; 0x06
    1124:	00 97       	sbiw	r24, 0x00	; 0
    1126:	69 f7       	brne	.-38     	; 0x1102 <mainOptions+0xd0>
    1128:	14 c0       	rjmp	.+40     	; 0x1152 <mainOptions+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    112a:	6f 81       	ldd	r22, Y+7	; 0x07
    112c:	78 85       	ldd	r23, Y+8	; 0x08
    112e:	89 85       	ldd	r24, Y+9	; 0x09
    1130:	9a 85       	ldd	r25, Y+10	; 0x0a
    1132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1136:	dc 01       	movw	r26, r24
    1138:	cb 01       	movw	r24, r22
    113a:	9e 83       	std	Y+6, r25	; 0x06
    113c:	8d 83       	std	Y+5, r24	; 0x05
    113e:	8d 81       	ldd	r24, Y+5	; 0x05
    1140:	9e 81       	ldd	r25, Y+6	; 0x06
    1142:	9a 83       	std	Y+2, r25	; 0x02
    1144:	89 83       	std	Y+1, r24	; 0x01
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	9a 81       	ldd	r25, Y+2	; 0x02
    114a:	01 97       	sbiw	r24, 0x01	; 1
    114c:	f1 f7       	brne	.-4      	; 0x114a <mainOptions+0x118>
    114e:	9a 83       	std	Y+2, r25	; 0x02
    1150:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(350);
	if (g_key =='+')
    1152:	80 91 45 01 	lds	r24, 0x0145
    1156:	8b 32       	cpi	r24, 0x2B	; 43
    1158:	51 f4       	brne	.+20     	; 0x116e <mainOptions+0x13c>
	{
		LCD_clearScreen();
    115a:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <LCD_clearScreen>
		requestPassword();
    115e:	0e 94 54 07 	call	0xea8	; 0xea8 <requestPassword>
		/*Tell the other MC2 that requested password is ready*/
		UART_sendByte(HMI_RequestedPasswordReady);
    1162:	89 e2       	ldi	r24, 0x29	; 41
    1164:	0e 94 bb 18 	call	0x3176	; 0x3176 <UART_sendByte>
		sendRequestedPassword();
    1168:	0e 94 ff 07 	call	0xffe	; 0xffe <sendRequestedPassword>
    116c:	0d c0       	rjmp	.+26     	; 0x1188 <mainOptions+0x156>
	}
	else if(g_key == '-')
    116e:	80 91 45 01 	lds	r24, 0x0145
    1172:	8d 32       	cpi	r24, 0x2D	; 45
    1174:	49 f4       	brne	.+18     	; 0x1188 <mainOptions+0x156>
	{
		LCD_clearScreen();
    1176:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <LCD_clearScreen>
		requestPassword();
    117a:	0e 94 54 07 	call	0xea8	; 0xea8 <requestPassword>
		/*Tell the other MC2 that requested password is ready*/
		UART_sendByte(HMI_RequestedPasswordReady);
    117e:	89 e2       	ldi	r24, 0x29	; 41
    1180:	0e 94 bb 18 	call	0x3176	; 0x3176 <UART_sendByte>
		sendRequestedPassword();
    1184:	0e 94 ff 07 	call	0xffe	; 0xffe <sendRequestedPassword>
	}
}
    1188:	2e 96       	adiw	r28, 0x0e	; 14
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	de bf       	out	0x3e, r29	; 62
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	cd bf       	out	0x3d, r28	; 61
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <sendUserNewPassword>:
 * Sends the two password entered by user in case of firstTimePasswords/ChangePassword scenarios to second controller.
 * Save it inside a global array.
 * Inputs: None.
 * Outputs: None.
 */
void sendUserNewPassword(void){
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	0f 92       	push	r0
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
	uint8 i;
	for(i=0;i<PasswordSize;i++)
    11a4:	19 82       	std	Y+1, r1	; 0x01
    11a6:	0c c0       	rjmp	.+24     	; 0x11c0 <sendUserNewPassword+0x26>
	{
		UART_sendByte(password1[i]);
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	88 2f       	mov	r24, r24
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	fc 01       	movw	r30, r24
    11b0:	e0 5c       	subi	r30, 0xC0	; 192
    11b2:	fe 4f       	sbci	r31, 0xFE	; 254
    11b4:	80 81       	ld	r24, Z
    11b6:	0e 94 bb 18 	call	0x3176	; 0x3176 <UART_sendByte>
 * Inputs: None.
 * Outputs: None.
 */
void sendUserNewPassword(void){
	uint8 i;
	for(i=0;i<PasswordSize;i++)
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	8f 5f       	subi	r24, 0xFF	; 255
    11be:	89 83       	std	Y+1, r24	; 0x01
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	85 30       	cpi	r24, 0x05	; 5
    11c4:	88 f3       	brcs	.-30     	; 0x11a8 <sendUserNewPassword+0xe>
	{
		UART_sendByte(password1[i]);
	}


	for(i=0;i<PasswordSize;i++)
    11c6:	19 82       	std	Y+1, r1	; 0x01
    11c8:	0c c0       	rjmp	.+24     	; 0x11e2 <sendUserNewPassword+0x48>
	{
		UART_sendByte(password2[i]);
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	88 2f       	mov	r24, r24
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	fc 01       	movw	r30, r24
    11d2:	e5 5c       	subi	r30, 0xC5	; 197
    11d4:	fe 4f       	sbci	r31, 0xFE	; 254
    11d6:	80 81       	ld	r24, Z
    11d8:	0e 94 bb 18 	call	0x3176	; 0x3176 <UART_sendByte>
	{
		UART_sendByte(password1[i]);
	}


	for(i=0;i<PasswordSize;i++)
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	8f 5f       	subi	r24, 0xFF	; 255
    11e0:	89 83       	std	Y+1, r24	; 0x01
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	85 30       	cpi	r24, 0x05	; 5
    11e6:	88 f3       	brcs	.-30     	; 0x11ca <sendUserNewPassword+0x30>
	{
		UART_sendByte(password2[i]);
	}
}
    11e8:	0f 90       	pop	r0
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	08 95       	ret

000011f0 <Timer_Count>:

/*
 * Description :
 * SetCallBack function that increments the g_tick global variable.
 */
void Timer_Count(){
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    11f8:	80 91 31 01 	lds	r24, 0x0131
    11fc:	90 91 32 01 	lds	r25, 0x0132
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	90 93 32 01 	sts	0x0132, r25
    1206:	80 93 31 01 	sts	0x0131, r24
}
    120a:	cf 91       	pop	r28
    120c:	df 91       	pop	r29
    120e:	08 95       	ret

00001210 <main>:


int main(void){
    1210:	df 93       	push	r29
    1212:	cf 93       	push	r28
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
    1218:	c0 55       	subi	r28, 0x50	; 80
    121a:	d0 40       	sbci	r29, 0x00	; 0
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	cd bf       	out	0x3d, r28	; 61
	/* Enable global interrupt bit for the timer */
	SREG |= (1<<7);
    1226:	af e5       	ldi	r26, 0x5F	; 95
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	ef e5       	ldi	r30, 0x5F	; 95
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	80 68       	ori	r24, 0x80	; 128
    1232:	8c 93       	st	X, r24

	/* Initialize the LCD driver */
	LCD_init();
    1234:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <LCD_init>
	LCD_displayString("Welcome");
    1238:	8d ea       	ldi	r24, 0xAD	; 173
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	0e 94 df 14 	call	0x29be	; 0x29be <LCD_displayString>
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	aa e7       	ldi	r26, 0x7A	; 122
    1246:	b4 e4       	ldi	r27, 0x44	; 68
    1248:	8d ab       	std	Y+53, r24	; 0x35
    124a:	9e ab       	std	Y+54, r25	; 0x36
    124c:	af ab       	std	Y+55, r26	; 0x37
    124e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1250:	6d a9       	ldd	r22, Y+53	; 0x35
    1252:	7e a9       	ldd	r23, Y+54	; 0x36
    1254:	8f a9       	ldd	r24, Y+55	; 0x37
    1256:	98 ad       	ldd	r25, Y+56	; 0x38
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	4a ef       	ldi	r20, 0xFA	; 250
    125e:	54 e4       	ldi	r21, 0x44	; 68
    1260:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1264:	dc 01       	movw	r26, r24
    1266:	cb 01       	movw	r24, r22
    1268:	89 ab       	std	Y+49, r24	; 0x31
    126a:	9a ab       	std	Y+50, r25	; 0x32
    126c:	ab ab       	std	Y+51, r26	; 0x33
    126e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1270:	69 a9       	ldd	r22, Y+49	; 0x31
    1272:	7a a9       	ldd	r23, Y+50	; 0x32
    1274:	8b a9       	ldd	r24, Y+51	; 0x33
    1276:	9c a9       	ldd	r25, Y+52	; 0x34
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	40 e8       	ldi	r20, 0x80	; 128
    127e:	5f e3       	ldi	r21, 0x3F	; 63
    1280:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1284:	88 23       	and	r24, r24
    1286:	2c f4       	brge	.+10     	; 0x1292 <main+0x82>
		__ticks = 1;
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	98 ab       	std	Y+48, r25	; 0x30
    128e:	8f a7       	std	Y+47, r24	; 0x2f
    1290:	3f c0       	rjmp	.+126    	; 0x1310 <main+0x100>
	else if (__tmp > 65535)
    1292:	69 a9       	ldd	r22, Y+49	; 0x31
    1294:	7a a9       	ldd	r23, Y+50	; 0x32
    1296:	8b a9       	ldd	r24, Y+51	; 0x33
    1298:	9c a9       	ldd	r25, Y+52	; 0x34
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	3f ef       	ldi	r19, 0xFF	; 255
    129e:	4f e7       	ldi	r20, 0x7F	; 127
    12a0:	57 e4       	ldi	r21, 0x47	; 71
    12a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12a6:	18 16       	cp	r1, r24
    12a8:	4c f5       	brge	.+82     	; 0x12fc <main+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12aa:	6d a9       	ldd	r22, Y+53	; 0x35
    12ac:	7e a9       	ldd	r23, Y+54	; 0x36
    12ae:	8f a9       	ldd	r24, Y+55	; 0x37
    12b0:	98 ad       	ldd	r25, Y+56	; 0x38
    12b2:	20 e0       	ldi	r18, 0x00	; 0
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	40 e2       	ldi	r20, 0x20	; 32
    12b8:	51 e4       	ldi	r21, 0x41	; 65
    12ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12be:	dc 01       	movw	r26, r24
    12c0:	cb 01       	movw	r24, r22
    12c2:	bc 01       	movw	r22, r24
    12c4:	cd 01       	movw	r24, r26
    12c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ca:	dc 01       	movw	r26, r24
    12cc:	cb 01       	movw	r24, r22
    12ce:	98 ab       	std	Y+48, r25	; 0x30
    12d0:	8f a7       	std	Y+47, r24	; 0x2f
    12d2:	0f c0       	rjmp	.+30     	; 0x12f2 <main+0xe2>
    12d4:	88 ec       	ldi	r24, 0xC8	; 200
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	9e a7       	std	Y+46, r25	; 0x2e
    12da:	8d a7       	std	Y+45, r24	; 0x2d
    12dc:	8d a5       	ldd	r24, Y+45	; 0x2d
    12de:	9e a5       	ldd	r25, Y+46	; 0x2e
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	f1 f7       	brne	.-4      	; 0x12e0 <main+0xd0>
    12e4:	9e a7       	std	Y+46, r25	; 0x2e
    12e6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    12ea:	98 a9       	ldd	r25, Y+48	; 0x30
    12ec:	01 97       	sbiw	r24, 0x01	; 1
    12ee:	98 ab       	std	Y+48, r25	; 0x30
    12f0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    12f4:	98 a9       	ldd	r25, Y+48	; 0x30
    12f6:	00 97       	sbiw	r24, 0x00	; 0
    12f8:	69 f7       	brne	.-38     	; 0x12d4 <main+0xc4>
    12fa:	14 c0       	rjmp	.+40     	; 0x1324 <main+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12fc:	69 a9       	ldd	r22, Y+49	; 0x31
    12fe:	7a a9       	ldd	r23, Y+50	; 0x32
    1300:	8b a9       	ldd	r24, Y+51	; 0x33
    1302:	9c a9       	ldd	r25, Y+52	; 0x34
    1304:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1308:	dc 01       	movw	r26, r24
    130a:	cb 01       	movw	r24, r22
    130c:	98 ab       	std	Y+48, r25	; 0x30
    130e:	8f a7       	std	Y+47, r24	; 0x2f
    1310:	8f a5       	ldd	r24, Y+47	; 0x2f
    1312:	98 a9       	ldd	r25, Y+48	; 0x30
    1314:	9c a7       	std	Y+44, r25	; 0x2c
    1316:	8b a7       	std	Y+43, r24	; 0x2b
    1318:	8b a5       	ldd	r24, Y+43	; 0x2b
    131a:	9c a5       	ldd	r25, Y+44	; 0x2c
    131c:	01 97       	sbiw	r24, 0x01	; 1
    131e:	f1 f7       	brne	.-4      	; 0x131c <main+0x10c>
    1320:	9c a7       	std	Y+44, r25	; 0x2c
    1322:	8b a7       	std	Y+43, r24	; 0x2b
	 * 8 bit data mode
	 * One stop bit
	 * No parity bit
	 * Baud-rate = 9600 bits/sec
	*/
	UART_Config s_config={EIGHT_BITS,DISABLED,ONE,9600};
    1324:	9e 01       	movw	r18, r28
    1326:	27 5c       	subi	r18, 0xC7	; 199
    1328:	3f 4f       	sbci	r19, 0xFF	; 255
    132a:	29 96       	adiw	r28, 0x09	; 9
    132c:	3f af       	std	Y+63, r19	; 0x3f
    132e:	2e af       	std	Y+62, r18	; 0x3e
    1330:	29 97       	sbiw	r28, 0x09	; 9
    1332:	89 e2       	ldi	r24, 0x29	; 41
    1334:	91 e0       	ldi	r25, 0x01	; 1
    1336:	2b 96       	adiw	r28, 0x0b	; 11
    1338:	9f af       	std	Y+63, r25	; 0x3f
    133a:	8e af       	std	Y+62, r24	; 0x3e
    133c:	2b 97       	sbiw	r28, 0x0b	; 11
    133e:	97 e0       	ldi	r25, 0x07	; 7
    1340:	2c 96       	adiw	r28, 0x0c	; 12
    1342:	9f af       	std	Y+63, r25	; 0x3f
    1344:	2c 97       	sbiw	r28, 0x0c	; 12
    1346:	2b 96       	adiw	r28, 0x0b	; 11
    1348:	ee ad       	ldd	r30, Y+62	; 0x3e
    134a:	ff ad       	ldd	r31, Y+63	; 0x3f
    134c:	2b 97       	sbiw	r28, 0x0b	; 11
    134e:	00 80       	ld	r0, Z
    1350:	2b 96       	adiw	r28, 0x0b	; 11
    1352:	2e ad       	ldd	r18, Y+62	; 0x3e
    1354:	3f ad       	ldd	r19, Y+63	; 0x3f
    1356:	2b 97       	sbiw	r28, 0x0b	; 11
    1358:	2f 5f       	subi	r18, 0xFF	; 255
    135a:	3f 4f       	sbci	r19, 0xFF	; 255
    135c:	2b 96       	adiw	r28, 0x0b	; 11
    135e:	3f af       	std	Y+63, r19	; 0x3f
    1360:	2e af       	std	Y+62, r18	; 0x3e
    1362:	2b 97       	sbiw	r28, 0x0b	; 11
    1364:	29 96       	adiw	r28, 0x09	; 9
    1366:	ee ad       	ldd	r30, Y+62	; 0x3e
    1368:	ff ad       	ldd	r31, Y+63	; 0x3f
    136a:	29 97       	sbiw	r28, 0x09	; 9
    136c:	00 82       	st	Z, r0
    136e:	29 96       	adiw	r28, 0x09	; 9
    1370:	2e ad       	ldd	r18, Y+62	; 0x3e
    1372:	3f ad       	ldd	r19, Y+63	; 0x3f
    1374:	29 97       	sbiw	r28, 0x09	; 9
    1376:	2f 5f       	subi	r18, 0xFF	; 255
    1378:	3f 4f       	sbci	r19, 0xFF	; 255
    137a:	29 96       	adiw	r28, 0x09	; 9
    137c:	3f af       	std	Y+63, r19	; 0x3f
    137e:	2e af       	std	Y+62, r18	; 0x3e
    1380:	29 97       	sbiw	r28, 0x09	; 9
    1382:	2c 96       	adiw	r28, 0x0c	; 12
    1384:	3f ad       	ldd	r19, Y+63	; 0x3f
    1386:	2c 97       	sbiw	r28, 0x0c	; 12
    1388:	31 50       	subi	r19, 0x01	; 1
    138a:	2c 96       	adiw	r28, 0x0c	; 12
    138c:	3f af       	std	Y+63, r19	; 0x3f
    138e:	2c 97       	sbiw	r28, 0x0c	; 12
    1390:	2c 96       	adiw	r28, 0x0c	; 12
    1392:	8f ad       	ldd	r24, Y+63	; 0x3f
    1394:	2c 97       	sbiw	r28, 0x0c	; 12
    1396:	88 23       	and	r24, r24
    1398:	b1 f6       	brne	.-84     	; 0x1346 <main+0x136>
	UART_init(&s_config);
    139a:	ce 01       	movw	r24, r28
    139c:	c9 96       	adiw	r24, 0x39	; 57
    139e:	0e 94 68 18 	call	0x30d0	; 0x30d0 <UART_init>
	 * F_CPU/1024 prescaler.
	 * Interrupt mode.
	 * starting value = 0.
	 * Setting callBackFunction with Timer_Count();.
	*/
	Timer0Setup s_Timer0config={OVF0,FCPUT0_1024,OVF0_INT,0,0};
    13a2:	fe 01       	movw	r30, r28
    13a4:	e0 5c       	subi	r30, 0xC0	; 192
    13a6:	ff 4f       	sbci	r31, 0xFF	; 255
    13a8:	2e 96       	adiw	r28, 0x0e	; 14
    13aa:	ff af       	std	Y+63, r31	; 0x3f
    13ac:	ee af       	std	Y+62, r30	; 0x3e
    13ae:	2e 97       	sbiw	r28, 0x0e	; 14
    13b0:	24 e2       	ldi	r18, 0x24	; 36
    13b2:	31 e0       	ldi	r19, 0x01	; 1
    13b4:	60 96       	adiw	r28, 0x10	; 16
    13b6:	3f af       	std	Y+63, r19	; 0x3f
    13b8:	2e af       	std	Y+62, r18	; 0x3e
    13ba:	60 97       	sbiw	r28, 0x10	; 16
    13bc:	35 e0       	ldi	r19, 0x05	; 5
    13be:	61 96       	adiw	r28, 0x11	; 17
    13c0:	3f af       	std	Y+63, r19	; 0x3f
    13c2:	61 97       	sbiw	r28, 0x11	; 17
    13c4:	60 96       	adiw	r28, 0x10	; 16
    13c6:	ee ad       	ldd	r30, Y+62	; 0x3e
    13c8:	ff ad       	ldd	r31, Y+63	; 0x3f
    13ca:	60 97       	sbiw	r28, 0x10	; 16
    13cc:	00 80       	ld	r0, Z
    13ce:	60 96       	adiw	r28, 0x10	; 16
    13d0:	2e ad       	ldd	r18, Y+62	; 0x3e
    13d2:	3f ad       	ldd	r19, Y+63	; 0x3f
    13d4:	60 97       	sbiw	r28, 0x10	; 16
    13d6:	2f 5f       	subi	r18, 0xFF	; 255
    13d8:	3f 4f       	sbci	r19, 0xFF	; 255
    13da:	60 96       	adiw	r28, 0x10	; 16
    13dc:	3f af       	std	Y+63, r19	; 0x3f
    13de:	2e af       	std	Y+62, r18	; 0x3e
    13e0:	60 97       	sbiw	r28, 0x10	; 16
    13e2:	2e 96       	adiw	r28, 0x0e	; 14
    13e4:	ee ad       	ldd	r30, Y+62	; 0x3e
    13e6:	ff ad       	ldd	r31, Y+63	; 0x3f
    13e8:	2e 97       	sbiw	r28, 0x0e	; 14
    13ea:	00 82       	st	Z, r0
    13ec:	2e 96       	adiw	r28, 0x0e	; 14
    13ee:	2e ad       	ldd	r18, Y+62	; 0x3e
    13f0:	3f ad       	ldd	r19, Y+63	; 0x3f
    13f2:	2e 97       	sbiw	r28, 0x0e	; 14
    13f4:	2f 5f       	subi	r18, 0xFF	; 255
    13f6:	3f 4f       	sbci	r19, 0xFF	; 255
    13f8:	2e 96       	adiw	r28, 0x0e	; 14
    13fa:	3f af       	std	Y+63, r19	; 0x3f
    13fc:	2e af       	std	Y+62, r18	; 0x3e
    13fe:	2e 97       	sbiw	r28, 0x0e	; 14
    1400:	61 96       	adiw	r28, 0x11	; 17
    1402:	3f ad       	ldd	r19, Y+63	; 0x3f
    1404:	61 97       	sbiw	r28, 0x11	; 17
    1406:	31 50       	subi	r19, 0x01	; 1
    1408:	61 96       	adiw	r28, 0x11	; 17
    140a:	3f af       	std	Y+63, r19	; 0x3f
    140c:	61 97       	sbiw	r28, 0x11	; 17
    140e:	61 96       	adiw	r28, 0x11	; 17
    1410:	8f ad       	ldd	r24, Y+63	; 0x3f
    1412:	61 97       	sbiw	r28, 0x11	; 17
    1414:	88 23       	and	r24, r24
    1416:	b1 f6       	brne	.-84     	; 0x13c4 <main+0x1b4>
	Timer0_Start(&s_Timer0config);
    1418:	ce 01       	movw	r24, r28
    141a:	80 5c       	subi	r24, 0xC0	; 192
    141c:	9f 4f       	sbci	r25, 0xFF	; 255
    141e:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <Timer0_Start>
	Timer0_setCallBack(Timer_Count);
    1422:	88 ef       	ldi	r24, 0xF8	; 248
    1424:	98 e0       	ldi	r25, 0x08	; 8
    1426:	0e 94 32 18 	call	0x3064	; 0x3064 <Timer0_setCallBack>

	/* Wait until MC2 is ready*/
	UART_sendByte(MC1_READY);
    142a:	80 e2       	ldi	r24, 0x20	; 32
    142c:	0e 94 bb 18 	call	0x3176	; 0x3176 <UART_sendByte>
	while(UART_recieveByte() != MC2_READY){}
    1430:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <UART_recieveByte>
    1434:	80 31       	cpi	r24, 0x10	; 16
    1436:	e1 f7       	brne	.-8      	; 0x1430 <main+0x220>




	while(1){
		g_order=UART_recieveByte();
    1438:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <UART_recieveByte>
    143c:	80 93 30 01 	sts	0x0130, r24
		/* must clear the g_recievedValue after every
		 * switch case executed so it will not execute again */

		switch(g_order){
    1440:	80 91 30 01 	lds	r24, 0x0130
    1444:	e8 2f       	mov	r30, r24
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	27 96       	adiw	r28, 0x07	; 7
    144a:	ff af       	std	Y+63, r31	; 0x3f
    144c:	ee af       	std	Y+62, r30	; 0x3e
    144e:	27 97       	sbiw	r28, 0x07	; 7
    1450:	27 96       	adiw	r28, 0x07	; 7
    1452:	2e ad       	ldd	r18, Y+62	; 0x3e
    1454:	3f ad       	ldd	r19, Y+63	; 0x3f
    1456:	27 97       	sbiw	r28, 0x07	; 7
    1458:	2e 34       	cpi	r18, 0x4E	; 78
    145a:	31 05       	cpc	r19, r1
    145c:	09 f4       	brne	.+2      	; 0x1460 <main+0x250>
    145e:	67 c0       	rjmp	.+206    	; 0x152e <main+0x31e>
    1460:	27 96       	adiw	r28, 0x07	; 7
    1462:	8e ad       	ldd	r24, Y+62	; 0x3e
    1464:	9f ad       	ldd	r25, Y+63	; 0x3f
    1466:	27 97       	sbiw	r28, 0x07	; 7
    1468:	8f 34       	cpi	r24, 0x4F	; 79
    146a:	91 05       	cpc	r25, r1
    146c:	cc f5       	brge	.+114    	; 0x14e0 <main+0x2d0>
    146e:	27 96       	adiw	r28, 0x07	; 7
    1470:	ee ad       	ldd	r30, Y+62	; 0x3e
    1472:	ff ad       	ldd	r31, Y+63	; 0x3f
    1474:	27 97       	sbiw	r28, 0x07	; 7
    1476:	ee 33       	cpi	r30, 0x3E	; 62
    1478:	f1 05       	cpc	r31, r1
    147a:	09 f4       	brne	.+2      	; 0x147e <main+0x26e>
    147c:	00 c1       	rjmp	.+512    	; 0x167e <main+0x46e>
    147e:	27 96       	adiw	r28, 0x07	; 7
    1480:	2e ad       	ldd	r18, Y+62	; 0x3e
    1482:	3f ad       	ldd	r19, Y+63	; 0x3f
    1484:	27 97       	sbiw	r28, 0x07	; 7
    1486:	2f 33       	cpi	r18, 0x3F	; 63
    1488:	31 05       	cpc	r19, r1
    148a:	cc f4       	brge	.+50     	; 0x14be <main+0x2ae>
    148c:	27 96       	adiw	r28, 0x07	; 7
    148e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1490:	9f ad       	ldd	r25, Y+63	; 0x3f
    1492:	27 97       	sbiw	r28, 0x07	; 7
    1494:	86 32       	cpi	r24, 0x26	; 38
    1496:	91 05       	cpc	r25, r1
    1498:	09 f4       	brne	.+2      	; 0x149c <main+0x28c>
    149a:	bb c1       	rjmp	.+886    	; 0x1812 <main+0x602>
    149c:	27 96       	adiw	r28, 0x07	; 7
    149e:	ee ad       	ldd	r30, Y+62	; 0x3e
    14a0:	ff ad       	ldd	r31, Y+63	; 0x3f
    14a2:	27 97       	sbiw	r28, 0x07	; 7
    14a4:	ec 33       	cpi	r30, 0x3C	; 60
    14a6:	f1 05       	cpc	r31, r1
    14a8:	09 f4       	brne	.+2      	; 0x14ac <main+0x29c>
    14aa:	d2 c0       	rjmp	.+420    	; 0x1650 <main+0x440>
    14ac:	27 96       	adiw	r28, 0x07	; 7
    14ae:	2e ad       	ldd	r18, Y+62	; 0x3e
    14b0:	3f ad       	ldd	r19, Y+63	; 0x3f
    14b2:	27 97       	sbiw	r28, 0x07	; 7
    14b4:	21 32       	cpi	r18, 0x21	; 33
    14b6:	31 05       	cpc	r19, r1
    14b8:	09 f4       	brne	.+2      	; 0x14bc <main+0x2ac>
    14ba:	2f c2       	rjmp	.+1118   	; 0x191a <main+0x70a>
    14bc:	38 c2       	rjmp	.+1136   	; 0x192e <main+0x71e>
    14be:	27 96       	adiw	r28, 0x07	; 7
    14c0:	8e ad       	ldd	r24, Y+62	; 0x3e
    14c2:	9f ad       	ldd	r25, Y+63	; 0x3f
    14c4:	27 97       	sbiw	r28, 0x07	; 7
    14c6:	83 34       	cpi	r24, 0x43	; 67
    14c8:	91 05       	cpc	r25, r1
    14ca:	09 f4       	brne	.+2      	; 0x14ce <main+0x2be>
    14cc:	99 c1       	rjmp	.+818    	; 0x1800 <main+0x5f0>
    14ce:	27 96       	adiw	r28, 0x07	; 7
    14d0:	ee ad       	ldd	r30, Y+62	; 0x3e
    14d2:	ff ad       	ldd	r31, Y+63	; 0x3f
    14d4:	27 97       	sbiw	r28, 0x07	; 7
    14d6:	e5 34       	cpi	r30, 0x45	; 69
    14d8:	f1 05       	cpc	r31, r1
    14da:	09 f4       	brne	.+2      	; 0x14de <main+0x2ce>
    14dc:	71 c1       	rjmp	.+738    	; 0x17c0 <main+0x5b0>
    14de:	27 c2       	rjmp	.+1102   	; 0x192e <main+0x71e>
    14e0:	27 96       	adiw	r28, 0x07	; 7
    14e2:	2e ad       	ldd	r18, Y+62	; 0x3e
    14e4:	3f ad       	ldd	r19, Y+63	; 0x3f
    14e6:	27 97       	sbiw	r28, 0x07	; 7
    14e8:	22 35       	cpi	r18, 0x52	; 82
    14ea:	31 05       	cpc	r19, r1
    14ec:	51 f1       	breq	.+84     	; 0x1542 <main+0x332>
    14ee:	27 96       	adiw	r28, 0x07	; 7
    14f0:	8e ad       	ldd	r24, Y+62	; 0x3e
    14f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    14f4:	27 97       	sbiw	r28, 0x07	; 7
    14f6:	83 35       	cpi	r24, 0x53	; 83
    14f8:	91 05       	cpc	r25, r1
    14fa:	4c f4       	brge	.+18     	; 0x150e <main+0x2fe>
    14fc:	27 96       	adiw	r28, 0x07	; 7
    14fe:	ee ad       	ldd	r30, Y+62	; 0x3e
    1500:	ff ad       	ldd	r31, Y+63	; 0x3f
    1502:	27 97       	sbiw	r28, 0x07	; 7
    1504:	ef 34       	cpi	r30, 0x4F	; 79
    1506:	f1 05       	cpc	r31, r1
    1508:	09 f4       	brne	.+2      	; 0x150c <main+0x2fc>
    150a:	71 c1       	rjmp	.+738    	; 0x17ee <main+0x5de>
    150c:	10 c2       	rjmp	.+1056   	; 0x192e <main+0x71e>
    150e:	27 96       	adiw	r28, 0x07	; 7
    1510:	2e ad       	ldd	r18, Y+62	; 0x3e
    1512:	3f ad       	ldd	r19, Y+63	; 0x3f
    1514:	27 97       	sbiw	r28, 0x07	; 7
    1516:	25 35       	cpi	r18, 0x55	; 85
    1518:	31 05       	cpc	r19, r1
    151a:	c1 f0       	breq	.+48     	; 0x154c <main+0x33c>
    151c:	27 96       	adiw	r28, 0x07	; 7
    151e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1520:	9f ad       	ldd	r25, Y+63	; 0x3f
    1522:	27 97       	sbiw	r28, 0x07	; 7
    1524:	8c 37       	cpi	r24, 0x7C	; 124
    1526:	91 05       	cpc	r25, r1
    1528:	09 f4       	brne	.+2      	; 0x152c <main+0x31c>
    152a:	7c c1       	rjmp	.+760    	; 0x1824 <main+0x614>
    152c:	00 c2       	rjmp	.+1024   	; 0x192e <main+0x71e>

		case getNewPassword:
			g_order=0;
    152e:	10 92 30 01 	sts	0x0130, r1

			getUserNewPassword();
    1532:	0e 94 a3 05 	call	0xb46	; 0xb46 <getUserNewPassword>
			/*Tell the other MC2 that password is ready */
			UART_sendByte(HMI_PasswordReady);
    1536:	80 e5       	ldi	r24, 0x50	; 80
    1538:	0e 94 bb 18 	call	0x3176	; 0x3176 <UART_sendByte>

			sendUserNewPassword();
    153c:	0e 94 cd 08 	call	0x119a	; 0x119a <sendUserNewPassword>
    1540:	7b cf       	rjmp	.-266    	; 0x1438 <main+0x228>

			break;


		case PasswordMatch :
			g_order=0;
    1542:	10 92 30 01 	sts	0x0130, r1
			mainOptions();
    1546:	0e 94 19 08 	call	0x1032	; 0x1032 <mainOptions>
    154a:	76 cf       	rjmp	.-276    	; 0x1438 <main+0x228>
			break;


		case passwordsUnmatched :
			g_order=0;
    154c:	10 92 30 01 	sts	0x0130, r1
			LCD_clearScreen();
    1550:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <LCD_clearScreen>
			LCD_displayString("Unmatched");
    1554:	85 eb       	ldi	r24, 0xB5	; 181
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	0e 94 df 14 	call	0x29be	; 0x29be <LCD_displayString>
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	aa e7       	ldi	r26, 0x7A	; 122
    1562:	b4 e4       	ldi	r27, 0x44	; 68
    1564:	8f a3       	std	Y+39, r24	; 0x27
    1566:	98 a7       	std	Y+40, r25	; 0x28
    1568:	a9 a7       	std	Y+41, r26	; 0x29
    156a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    156c:	6f a1       	ldd	r22, Y+39	; 0x27
    156e:	78 a5       	ldd	r23, Y+40	; 0x28
    1570:	89 a5       	ldd	r24, Y+41	; 0x29
    1572:	9a a5       	ldd	r25, Y+42	; 0x2a
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	4a ef       	ldi	r20, 0xFA	; 250
    157a:	54 e4       	ldi	r21, 0x44	; 68
    157c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1580:	dc 01       	movw	r26, r24
    1582:	cb 01       	movw	r24, r22
    1584:	8b a3       	std	Y+35, r24	; 0x23
    1586:	9c a3       	std	Y+36, r25	; 0x24
    1588:	ad a3       	std	Y+37, r26	; 0x25
    158a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    158c:	6b a1       	ldd	r22, Y+35	; 0x23
    158e:	7c a1       	ldd	r23, Y+36	; 0x24
    1590:	8d a1       	ldd	r24, Y+37	; 0x25
    1592:	9e a1       	ldd	r25, Y+38	; 0x26
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	40 e8       	ldi	r20, 0x80	; 128
    159a:	5f e3       	ldi	r21, 0x3F	; 63
    159c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15a0:	88 23       	and	r24, r24
    15a2:	2c f4       	brge	.+10     	; 0x15ae <main+0x39e>
		__ticks = 1;
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	9a a3       	std	Y+34, r25	; 0x22
    15aa:	89 a3       	std	Y+33, r24	; 0x21
    15ac:	3f c0       	rjmp	.+126    	; 0x162c <main+0x41c>
	else if (__tmp > 65535)
    15ae:	6b a1       	ldd	r22, Y+35	; 0x23
    15b0:	7c a1       	ldd	r23, Y+36	; 0x24
    15b2:	8d a1       	ldd	r24, Y+37	; 0x25
    15b4:	9e a1       	ldd	r25, Y+38	; 0x26
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	3f ef       	ldi	r19, 0xFF	; 255
    15ba:	4f e7       	ldi	r20, 0x7F	; 127
    15bc:	57 e4       	ldi	r21, 0x47	; 71
    15be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15c2:	18 16       	cp	r1, r24
    15c4:	4c f5       	brge	.+82     	; 0x1618 <main+0x408>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15c6:	6f a1       	ldd	r22, Y+39	; 0x27
    15c8:	78 a5       	ldd	r23, Y+40	; 0x28
    15ca:	89 a5       	ldd	r24, Y+41	; 0x29
    15cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	40 e2       	ldi	r20, 0x20	; 32
    15d4:	51 e4       	ldi	r21, 0x41	; 65
    15d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15da:	dc 01       	movw	r26, r24
    15dc:	cb 01       	movw	r24, r22
    15de:	bc 01       	movw	r22, r24
    15e0:	cd 01       	movw	r24, r26
    15e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e6:	dc 01       	movw	r26, r24
    15e8:	cb 01       	movw	r24, r22
    15ea:	9a a3       	std	Y+34, r25	; 0x22
    15ec:	89 a3       	std	Y+33, r24	; 0x21
    15ee:	0f c0       	rjmp	.+30     	; 0x160e <main+0x3fe>
    15f0:	88 ec       	ldi	r24, 0xC8	; 200
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	98 a3       	std	Y+32, r25	; 0x20
    15f6:	8f 8f       	std	Y+31, r24	; 0x1f
    15f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15fa:	98 a1       	ldd	r25, Y+32	; 0x20
    15fc:	01 97       	sbiw	r24, 0x01	; 1
    15fe:	f1 f7       	brne	.-4      	; 0x15fc <main+0x3ec>
    1600:	98 a3       	std	Y+32, r25	; 0x20
    1602:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1604:	89 a1       	ldd	r24, Y+33	; 0x21
    1606:	9a a1       	ldd	r25, Y+34	; 0x22
    1608:	01 97       	sbiw	r24, 0x01	; 1
    160a:	9a a3       	std	Y+34, r25	; 0x22
    160c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    160e:	89 a1       	ldd	r24, Y+33	; 0x21
    1610:	9a a1       	ldd	r25, Y+34	; 0x22
    1612:	00 97       	sbiw	r24, 0x00	; 0
    1614:	69 f7       	brne	.-38     	; 0x15f0 <main+0x3e0>
    1616:	14 c0       	rjmp	.+40     	; 0x1640 <main+0x430>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1618:	6b a1       	ldd	r22, Y+35	; 0x23
    161a:	7c a1       	ldd	r23, Y+36	; 0x24
    161c:	8d a1       	ldd	r24, Y+37	; 0x25
    161e:	9e a1       	ldd	r25, Y+38	; 0x26
    1620:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	9a a3       	std	Y+34, r25	; 0x22
    162a:	89 a3       	std	Y+33, r24	; 0x21
    162c:	89 a1       	ldd	r24, Y+33	; 0x21
    162e:	9a a1       	ldd	r25, Y+34	; 0x22
    1630:	9e 8f       	std	Y+30, r25	; 0x1e
    1632:	8d 8f       	std	Y+29, r24	; 0x1d
    1634:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1636:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1638:	01 97       	sbiw	r24, 0x01	; 1
    163a:	f1 f7       	brne	.-4      	; 0x1638 <main+0x428>
    163c:	9e 8f       	std	Y+30, r25	; 0x1e
    163e:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1000) ;
			getUserNewPassword();
    1640:	0e 94 a3 05 	call	0xb46	; 0xb46 <getUserNewPassword>
			/* Tell the other MC2 to open the door */
			UART_sendByte(HMI_PasswordReady);
    1644:	80 e5       	ldi	r24, 0x50	; 80
    1646:	0e 94 bb 18 	call	0x3176	; 0x3176 <UART_sendByte>
			sendUserNewPassword();
    164a:	0e 94 cd 08 	call	0x119a	; 0x119a <sendUserNewPassword>
    164e:	f4 ce       	rjmp	.-536    	; 0x1438 <main+0x228>
			break ;


		case RequestedCorrectPassword :
			g_order=0;
    1650:	10 92 30 01 	sts	0x0130, r1
			if(g_key== '+')
    1654:	80 91 45 01 	lds	r24, 0x0145
    1658:	8b 32       	cpi	r24, 0x2B	; 43
    165a:	21 f4       	brne	.+8      	; 0x1664 <main+0x454>
			{
				/* Tell the other MC2 to open the door*/
				UART_sendByte(openDoor) ;
    165c:	80 e4       	ldi	r24, 0x40	; 64
    165e:	0e 94 bb 18 	call	0x3176	; 0x3176 <UART_sendByte>
    1662:	ea ce       	rjmp	.-556    	; 0x1438 <main+0x228>
			}
			else if(g_key=='-')
    1664:	80 91 45 01 	lds	r24, 0x0145
    1668:	8d 32       	cpi	r24, 0x2D	; 45
    166a:	09 f0       	breq	.+2      	; 0x166e <main+0x45e>
    166c:	e5 ce       	rjmp	.-566    	; 0x1438 <main+0x228>
			{
				getUserNewPassword();
    166e:	0e 94 a3 05 	call	0xb46	; 0xb46 <getUserNewPassword>
				/* Tell the other MC2 HMI_PasswordReady is ready */
				UART_sendByte(HMI_PasswordReady);
    1672:	80 e5       	ldi	r24, 0x50	; 80
    1674:	0e 94 bb 18 	call	0x3176	; 0x3176 <UART_sendByte>
				sendUserNewPassword();
    1678:	0e 94 cd 08 	call	0x119a	; 0x119a <sendUserNewPassword>
    167c:	dd ce       	rjmp	.-582    	; 0x1438 <main+0x228>
			}
			break;


		case RequestedINCorrectPassword :
			g_order=0;
    167e:	10 92 30 01 	sts	0x0130, r1
			g_flag++;
    1682:	80 91 33 01 	lds	r24, 0x0133
    1686:	90 91 34 01 	lds	r25, 0x0134
    168a:	01 96       	adiw	r24, 0x01	; 1
    168c:	90 93 34 01 	sts	0x0134, r25
    1690:	80 93 33 01 	sts	0x0133, r24
			if(g_flag==3)
    1694:	80 91 33 01 	lds	r24, 0x0133
    1698:	90 91 34 01 	lds	r25, 0x0134
    169c:	83 30       	cpi	r24, 0x03	; 3
    169e:	91 05       	cpc	r25, r1
    16a0:	41 f4       	brne	.+16     	; 0x16b2 <main+0x4a2>
			{
				g_flag=0;
    16a2:	10 92 34 01 	sts	0x0134, r1
    16a6:	10 92 33 01 	sts	0x0133, r1
				g_order=errorScreen;
    16aa:	85 e4       	ldi	r24, 0x45	; 69
    16ac:	80 93 30 01 	sts	0x0130, r24
    16b0:	c3 ce       	rjmp	.-634    	; 0x1438 <main+0x228>
			}
			else
			{
				LCD_clearScreen();
    16b2:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <LCD_clearScreen>
				LCD_displayString("Wrong Password !");
    16b6:	8f eb       	ldi	r24, 0xBF	; 191
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	0e 94 df 14 	call	0x29be	; 0x29be <LCD_displayString>
				LCD_displayStringRowColumn(1,0,"Try again !");
    16be:	20 ed       	ldi	r18, 0xD0	; 208
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	60 e0       	ldi	r22, 0x00	; 0
    16c6:	a9 01       	movw	r20, r18
    16c8:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <LCD_displayStringRowColumn>
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	aa e7       	ldi	r26, 0x7A	; 122
    16d2:	b4 e4       	ldi	r27, 0x44	; 68
    16d4:	89 8f       	std	Y+25, r24	; 0x19
    16d6:	9a 8f       	std	Y+26, r25	; 0x1a
    16d8:	ab 8f       	std	Y+27, r26	; 0x1b
    16da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16dc:	69 8d       	ldd	r22, Y+25	; 0x19
    16de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	4a ef       	ldi	r20, 0xFA	; 250
    16ea:	54 e4       	ldi	r21, 0x44	; 68
    16ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f0:	dc 01       	movw	r26, r24
    16f2:	cb 01       	movw	r24, r22
    16f4:	8d 8b       	std	Y+21, r24	; 0x15
    16f6:	9e 8b       	std	Y+22, r25	; 0x16
    16f8:	af 8b       	std	Y+23, r26	; 0x17
    16fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16fc:	6d 89       	ldd	r22, Y+21	; 0x15
    16fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1700:	8f 89       	ldd	r24, Y+23	; 0x17
    1702:	98 8d       	ldd	r25, Y+24	; 0x18
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	40 e8       	ldi	r20, 0x80	; 128
    170a:	5f e3       	ldi	r21, 0x3F	; 63
    170c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1710:	88 23       	and	r24, r24
    1712:	2c f4       	brge	.+10     	; 0x171e <main+0x50e>
		__ticks = 1;
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	9c 8b       	std	Y+20, r25	; 0x14
    171a:	8b 8b       	std	Y+19, r24	; 0x13
    171c:	3f c0       	rjmp	.+126    	; 0x179c <main+0x58c>
	else if (__tmp > 65535)
    171e:	6d 89       	ldd	r22, Y+21	; 0x15
    1720:	7e 89       	ldd	r23, Y+22	; 0x16
    1722:	8f 89       	ldd	r24, Y+23	; 0x17
    1724:	98 8d       	ldd	r25, Y+24	; 0x18
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	3f ef       	ldi	r19, 0xFF	; 255
    172a:	4f e7       	ldi	r20, 0x7F	; 127
    172c:	57 e4       	ldi	r21, 0x47	; 71
    172e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1732:	18 16       	cp	r1, r24
    1734:	4c f5       	brge	.+82     	; 0x1788 <main+0x578>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1736:	69 8d       	ldd	r22, Y+25	; 0x19
    1738:	7a 8d       	ldd	r23, Y+26	; 0x1a
    173a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    173c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	40 e2       	ldi	r20, 0x20	; 32
    1744:	51 e4       	ldi	r21, 0x41	; 65
    1746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	bc 01       	movw	r22, r24
    1750:	cd 01       	movw	r24, r26
    1752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	9c 8b       	std	Y+20, r25	; 0x14
    175c:	8b 8b       	std	Y+19, r24	; 0x13
    175e:	0f c0       	rjmp	.+30     	; 0x177e <main+0x56e>
    1760:	88 ec       	ldi	r24, 0xC8	; 200
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	9a 8b       	std	Y+18, r25	; 0x12
    1766:	89 8b       	std	Y+17, r24	; 0x11
    1768:	89 89       	ldd	r24, Y+17	; 0x11
    176a:	9a 89       	ldd	r25, Y+18	; 0x12
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	f1 f7       	brne	.-4      	; 0x176c <main+0x55c>
    1770:	9a 8b       	std	Y+18, r25	; 0x12
    1772:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1774:	8b 89       	ldd	r24, Y+19	; 0x13
    1776:	9c 89       	ldd	r25, Y+20	; 0x14
    1778:	01 97       	sbiw	r24, 0x01	; 1
    177a:	9c 8b       	std	Y+20, r25	; 0x14
    177c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    177e:	8b 89       	ldd	r24, Y+19	; 0x13
    1780:	9c 89       	ldd	r25, Y+20	; 0x14
    1782:	00 97       	sbiw	r24, 0x00	; 0
    1784:	69 f7       	brne	.-38     	; 0x1760 <main+0x550>
    1786:	14 c0       	rjmp	.+40     	; 0x17b0 <main+0x5a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1788:	6d 89       	ldd	r22, Y+21	; 0x15
    178a:	7e 89       	ldd	r23, Y+22	; 0x16
    178c:	8f 89       	ldd	r24, Y+23	; 0x17
    178e:	98 8d       	ldd	r25, Y+24	; 0x18
    1790:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	9c 8b       	std	Y+20, r25	; 0x14
    179a:	8b 8b       	std	Y+19, r24	; 0x13
    179c:	8b 89       	ldd	r24, Y+19	; 0x13
    179e:	9c 89       	ldd	r25, Y+20	; 0x14
    17a0:	98 8b       	std	Y+16, r25	; 0x10
    17a2:	8f 87       	std	Y+15, r24	; 0x0f
    17a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    17a6:	98 89       	ldd	r25, Y+16	; 0x10
    17a8:	01 97       	sbiw	r24, 0x01	; 1
    17aa:	f1 f7       	brne	.-4      	; 0x17a8 <main+0x598>
    17ac:	98 8b       	std	Y+16, r25	; 0x10
    17ae:	8f 87       	std	Y+15, r24	; 0x0f

				_delay_ms(1000);

				requestPassword();
    17b0:	0e 94 54 07 	call	0xea8	; 0xea8 <requestPassword>
				/* Tell the other MC2 HMI_Password Ready */
				UART_sendByte(HMI_RequestedPasswordReady);
    17b4:	89 e2       	ldi	r24, 0x29	; 41
    17b6:	0e 94 bb 18 	call	0x3176	; 0x3176 <UART_sendByte>
				sendRequestedPassword();
    17ba:	0e 94 ff 07 	call	0xffe	; 0xffe <sendRequestedPassword>
    17be:	3c ce       	rjmp	.-904    	; 0x1438 <main+0x228>
			}
			break;


		case errorScreen :
			g_order=0;
    17c0:	10 92 30 01 	sts	0x0130, r1
			LCD_clearScreen();
    17c4:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <LCD_clearScreen>
			LCD_displayString("ERROR!!");
    17c8:	8c ed       	ldi	r24, 0xDC	; 220
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	0e 94 df 14 	call	0x29be	; 0x29be <LCD_displayString>

			g_tick=0;
    17d0:	10 92 32 01 	sts	0x0132, r1
    17d4:	10 92 31 01 	sts	0x0131, r1
			while(((g_tick) != (1780)));
    17d8:	80 91 31 01 	lds	r24, 0x0131
    17dc:	90 91 32 01 	lds	r25, 0x0132
    17e0:	e6 e0       	ldi	r30, 0x06	; 6
    17e2:	84 3f       	cpi	r24, 0xF4	; 244
    17e4:	9e 07       	cpc	r25, r30
    17e6:	c1 f7       	brne	.-16     	; 0x17d8 <main+0x5c8>

			mainOptions();
    17e8:	0e 94 19 08 	call	0x1032	; 0x1032 <mainOptions>
    17ec:	25 ce       	rjmp	.-950    	; 0x1438 <main+0x228>
			break ;


		case DoorOpening :
			g_order=0;
    17ee:	10 92 30 01 	sts	0x0130, r1
			LCD_clearScreen();
    17f2:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <LCD_clearScreen>
			LCD_displayString("DOOR opening...");
    17f6:	84 ee       	ldi	r24, 0xE4	; 228
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	0e 94 df 14 	call	0x29be	; 0x29be <LCD_displayString>
    17fe:	1c ce       	rjmp	.-968    	; 0x1438 <main+0x228>
			break ;


		case DoorClosing :
			g_order=0;
    1800:	10 92 30 01 	sts	0x0130, r1
			LCD_clearScreen();
    1804:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <LCD_clearScreen>
			LCD_displayString("DOOR closing...");
    1808:	84 ef       	ldi	r24, 0xF4	; 244
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	0e 94 df 14 	call	0x29be	; 0x29be <LCD_displayString>
    1810:	13 ce       	rjmp	.-986    	; 0x1438 <main+0x228>
			break ;


		case DoorIsOpened :
			g_order=0;
    1812:	10 92 30 01 	sts	0x0130, r1
			LCD_clearScreen();
    1816:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <LCD_clearScreen>
			LCD_displayString("DOOR opened");
    181a:	84 e0       	ldi	r24, 0x04	; 4
    181c:	91 e0       	ldi	r25, 0x01	; 1
    181e:	0e 94 df 14 	call	0x29be	; 0x29be <LCD_displayString>
    1822:	0a ce       	rjmp	.-1004   	; 0x1438 <main+0x228>
			break ;


		case DoorIsClosed :
			g_order=0;
    1824:	10 92 30 01 	sts	0x0130, r1
			LCD_clearScreen();
    1828:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <LCD_clearScreen>
			LCD_displayString("DOOR closed");
    182c:	80 e1       	ldi	r24, 0x10	; 16
    182e:	91 e0       	ldi	r25, 0x01	; 1
    1830:	0e 94 df 14 	call	0x29be	; 0x29be <LCD_displayString>
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	aa e7       	ldi	r26, 0x7A	; 122
    183a:	b4 e4       	ldi	r27, 0x44	; 68
    183c:	8b 87       	std	Y+11, r24	; 0x0b
    183e:	9c 87       	std	Y+12, r25	; 0x0c
    1840:	ad 87       	std	Y+13, r26	; 0x0d
    1842:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1844:	6b 85       	ldd	r22, Y+11	; 0x0b
    1846:	7c 85       	ldd	r23, Y+12	; 0x0c
    1848:	8d 85       	ldd	r24, Y+13	; 0x0d
    184a:	9e 85       	ldd	r25, Y+14	; 0x0e
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	4a ef       	ldi	r20, 0xFA	; 250
    1852:	54 e4       	ldi	r21, 0x44	; 68
    1854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	8f 83       	std	Y+7, r24	; 0x07
    185e:	98 87       	std	Y+8, r25	; 0x08
    1860:	a9 87       	std	Y+9, r26	; 0x09
    1862:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1864:	6f 81       	ldd	r22, Y+7	; 0x07
    1866:	78 85       	ldd	r23, Y+8	; 0x08
    1868:	89 85       	ldd	r24, Y+9	; 0x09
    186a:	9a 85       	ldd	r25, Y+10	; 0x0a
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	40 e8       	ldi	r20, 0x80	; 128
    1872:	5f e3       	ldi	r21, 0x3F	; 63
    1874:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1878:	88 23       	and	r24, r24
    187a:	2c f4       	brge	.+10     	; 0x1886 <main+0x676>
		__ticks = 1;
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	9e 83       	std	Y+6, r25	; 0x06
    1882:	8d 83       	std	Y+5, r24	; 0x05
    1884:	3f c0       	rjmp	.+126    	; 0x1904 <main+0x6f4>
	else if (__tmp > 65535)
    1886:	6f 81       	ldd	r22, Y+7	; 0x07
    1888:	78 85       	ldd	r23, Y+8	; 0x08
    188a:	89 85       	ldd	r24, Y+9	; 0x09
    188c:	9a 85       	ldd	r25, Y+10	; 0x0a
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	3f ef       	ldi	r19, 0xFF	; 255
    1892:	4f e7       	ldi	r20, 0x7F	; 127
    1894:	57 e4       	ldi	r21, 0x47	; 71
    1896:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    189a:	18 16       	cp	r1, r24
    189c:	4c f5       	brge	.+82     	; 0x18f0 <main+0x6e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    189e:	6b 85       	ldd	r22, Y+11	; 0x0b
    18a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    18a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	40 e2       	ldi	r20, 0x20	; 32
    18ac:	51 e4       	ldi	r21, 0x41	; 65
    18ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	bc 01       	movw	r22, r24
    18b8:	cd 01       	movw	r24, r26
    18ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	9e 83       	std	Y+6, r25	; 0x06
    18c4:	8d 83       	std	Y+5, r24	; 0x05
    18c6:	0f c0       	rjmp	.+30     	; 0x18e6 <main+0x6d6>
    18c8:	88 ec       	ldi	r24, 0xC8	; 200
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	9c 83       	std	Y+4, r25	; 0x04
    18ce:	8b 83       	std	Y+3, r24	; 0x03
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	9c 81       	ldd	r25, Y+4	; 0x04
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	f1 f7       	brne	.-4      	; 0x18d4 <main+0x6c4>
    18d8:	9c 83       	std	Y+4, r25	; 0x04
    18da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18dc:	8d 81       	ldd	r24, Y+5	; 0x05
    18de:	9e 81       	ldd	r25, Y+6	; 0x06
    18e0:	01 97       	sbiw	r24, 0x01	; 1
    18e2:	9e 83       	std	Y+6, r25	; 0x06
    18e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e6:	8d 81       	ldd	r24, Y+5	; 0x05
    18e8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	69 f7       	brne	.-38     	; 0x18c8 <main+0x6b8>
    18ee:	a4 cd       	rjmp	.-1208   	; 0x1438 <main+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18f0:	6f 81       	ldd	r22, Y+7	; 0x07
    18f2:	78 85       	ldd	r23, Y+8	; 0x08
    18f4:	89 85       	ldd	r24, Y+9	; 0x09
    18f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	9e 83       	std	Y+6, r25	; 0x06
    1902:	8d 83       	std	Y+5, r24	; 0x05
    1904:	8d 81       	ldd	r24, Y+5	; 0x05
    1906:	9e 81       	ldd	r25, Y+6	; 0x06
    1908:	9a 83       	std	Y+2, r25	; 0x02
    190a:	89 83       	std	Y+1, r24	; 0x01
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	9a 81       	ldd	r25, Y+2	; 0x02
    1910:	01 97       	sbiw	r24, 0x01	; 1
    1912:	f1 f7       	brne	.-4      	; 0x1910 <main+0x700>
    1914:	9a 83       	std	Y+2, r25	; 0x02
    1916:	89 83       	std	Y+1, r24	; 0x01
    1918:	8f cd       	rjmp	.-1250   	; 0x1438 <main+0x228>

			break ;


		case RequestPassword :
			g_order=0;
    191a:	10 92 30 01 	sts	0x0130, r1
			requestPassword();
    191e:	0e 94 54 07 	call	0xea8	; 0xea8 <requestPassword>
			/* Tell the other MC2 HMI_RequestedPasswordReady */
			UART_sendByte(HMI_RequestedPasswordReady);
    1922:	89 e2       	ldi	r24, 0x29	; 41
    1924:	0e 94 bb 18 	call	0x3176	; 0x3176 <UART_sendByte>
			sendRequestedPassword();
    1928:	0e 94 ff 07 	call	0xffe	; 0xffe <sendRequestedPassword>
    192c:	85 cd       	rjmp	.-1270   	; 0x1438 <main+0x228>
			break;


		/* */
		default :
			g_order=0;
    192e:	10 92 30 01 	sts	0x0130, r1
    1932:	82 cd       	rjmp	.-1276   	; 0x1438 <main+0x228>

00001934 <GPIO_setupPinDirection>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num , uint8 pin_num , GPIO_PinDirectionType direction){
    1934:	df 93       	push	r29
    1936:	cf 93       	push	r28
    1938:	00 d0       	rcall	.+0      	; 0x193a <GPIO_setupPinDirection+0x6>
    193a:	00 d0       	rcall	.+0      	; 0x193c <GPIO_setupPinDirection+0x8>
    193c:	0f 92       	push	r0
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
    1942:	89 83       	std	Y+1, r24	; 0x01
    1944:	6a 83       	std	Y+2, r22	; 0x02
    1946:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num>=NUM_OF_PORTS) || (pin_num>=NUM_OF_PINS))
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	84 30       	cpi	r24, 0x04	; 4
    194c:	08 f0       	brcs	.+2      	; 0x1950 <GPIO_setupPinDirection+0x1c>
    194e:	d5 c0       	rjmp	.+426    	; 0x1afa <GPIO_setupPinDirection+0x1c6>
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	88 30       	cpi	r24, 0x08	; 8
    1954:	08 f0       	brcs	.+2      	; 0x1958 <GPIO_setupPinDirection+0x24>
    1956:	d1 c0       	rjmp	.+418    	; 0x1afa <GPIO_setupPinDirection+0x1c6>
	{

	}
	else
	{
	switch(port_num){
    1958:	89 81       	ldd	r24, Y+1	; 0x01
    195a:	28 2f       	mov	r18, r24
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	3d 83       	std	Y+5, r19	; 0x05
    1960:	2c 83       	std	Y+4, r18	; 0x04
    1962:	8c 81       	ldd	r24, Y+4	; 0x04
    1964:	9d 81       	ldd	r25, Y+5	; 0x05
    1966:	81 30       	cpi	r24, 0x01	; 1
    1968:	91 05       	cpc	r25, r1
    196a:	09 f4       	brne	.+2      	; 0x196e <GPIO_setupPinDirection+0x3a>
    196c:	43 c0       	rjmp	.+134    	; 0x19f4 <GPIO_setupPinDirection+0xc0>
    196e:	2c 81       	ldd	r18, Y+4	; 0x04
    1970:	3d 81       	ldd	r19, Y+5	; 0x05
    1972:	22 30       	cpi	r18, 0x02	; 2
    1974:	31 05       	cpc	r19, r1
    1976:	2c f4       	brge	.+10     	; 0x1982 <GPIO_setupPinDirection+0x4e>
    1978:	8c 81       	ldd	r24, Y+4	; 0x04
    197a:	9d 81       	ldd	r25, Y+5	; 0x05
    197c:	00 97       	sbiw	r24, 0x00	; 0
    197e:	71 f0       	breq	.+28     	; 0x199c <GPIO_setupPinDirection+0x68>
    1980:	bc c0       	rjmp	.+376    	; 0x1afa <GPIO_setupPinDirection+0x1c6>
    1982:	2c 81       	ldd	r18, Y+4	; 0x04
    1984:	3d 81       	ldd	r19, Y+5	; 0x05
    1986:	22 30       	cpi	r18, 0x02	; 2
    1988:	31 05       	cpc	r19, r1
    198a:	09 f4       	brne	.+2      	; 0x198e <GPIO_setupPinDirection+0x5a>
    198c:	5f c0       	rjmp	.+190    	; 0x1a4c <GPIO_setupPinDirection+0x118>
    198e:	8c 81       	ldd	r24, Y+4	; 0x04
    1990:	9d 81       	ldd	r25, Y+5	; 0x05
    1992:	83 30       	cpi	r24, 0x03	; 3
    1994:	91 05       	cpc	r25, r1
    1996:	09 f4       	brne	.+2      	; 0x199a <GPIO_setupPinDirection+0x66>
    1998:	85 c0       	rjmp	.+266    	; 0x1aa4 <GPIO_setupPinDirection+0x170>
    199a:	af c0       	rjmp	.+350    	; 0x1afa <GPIO_setupPinDirection+0x1c6>

	case PORTA_ID:
		if(direction==PIN_OUTPUT)
    199c:	8b 81       	ldd	r24, Y+3	; 0x03
    199e:	81 30       	cpi	r24, 0x01	; 1
    19a0:	a1 f4       	brne	.+40     	; 0x19ca <GPIO_setupPinDirection+0x96>
		{
			SET_BIT(DIRECTION_REGA,pin_num);
    19a2:	aa e3       	ldi	r26, 0x3A	; 58
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	ea e3       	ldi	r30, 0x3A	; 58
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	48 2f       	mov	r20, r24
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	28 2f       	mov	r18, r24
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	02 2e       	mov	r0, r18
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <GPIO_setupPinDirection+0x8c>
    19bc:	88 0f       	add	r24, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	0a 94       	dec	r0
    19c2:	e2 f7       	brpl	.-8      	; 0x19bc <GPIO_setupPinDirection+0x88>
    19c4:	84 2b       	or	r24, r20
    19c6:	8c 93       	st	X, r24
    19c8:	98 c0       	rjmp	.+304    	; 0x1afa <GPIO_setupPinDirection+0x1c6>
		}
		else
		{
			CLEAR_BIT(DIRECTION_REGA,pin_num);
    19ca:	aa e3       	ldi	r26, 0x3A	; 58
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	ea e3       	ldi	r30, 0x3A	; 58
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	48 2f       	mov	r20, r24
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	28 2f       	mov	r18, r24
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	02 2e       	mov	r0, r18
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <GPIO_setupPinDirection+0xb4>
    19e4:	88 0f       	add	r24, r24
    19e6:	99 1f       	adc	r25, r25
    19e8:	0a 94       	dec	r0
    19ea:	e2 f7       	brpl	.-8      	; 0x19e4 <GPIO_setupPinDirection+0xb0>
    19ec:	80 95       	com	r24
    19ee:	84 23       	and	r24, r20
    19f0:	8c 93       	st	X, r24
    19f2:	83 c0       	rjmp	.+262    	; 0x1afa <GPIO_setupPinDirection+0x1c6>
		}
		break;
	case PORTB_ID:
		if(direction==PIN_OUTPUT)
    19f4:	8b 81       	ldd	r24, Y+3	; 0x03
    19f6:	81 30       	cpi	r24, 0x01	; 1
    19f8:	a1 f4       	brne	.+40     	; 0x1a22 <GPIO_setupPinDirection+0xee>
		{
			SET_BIT(DIRECTION_REGB,pin_num);
    19fa:	a7 e3       	ldi	r26, 0x37	; 55
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	e7 e3       	ldi	r30, 0x37	; 55
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	48 2f       	mov	r20, r24
    1a06:	8a 81       	ldd	r24, Y+2	; 0x02
    1a08:	28 2f       	mov	r18, r24
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	02 2e       	mov	r0, r18
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <GPIO_setupPinDirection+0xe4>
    1a14:	88 0f       	add	r24, r24
    1a16:	99 1f       	adc	r25, r25
    1a18:	0a 94       	dec	r0
    1a1a:	e2 f7       	brpl	.-8      	; 0x1a14 <GPIO_setupPinDirection+0xe0>
    1a1c:	84 2b       	or	r24, r20
    1a1e:	8c 93       	st	X, r24
    1a20:	6c c0       	rjmp	.+216    	; 0x1afa <GPIO_setupPinDirection+0x1c6>
		}
		else
		{
			CLEAR_BIT(DIRECTION_REGB,pin_num);
    1a22:	a7 e3       	ldi	r26, 0x37	; 55
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e7 e3       	ldi	r30, 0x37	; 55
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	48 2f       	mov	r20, r24
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	28 2f       	mov	r18, r24
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	02 2e       	mov	r0, r18
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <GPIO_setupPinDirection+0x10c>
    1a3c:	88 0f       	add	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	0a 94       	dec	r0
    1a42:	e2 f7       	brpl	.-8      	; 0x1a3c <GPIO_setupPinDirection+0x108>
    1a44:	80 95       	com	r24
    1a46:	84 23       	and	r24, r20
    1a48:	8c 93       	st	X, r24
    1a4a:	57 c0       	rjmp	.+174    	; 0x1afa <GPIO_setupPinDirection+0x1c6>
		}
		break;
	case PORTC_ID:
		if(direction==PIN_OUTPUT)
    1a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4e:	81 30       	cpi	r24, 0x01	; 1
    1a50:	a1 f4       	brne	.+40     	; 0x1a7a <GPIO_setupPinDirection+0x146>
		{
			SET_BIT(DIRECTION_REGC,pin_num);
    1a52:	a4 e3       	ldi	r26, 0x34	; 52
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	e4 e3       	ldi	r30, 0x34	; 52
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	48 2f       	mov	r20, r24
    1a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a60:	28 2f       	mov	r18, r24
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	02 2e       	mov	r0, r18
    1a6a:	02 c0       	rjmp	.+4      	; 0x1a70 <GPIO_setupPinDirection+0x13c>
    1a6c:	88 0f       	add	r24, r24
    1a6e:	99 1f       	adc	r25, r25
    1a70:	0a 94       	dec	r0
    1a72:	e2 f7       	brpl	.-8      	; 0x1a6c <GPIO_setupPinDirection+0x138>
    1a74:	84 2b       	or	r24, r20
    1a76:	8c 93       	st	X, r24
    1a78:	40 c0       	rjmp	.+128    	; 0x1afa <GPIO_setupPinDirection+0x1c6>
		}
		else
		{
			CLEAR_BIT(DIRECTION_REGC,pin_num);
    1a7a:	a4 e3       	ldi	r26, 0x34	; 52
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	e4 e3       	ldi	r30, 0x34	; 52
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	48 2f       	mov	r20, r24
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	28 2f       	mov	r18, r24
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	02 2e       	mov	r0, r18
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <GPIO_setupPinDirection+0x164>
    1a94:	88 0f       	add	r24, r24
    1a96:	99 1f       	adc	r25, r25
    1a98:	0a 94       	dec	r0
    1a9a:	e2 f7       	brpl	.-8      	; 0x1a94 <GPIO_setupPinDirection+0x160>
    1a9c:	80 95       	com	r24
    1a9e:	84 23       	and	r24, r20
    1aa0:	8c 93       	st	X, r24
    1aa2:	2b c0       	rjmp	.+86     	; 0x1afa <GPIO_setupPinDirection+0x1c6>
		}
		break;
	case PORTD_ID:
		if(direction==PIN_OUTPUT)
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	81 30       	cpi	r24, 0x01	; 1
    1aa8:	a1 f4       	brne	.+40     	; 0x1ad2 <GPIO_setupPinDirection+0x19e>
		{
			SET_BIT(DIRECTION_REGD,pin_num);
    1aaa:	a1 e3       	ldi	r26, 0x31	; 49
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	e1 e3       	ldi	r30, 0x31	; 49
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	48 2f       	mov	r20, r24
    1ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab8:	28 2f       	mov	r18, r24
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	02 2e       	mov	r0, r18
    1ac2:	02 c0       	rjmp	.+4      	; 0x1ac8 <GPIO_setupPinDirection+0x194>
    1ac4:	88 0f       	add	r24, r24
    1ac6:	99 1f       	adc	r25, r25
    1ac8:	0a 94       	dec	r0
    1aca:	e2 f7       	brpl	.-8      	; 0x1ac4 <GPIO_setupPinDirection+0x190>
    1acc:	84 2b       	or	r24, r20
    1ace:	8c 93       	st	X, r24
    1ad0:	14 c0       	rjmp	.+40     	; 0x1afa <GPIO_setupPinDirection+0x1c6>
		}
		else
		{
			CLEAR_BIT(DIRECTION_REGD,pin_num);
    1ad2:	a1 e3       	ldi	r26, 0x31	; 49
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	e1 e3       	ldi	r30, 0x31	; 49
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	48 2f       	mov	r20, r24
    1ade:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae0:	28 2f       	mov	r18, r24
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	02 2e       	mov	r0, r18
    1aea:	02 c0       	rjmp	.+4      	; 0x1af0 <GPIO_setupPinDirection+0x1bc>
    1aec:	88 0f       	add	r24, r24
    1aee:	99 1f       	adc	r25, r25
    1af0:	0a 94       	dec	r0
    1af2:	e2 f7       	brpl	.-8      	; 0x1aec <GPIO_setupPinDirection+0x1b8>
    1af4:	80 95       	com	r24
    1af6:	84 23       	and	r24, r20
    1af8:	8c 93       	st	X, r24
		}
		break;
	}
	}
}
    1afa:	0f 90       	pop	r0
    1afc:	0f 90       	pop	r0
    1afe:	0f 90       	pop	r0
    1b00:	0f 90       	pop	r0
    1b02:	0f 90       	pop	r0
    1b04:	cf 91       	pop	r28
    1b06:	df 91       	pop	r29
    1b08:	08 95       	ret

00001b0a <GPIO_writePin>:
 * Description :
 * write the required pin 0/1.
 * If the input port number or pin number or value are not correct, The function will not handle the request.
 * If the pinDirection is input this function will enable/disable the internal pull-up resistor of AVR.
 */
void GPIO_writePin(uint8 port_num,uint8 pin_num,uint8 value){
    1b0a:	df 93       	push	r29
    1b0c:	cf 93       	push	r28
    1b0e:	00 d0       	rcall	.+0      	; 0x1b10 <GPIO_writePin+0x6>
    1b10:	00 d0       	rcall	.+0      	; 0x1b12 <GPIO_writePin+0x8>
    1b12:	0f 92       	push	r0
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
    1b18:	89 83       	std	Y+1, r24	; 0x01
    1b1a:	6a 83       	std	Y+2, r22	; 0x02
    1b1c:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num>=NUM_OF_PORTS) || (pin_num>=NUM_OF_PINS) || (value>1))
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	84 30       	cpi	r24, 0x04	; 4
    1b22:	08 f0       	brcs	.+2      	; 0x1b26 <GPIO_writePin+0x1c>
    1b24:	d9 c0       	rjmp	.+434    	; 0x1cd8 <GPIO_writePin+0x1ce>
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	88 30       	cpi	r24, 0x08	; 8
    1b2a:	08 f0       	brcs	.+2      	; 0x1b2e <GPIO_writePin+0x24>
    1b2c:	d5 c0       	rjmp	.+426    	; 0x1cd8 <GPIO_writePin+0x1ce>
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	82 30       	cpi	r24, 0x02	; 2
    1b32:	08 f0       	brcs	.+2      	; 0x1b36 <GPIO_writePin+0x2c>
    1b34:	d1 c0       	rjmp	.+418    	; 0x1cd8 <GPIO_writePin+0x1ce>
	{

	}
	else
	{
	switch(port_num){
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
    1b38:	28 2f       	mov	r18, r24
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	3d 83       	std	Y+5, r19	; 0x05
    1b3e:	2c 83       	std	Y+4, r18	; 0x04
    1b40:	8c 81       	ldd	r24, Y+4	; 0x04
    1b42:	9d 81       	ldd	r25, Y+5	; 0x05
    1b44:	81 30       	cpi	r24, 0x01	; 1
    1b46:	91 05       	cpc	r25, r1
    1b48:	09 f4       	brne	.+2      	; 0x1b4c <GPIO_writePin+0x42>
    1b4a:	43 c0       	rjmp	.+134    	; 0x1bd2 <GPIO_writePin+0xc8>
    1b4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b50:	22 30       	cpi	r18, 0x02	; 2
    1b52:	31 05       	cpc	r19, r1
    1b54:	2c f4       	brge	.+10     	; 0x1b60 <GPIO_writePin+0x56>
    1b56:	8c 81       	ldd	r24, Y+4	; 0x04
    1b58:	9d 81       	ldd	r25, Y+5	; 0x05
    1b5a:	00 97       	sbiw	r24, 0x00	; 0
    1b5c:	71 f0       	breq	.+28     	; 0x1b7a <GPIO_writePin+0x70>
    1b5e:	bc c0       	rjmp	.+376    	; 0x1cd8 <GPIO_writePin+0x1ce>
    1b60:	2c 81       	ldd	r18, Y+4	; 0x04
    1b62:	3d 81       	ldd	r19, Y+5	; 0x05
    1b64:	22 30       	cpi	r18, 0x02	; 2
    1b66:	31 05       	cpc	r19, r1
    1b68:	09 f4       	brne	.+2      	; 0x1b6c <GPIO_writePin+0x62>
    1b6a:	5f c0       	rjmp	.+190    	; 0x1c2a <GPIO_writePin+0x120>
    1b6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b70:	83 30       	cpi	r24, 0x03	; 3
    1b72:	91 05       	cpc	r25, r1
    1b74:	09 f4       	brne	.+2      	; 0x1b78 <GPIO_writePin+0x6e>
    1b76:	85 c0       	rjmp	.+266    	; 0x1c82 <GPIO_writePin+0x178>
    1b78:	af c0       	rjmp	.+350    	; 0x1cd8 <GPIO_writePin+0x1ce>

	case PORTA_ID:
		if(value==LOGIC_HIGH)
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	81 30       	cpi	r24, 0x01	; 1
    1b7e:	a1 f4       	brne	.+40     	; 0x1ba8 <GPIO_writePin+0x9e>
		{
			SET_BIT(OUTPUT_REGA,pin_num);
    1b80:	ab e3       	ldi	r26, 0x3B	; 59
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	eb e3       	ldi	r30, 0x3B	; 59
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	48 2f       	mov	r20, r24
    1b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8e:	28 2f       	mov	r18, r24
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	02 2e       	mov	r0, r18
    1b98:	02 c0       	rjmp	.+4      	; 0x1b9e <GPIO_writePin+0x94>
    1b9a:	88 0f       	add	r24, r24
    1b9c:	99 1f       	adc	r25, r25
    1b9e:	0a 94       	dec	r0
    1ba0:	e2 f7       	brpl	.-8      	; 0x1b9a <GPIO_writePin+0x90>
    1ba2:	84 2b       	or	r24, r20
    1ba4:	8c 93       	st	X, r24
    1ba6:	98 c0       	rjmp	.+304    	; 0x1cd8 <GPIO_writePin+0x1ce>
		}
		else
		{
			CLEAR_BIT(OUTPUT_REGA,pin_num);
    1ba8:	ab e3       	ldi	r26, 0x3B	; 59
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	eb e3       	ldi	r30, 0x3B	; 59
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	48 2f       	mov	r20, r24
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	02 2e       	mov	r0, r18
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <GPIO_writePin+0xbc>
    1bc2:	88 0f       	add	r24, r24
    1bc4:	99 1f       	adc	r25, r25
    1bc6:	0a 94       	dec	r0
    1bc8:	e2 f7       	brpl	.-8      	; 0x1bc2 <GPIO_writePin+0xb8>
    1bca:	80 95       	com	r24
    1bcc:	84 23       	and	r24, r20
    1bce:	8c 93       	st	X, r24
    1bd0:	83 c0       	rjmp	.+262    	; 0x1cd8 <GPIO_writePin+0x1ce>
		}
		break;
	case PORTB_ID:
		if(value==LOGIC_HIGH)
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	81 30       	cpi	r24, 0x01	; 1
    1bd6:	a1 f4       	brne	.+40     	; 0x1c00 <GPIO_writePin+0xf6>
		{
			SET_BIT(OUTPUT_REGB,pin_num);
    1bd8:	a8 e3       	ldi	r26, 0x38	; 56
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	e8 e3       	ldi	r30, 0x38	; 56
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	48 2f       	mov	r20, r24
    1be4:	8a 81       	ldd	r24, Y+2	; 0x02
    1be6:	28 2f       	mov	r18, r24
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	02 2e       	mov	r0, r18
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <GPIO_writePin+0xec>
    1bf2:	88 0f       	add	r24, r24
    1bf4:	99 1f       	adc	r25, r25
    1bf6:	0a 94       	dec	r0
    1bf8:	e2 f7       	brpl	.-8      	; 0x1bf2 <GPIO_writePin+0xe8>
    1bfa:	84 2b       	or	r24, r20
    1bfc:	8c 93       	st	X, r24
    1bfe:	6c c0       	rjmp	.+216    	; 0x1cd8 <GPIO_writePin+0x1ce>
		}
		else
		{
			CLEAR_BIT(OUTPUT_REGB,pin_num);
    1c00:	a8 e3       	ldi	r26, 0x38	; 56
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	e8 e3       	ldi	r30, 0x38	; 56
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	48 2f       	mov	r20, r24
    1c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0e:	28 2f       	mov	r18, r24
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	02 2e       	mov	r0, r18
    1c18:	02 c0       	rjmp	.+4      	; 0x1c1e <GPIO_writePin+0x114>
    1c1a:	88 0f       	add	r24, r24
    1c1c:	99 1f       	adc	r25, r25
    1c1e:	0a 94       	dec	r0
    1c20:	e2 f7       	brpl	.-8      	; 0x1c1a <GPIO_writePin+0x110>
    1c22:	80 95       	com	r24
    1c24:	84 23       	and	r24, r20
    1c26:	8c 93       	st	X, r24
    1c28:	57 c0       	rjmp	.+174    	; 0x1cd8 <GPIO_writePin+0x1ce>
		}
		break;
	case PORTC_ID:
		if(value==LOGIC_HIGH)
    1c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2c:	81 30       	cpi	r24, 0x01	; 1
    1c2e:	a1 f4       	brne	.+40     	; 0x1c58 <GPIO_writePin+0x14e>
		{
			SET_BIT(OUTPUT_REGC,pin_num);
    1c30:	a5 e3       	ldi	r26, 0x35	; 53
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	e5 e3       	ldi	r30, 0x35	; 53
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	48 2f       	mov	r20, r24
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	28 2f       	mov	r18, r24
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	02 2e       	mov	r0, r18
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <GPIO_writePin+0x144>
    1c4a:	88 0f       	add	r24, r24
    1c4c:	99 1f       	adc	r25, r25
    1c4e:	0a 94       	dec	r0
    1c50:	e2 f7       	brpl	.-8      	; 0x1c4a <GPIO_writePin+0x140>
    1c52:	84 2b       	or	r24, r20
    1c54:	8c 93       	st	X, r24
    1c56:	40 c0       	rjmp	.+128    	; 0x1cd8 <GPIO_writePin+0x1ce>
		}
		else
		{
			CLEAR_BIT(OUTPUT_REGC,pin_num);
    1c58:	a5 e3       	ldi	r26, 0x35	; 53
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e5 e3       	ldi	r30, 0x35	; 53
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	48 2f       	mov	r20, r24
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	02 2e       	mov	r0, r18
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <GPIO_writePin+0x16c>
    1c72:	88 0f       	add	r24, r24
    1c74:	99 1f       	adc	r25, r25
    1c76:	0a 94       	dec	r0
    1c78:	e2 f7       	brpl	.-8      	; 0x1c72 <GPIO_writePin+0x168>
    1c7a:	80 95       	com	r24
    1c7c:	84 23       	and	r24, r20
    1c7e:	8c 93       	st	X, r24
    1c80:	2b c0       	rjmp	.+86     	; 0x1cd8 <GPIO_writePin+0x1ce>
		}
		break;
	case PORTD_ID:
		if(value==LOGIC_HIGH)
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	81 30       	cpi	r24, 0x01	; 1
    1c86:	a1 f4       	brne	.+40     	; 0x1cb0 <GPIO_writePin+0x1a6>
		{
			SET_BIT(OUTPUT_REGD,pin_num);
    1c88:	a2 e3       	ldi	r26, 0x32	; 50
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	e2 e3       	ldi	r30, 0x32	; 50
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	48 2f       	mov	r20, r24
    1c94:	8a 81       	ldd	r24, Y+2	; 0x02
    1c96:	28 2f       	mov	r18, r24
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	02 2e       	mov	r0, r18
    1ca0:	02 c0       	rjmp	.+4      	; 0x1ca6 <GPIO_writePin+0x19c>
    1ca2:	88 0f       	add	r24, r24
    1ca4:	99 1f       	adc	r25, r25
    1ca6:	0a 94       	dec	r0
    1ca8:	e2 f7       	brpl	.-8      	; 0x1ca2 <GPIO_writePin+0x198>
    1caa:	84 2b       	or	r24, r20
    1cac:	8c 93       	st	X, r24
    1cae:	14 c0       	rjmp	.+40     	; 0x1cd8 <GPIO_writePin+0x1ce>
		}
		else
		{
			CLEAR_BIT(OUTPUT_REGD,pin_num);
    1cb0:	a2 e3       	ldi	r26, 0x32	; 50
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	e2 e3       	ldi	r30, 0x32	; 50
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	48 2f       	mov	r20, r24
    1cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbe:	28 2f       	mov	r18, r24
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	02 2e       	mov	r0, r18
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <GPIO_writePin+0x1c4>
    1cca:	88 0f       	add	r24, r24
    1ccc:	99 1f       	adc	r25, r25
    1cce:	0a 94       	dec	r0
    1cd0:	e2 f7       	brpl	.-8      	; 0x1cca <GPIO_writePin+0x1c0>
    1cd2:	80 95       	com	r24
    1cd4:	84 23       	and	r24, r20
    1cd6:	8c 93       	st	X, r24
		}
		break;
	}
	}
}
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	0f 90       	pop	r0
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	08 95       	ret

00001ce8 <GPIO_readPin>:
/*
 * Description :
 * Read the required pin 0/1 and returns it.
 * If the input port number or pin number or value are not correct, The function will not handle the request and returns logical low value.
 */
uint8 GPIO_readPin(uint8 port_num,uint8 pin_num){
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	00 d0       	rcall	.+0      	; 0x1cee <GPIO_readPin+0x6>
    1cee:	00 d0       	rcall	.+0      	; 0x1cf0 <GPIO_readPin+0x8>
    1cf0:	0f 92       	push	r0
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
    1cf6:	8a 83       	std	Y+2, r24	; 0x02
    1cf8:	6b 83       	std	Y+3, r22	; 0x03

	uint8 readValue=LOGIC_LOW;
    1cfa:	19 82       	std	Y+1, r1	; 0x01

	if((port_num>=NUM_OF_PORTS) || (pin_num>=NUM_OF_PINS))
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	84 30       	cpi	r24, 0x04	; 4
    1d00:	08 f0       	brcs	.+2      	; 0x1d04 <GPIO_readPin+0x1c>
    1d02:	84 c0       	rjmp	.+264    	; 0x1e0c <GPIO_readPin+0x124>
    1d04:	8b 81       	ldd	r24, Y+3	; 0x03
    1d06:	88 30       	cpi	r24, 0x08	; 8
    1d08:	08 f0       	brcs	.+2      	; 0x1d0c <GPIO_readPin+0x24>
    1d0a:	80 c0       	rjmp	.+256    	; 0x1e0c <GPIO_readPin+0x124>
	{

	}
	else
	{
	switch(port_num){
    1d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0e:	28 2f       	mov	r18, r24
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	3d 83       	std	Y+5, r19	; 0x05
    1d14:	2c 83       	std	Y+4, r18	; 0x04
    1d16:	4c 81       	ldd	r20, Y+4	; 0x04
    1d18:	5d 81       	ldd	r21, Y+5	; 0x05
    1d1a:	41 30       	cpi	r20, 0x01	; 1
    1d1c:	51 05       	cpc	r21, r1
    1d1e:	79 f1       	breq	.+94     	; 0x1d7e <GPIO_readPin+0x96>
    1d20:	8c 81       	ldd	r24, Y+4	; 0x04
    1d22:	9d 81       	ldd	r25, Y+5	; 0x05
    1d24:	82 30       	cpi	r24, 0x02	; 2
    1d26:	91 05       	cpc	r25, r1
    1d28:	34 f4       	brge	.+12     	; 0x1d36 <GPIO_readPin+0x4e>
    1d2a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d2c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d2e:	21 15       	cp	r18, r1
    1d30:	31 05       	cpc	r19, r1
    1d32:	69 f0       	breq	.+26     	; 0x1d4e <GPIO_readPin+0x66>
    1d34:	6b c0       	rjmp	.+214    	; 0x1e0c <GPIO_readPin+0x124>
    1d36:	4c 81       	ldd	r20, Y+4	; 0x04
    1d38:	5d 81       	ldd	r21, Y+5	; 0x05
    1d3a:	42 30       	cpi	r20, 0x02	; 2
    1d3c:	51 05       	cpc	r21, r1
    1d3e:	b9 f1       	breq	.+110    	; 0x1dae <GPIO_readPin+0xc6>
    1d40:	8c 81       	ldd	r24, Y+4	; 0x04
    1d42:	9d 81       	ldd	r25, Y+5	; 0x05
    1d44:	83 30       	cpi	r24, 0x03	; 3
    1d46:	91 05       	cpc	r25, r1
    1d48:	09 f4       	brne	.+2      	; 0x1d4c <GPIO_readPin+0x64>
    1d4a:	49 c0       	rjmp	.+146    	; 0x1dde <GPIO_readPin+0xf6>
    1d4c:	5f c0       	rjmp	.+190    	; 0x1e0c <GPIO_readPin+0x124>

	case PORTA_ID:
		if(BIT_IS_SET(INPUT_REGA,pin_num))
    1d4e:	e9 e3       	ldi	r30, 0x39	; 57
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	28 2f       	mov	r18, r24
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5a:	88 2f       	mov	r24, r24
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	a9 01       	movw	r20, r18
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <GPIO_readPin+0x7e>
    1d62:	55 95       	asr	r21
    1d64:	47 95       	ror	r20
    1d66:	8a 95       	dec	r24
    1d68:	e2 f7       	brpl	.-8      	; 0x1d62 <GPIO_readPin+0x7a>
    1d6a:	ca 01       	movw	r24, r20
    1d6c:	81 70       	andi	r24, 0x01	; 1
    1d6e:	90 70       	andi	r25, 0x00	; 0
    1d70:	88 23       	and	r24, r24
    1d72:	19 f0       	breq	.+6      	; 0x1d7a <GPIO_readPin+0x92>
		{
			readValue=LOGIC_HIGH;
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	89 83       	std	Y+1, r24	; 0x01
    1d78:	49 c0       	rjmp	.+146    	; 0x1e0c <GPIO_readPin+0x124>
		}
		else
		{
			readValue=LOGIC_LOW;
    1d7a:	19 82       	std	Y+1, r1	; 0x01
    1d7c:	47 c0       	rjmp	.+142    	; 0x1e0c <GPIO_readPin+0x124>
		}
		break;
	case PORTB_ID:
		if(BIT_IS_SET(INPUT_REGB,pin_num))
    1d7e:	e6 e3       	ldi	r30, 0x36	; 54
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	28 2f       	mov	r18, r24
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8a:	88 2f       	mov	r24, r24
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	a9 01       	movw	r20, r18
    1d90:	02 c0       	rjmp	.+4      	; 0x1d96 <GPIO_readPin+0xae>
    1d92:	55 95       	asr	r21
    1d94:	47 95       	ror	r20
    1d96:	8a 95       	dec	r24
    1d98:	e2 f7       	brpl	.-8      	; 0x1d92 <GPIO_readPin+0xaa>
    1d9a:	ca 01       	movw	r24, r20
    1d9c:	81 70       	andi	r24, 0x01	; 1
    1d9e:	90 70       	andi	r25, 0x00	; 0
    1da0:	88 23       	and	r24, r24
    1da2:	19 f0       	breq	.+6      	; 0x1daa <GPIO_readPin+0xc2>
		{
			readValue=LOGIC_HIGH;
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	89 83       	std	Y+1, r24	; 0x01
    1da8:	31 c0       	rjmp	.+98     	; 0x1e0c <GPIO_readPin+0x124>
		}
		else
		{
			readValue=LOGIC_LOW;
    1daa:	19 82       	std	Y+1, r1	; 0x01
    1dac:	2f c0       	rjmp	.+94     	; 0x1e0c <GPIO_readPin+0x124>
		}
		break;
	case PORTC_ID:
		if(BIT_IS_SET(INPUT_REGC,pin_num))
    1dae:	e3 e3       	ldi	r30, 0x33	; 51
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	28 2f       	mov	r18, r24
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	88 2f       	mov	r24, r24
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	a9 01       	movw	r20, r18
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <GPIO_readPin+0xde>
    1dc2:	55 95       	asr	r21
    1dc4:	47 95       	ror	r20
    1dc6:	8a 95       	dec	r24
    1dc8:	e2 f7       	brpl	.-8      	; 0x1dc2 <GPIO_readPin+0xda>
    1dca:	ca 01       	movw	r24, r20
    1dcc:	81 70       	andi	r24, 0x01	; 1
    1dce:	90 70       	andi	r25, 0x00	; 0
    1dd0:	88 23       	and	r24, r24
    1dd2:	19 f0       	breq	.+6      	; 0x1dda <GPIO_readPin+0xf2>
		{
			readValue=LOGIC_HIGH;
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	89 83       	std	Y+1, r24	; 0x01
    1dd8:	19 c0       	rjmp	.+50     	; 0x1e0c <GPIO_readPin+0x124>
		}
		else
		{
			readValue=LOGIC_LOW;
    1dda:	19 82       	std	Y+1, r1	; 0x01
    1ddc:	17 c0       	rjmp	.+46     	; 0x1e0c <GPIO_readPin+0x124>
		}
		break;
	case PORTD_ID:
		if(BIT_IS_SET(INPUT_REGD,pin_num))
    1dde:	e0 e3       	ldi	r30, 0x30	; 48
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	28 2f       	mov	r18, r24
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dea:	88 2f       	mov	r24, r24
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	a9 01       	movw	r20, r18
    1df0:	02 c0       	rjmp	.+4      	; 0x1df6 <GPIO_readPin+0x10e>
    1df2:	55 95       	asr	r21
    1df4:	47 95       	ror	r20
    1df6:	8a 95       	dec	r24
    1df8:	e2 f7       	brpl	.-8      	; 0x1df2 <GPIO_readPin+0x10a>
    1dfa:	ca 01       	movw	r24, r20
    1dfc:	81 70       	andi	r24, 0x01	; 1
    1dfe:	90 70       	andi	r25, 0x00	; 0
    1e00:	88 23       	and	r24, r24
    1e02:	19 f0       	breq	.+6      	; 0x1e0a <GPIO_readPin+0x122>
		{
			readValue=LOGIC_HIGH;
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	89 83       	std	Y+1, r24	; 0x01
    1e08:	01 c0       	rjmp	.+2      	; 0x1e0c <GPIO_readPin+0x124>
		}
		else
		{
			readValue=LOGIC_LOW;
    1e0a:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
	}
	}
	return readValue;
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	0f 90       	pop	r0
    1e14:	0f 90       	pop	r0
    1e16:	0f 90       	pop	r0
    1e18:	cf 91       	pop	r28
    1e1a:	df 91       	pop	r29
    1e1c:	08 95       	ret

00001e1e <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num,GPIO_PortDirectionType direction){
    1e1e:	df 93       	push	r29
    1e20:	cf 93       	push	r28
    1e22:	00 d0       	rcall	.+0      	; 0x1e24 <GPIO_setupPortDirection+0x6>
    1e24:	00 d0       	rcall	.+0      	; 0x1e26 <GPIO_setupPortDirection+0x8>
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
    1e2a:	89 83       	std	Y+1, r24	; 0x01
    1e2c:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num>=NUM_OF_PORTS))
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	84 30       	cpi	r24, 0x04	; 4
    1e32:	90 f5       	brcc	.+100    	; 0x1e98 <GPIO_setupPortDirection+0x7a>
	{

	}
	else
	{
	switch(port_num){
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
    1e36:	28 2f       	mov	r18, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	3c 83       	std	Y+4, r19	; 0x04
    1e3c:	2b 83       	std	Y+3, r18	; 0x03
    1e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e40:	9c 81       	ldd	r25, Y+4	; 0x04
    1e42:	81 30       	cpi	r24, 0x01	; 1
    1e44:	91 05       	cpc	r25, r1
    1e46:	d1 f0       	breq	.+52     	; 0x1e7c <GPIO_setupPortDirection+0x5e>
    1e48:	2b 81       	ldd	r18, Y+3	; 0x03
    1e4a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e4c:	22 30       	cpi	r18, 0x02	; 2
    1e4e:	31 05       	cpc	r19, r1
    1e50:	2c f4       	brge	.+10     	; 0x1e5c <GPIO_setupPortDirection+0x3e>
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	9c 81       	ldd	r25, Y+4	; 0x04
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	61 f0       	breq	.+24     	; 0x1e72 <GPIO_setupPortDirection+0x54>
    1e5a:	1e c0       	rjmp	.+60     	; 0x1e98 <GPIO_setupPortDirection+0x7a>
    1e5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e60:	22 30       	cpi	r18, 0x02	; 2
    1e62:	31 05       	cpc	r19, r1
    1e64:	81 f0       	breq	.+32     	; 0x1e86 <GPIO_setupPortDirection+0x68>
    1e66:	8b 81       	ldd	r24, Y+3	; 0x03
    1e68:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6a:	83 30       	cpi	r24, 0x03	; 3
    1e6c:	91 05       	cpc	r25, r1
    1e6e:	81 f0       	breq	.+32     	; 0x1e90 <GPIO_setupPortDirection+0x72>
    1e70:	13 c0       	rjmp	.+38     	; 0x1e98 <GPIO_setupPortDirection+0x7a>

	case PORTA_ID:
		DIRECTION_REGA=direction;
    1e72:	ea e3       	ldi	r30, 0x3A	; 58
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	8a 81       	ldd	r24, Y+2	; 0x02
    1e78:	80 83       	st	Z, r24
    1e7a:	0e c0       	rjmp	.+28     	; 0x1e98 <GPIO_setupPortDirection+0x7a>
		break;
	case PORTB_ID:
		DIRECTION_REGB=direction;
    1e7c:	e7 e3       	ldi	r30, 0x37	; 55
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	8a 81       	ldd	r24, Y+2	; 0x02
    1e82:	80 83       	st	Z, r24
    1e84:	09 c0       	rjmp	.+18     	; 0x1e98 <GPIO_setupPortDirection+0x7a>
		break;
	case PORTC_ID:
		DIRECTION_REGC=direction;
    1e86:	e4 e3       	ldi	r30, 0x34	; 52
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8c:	80 83       	st	Z, r24
    1e8e:	04 c0       	rjmp	.+8      	; 0x1e98 <GPIO_setupPortDirection+0x7a>
		break;
	case PORTD_ID:
		DIRECTION_REGD=direction;
    1e90:	e1 e3       	ldi	r30, 0x31	; 49
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	8a 81       	ldd	r24, Y+2	; 0x02
    1e96:	80 83       	st	Z, r24
		break;
	}
	}
}
    1e98:	0f 90       	pop	r0
    1e9a:	0f 90       	pop	r0
    1e9c:	0f 90       	pop	r0
    1e9e:	0f 90       	pop	r0
    1ea0:	cf 91       	pop	r28
    1ea2:	df 91       	pop	r29
    1ea4:	08 95       	ret

00001ea6 <GPIO_writePort>:
/*
 * Description :
 * Write all pins of the required port by a an entered value.
 * If the input port number or value is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num,uint8 value){
    1ea6:	df 93       	push	r29
    1ea8:	cf 93       	push	r28
    1eaa:	00 d0       	rcall	.+0      	; 0x1eac <GPIO_writePort+0x6>
    1eac:	00 d0       	rcall	.+0      	; 0x1eae <GPIO_writePort+0x8>
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
    1eb2:	89 83       	std	Y+1, r24	; 0x01
    1eb4:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num>=NUM_OF_PORTS) || (value>255))
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	84 30       	cpi	r24, 0x04	; 4
    1eba:	90 f5       	brcc	.+100    	; 0x1f20 <GPIO_writePort+0x7a>
	{

	}
	else
	{
	switch(port_num){
    1ebc:	89 81       	ldd	r24, Y+1	; 0x01
    1ebe:	28 2f       	mov	r18, r24
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	3c 83       	std	Y+4, r19	; 0x04
    1ec4:	2b 83       	std	Y+3, r18	; 0x03
    1ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eca:	81 30       	cpi	r24, 0x01	; 1
    1ecc:	91 05       	cpc	r25, r1
    1ece:	d1 f0       	breq	.+52     	; 0x1f04 <GPIO_writePort+0x5e>
    1ed0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ed2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ed4:	22 30       	cpi	r18, 0x02	; 2
    1ed6:	31 05       	cpc	r19, r1
    1ed8:	2c f4       	brge	.+10     	; 0x1ee4 <GPIO_writePort+0x3e>
    1eda:	8b 81       	ldd	r24, Y+3	; 0x03
    1edc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ede:	00 97       	sbiw	r24, 0x00	; 0
    1ee0:	61 f0       	breq	.+24     	; 0x1efa <GPIO_writePort+0x54>
    1ee2:	1e c0       	rjmp	.+60     	; 0x1f20 <GPIO_writePort+0x7a>
    1ee4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ee6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ee8:	22 30       	cpi	r18, 0x02	; 2
    1eea:	31 05       	cpc	r19, r1
    1eec:	81 f0       	breq	.+32     	; 0x1f0e <GPIO_writePort+0x68>
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef2:	83 30       	cpi	r24, 0x03	; 3
    1ef4:	91 05       	cpc	r25, r1
    1ef6:	81 f0       	breq	.+32     	; 0x1f18 <GPIO_writePort+0x72>
    1ef8:	13 c0       	rjmp	.+38     	; 0x1f20 <GPIO_writePort+0x7a>

	case PORTA_ID:
		OUTPUT_REGA=value;
    1efa:	eb e3       	ldi	r30, 0x3B	; 59
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	8a 81       	ldd	r24, Y+2	; 0x02
    1f00:	80 83       	st	Z, r24
    1f02:	0e c0       	rjmp	.+28     	; 0x1f20 <GPIO_writePort+0x7a>
		break;
	case PORTB_ID:
		OUTPUT_REGB=value;
    1f04:	e8 e3       	ldi	r30, 0x38	; 56
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0a:	80 83       	st	Z, r24
    1f0c:	09 c0       	rjmp	.+18     	; 0x1f20 <GPIO_writePort+0x7a>
		break;
	case PORTC_ID:
		OUTPUT_REGC=value;
    1f0e:	e5 e3       	ldi	r30, 0x35	; 53
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	8a 81       	ldd	r24, Y+2	; 0x02
    1f14:	80 83       	st	Z, r24
    1f16:	04 c0       	rjmp	.+8      	; 0x1f20 <GPIO_writePort+0x7a>
		break;
	case PORTD_ID:
		OUTPUT_REGD=value;
    1f18:	e2 e3       	ldi	r30, 0x32	; 50
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1e:	80 83       	st	Z, r24
		break;
	}
	}
}
    1f20:	0f 90       	pop	r0
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	0f 90       	pop	r0
    1f28:	cf 91       	pop	r28
    1f2a:	df 91       	pop	r29
    1f2c:	08 95       	ret

00001f2e <GPIO_readPort>:
/*
 * Description :
 * Read  the required port  value.
 * If the input port number is not correct, The function will not handle the request.
 */
uint8 GPIO_readPort(uint8 port_num){
    1f2e:	df 93       	push	r29
    1f30:	cf 93       	push	r28
    1f32:	00 d0       	rcall	.+0      	; 0x1f34 <GPIO_readPort+0x6>
    1f34:	00 d0       	rcall	.+0      	; 0x1f36 <GPIO_readPort+0x8>
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
    1f3a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 readValue=0;
    1f3c:	19 82       	std	Y+1, r1	; 0x01
	if((port_num>=NUM_OF_PORTS))
    1f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f40:	84 30       	cpi	r24, 0x04	; 4
    1f42:	90 f5       	brcc	.+100    	; 0x1fa8 <GPIO_readPort+0x7a>
	{

	}
	else
	{
	switch(port_num){
    1f44:	8a 81       	ldd	r24, Y+2	; 0x02
    1f46:	28 2f       	mov	r18, r24
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	3c 83       	std	Y+4, r19	; 0x04
    1f4c:	2b 83       	std	Y+3, r18	; 0x03
    1f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f50:	9c 81       	ldd	r25, Y+4	; 0x04
    1f52:	81 30       	cpi	r24, 0x01	; 1
    1f54:	91 05       	cpc	r25, r1
    1f56:	d1 f0       	breq	.+52     	; 0x1f8c <GPIO_readPort+0x5e>
    1f58:	2b 81       	ldd	r18, Y+3	; 0x03
    1f5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f5c:	22 30       	cpi	r18, 0x02	; 2
    1f5e:	31 05       	cpc	r19, r1
    1f60:	2c f4       	brge	.+10     	; 0x1f6c <GPIO_readPort+0x3e>
    1f62:	8b 81       	ldd	r24, Y+3	; 0x03
    1f64:	9c 81       	ldd	r25, Y+4	; 0x04
    1f66:	00 97       	sbiw	r24, 0x00	; 0
    1f68:	61 f0       	breq	.+24     	; 0x1f82 <GPIO_readPort+0x54>
    1f6a:	1e c0       	rjmp	.+60     	; 0x1fa8 <GPIO_readPort+0x7a>
    1f6c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f6e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f70:	22 30       	cpi	r18, 0x02	; 2
    1f72:	31 05       	cpc	r19, r1
    1f74:	81 f0       	breq	.+32     	; 0x1f96 <GPIO_readPort+0x68>
    1f76:	8b 81       	ldd	r24, Y+3	; 0x03
    1f78:	9c 81       	ldd	r25, Y+4	; 0x04
    1f7a:	83 30       	cpi	r24, 0x03	; 3
    1f7c:	91 05       	cpc	r25, r1
    1f7e:	81 f0       	breq	.+32     	; 0x1fa0 <GPIO_readPort+0x72>
    1f80:	13 c0       	rjmp	.+38     	; 0x1fa8 <GPIO_readPort+0x7a>

	case PORTA_ID:
		readValue=OUTPUT_REGA;
    1f82:	eb e3       	ldi	r30, 0x3B	; 59
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	89 83       	std	Y+1, r24	; 0x01
    1f8a:	0e c0       	rjmp	.+28     	; 0x1fa8 <GPIO_readPort+0x7a>
		break;
	case PORTB_ID:
		readValue=OUTPUT_REGB;
    1f8c:	e8 e3       	ldi	r30, 0x38	; 56
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	89 83       	std	Y+1, r24	; 0x01
    1f94:	09 c0       	rjmp	.+18     	; 0x1fa8 <GPIO_readPort+0x7a>
		break;
	case PORTC_ID:
		readValue=OUTPUT_REGC;
    1f96:	e5 e3       	ldi	r30, 0x35	; 53
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	89 83       	std	Y+1, r24	; 0x01
    1f9e:	04 c0       	rjmp	.+8      	; 0x1fa8 <GPIO_readPort+0x7a>
		break;
	case PORTD_ID:
		readValue=OUTPUT_REGD;
    1fa0:	e2 e3       	ldi	r30, 0x32	; 50
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	}
	return readValue;
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1faa:	0f 90       	pop	r0
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	cf 91       	pop	r28
    1fb4:	df 91       	pop	r29
    1fb6:	08 95       	ret

00001fb8 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1fb8:	df 93       	push	r29
    1fba:	cf 93       	push	r28
    1fbc:	00 d0       	rcall	.+0      	; 0x1fbe <KEYPAD_getPressedKey+0x6>
    1fbe:	0f 92       	push	r0
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1fc4:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1fc6:	1b 82       	std	Y+3, r1	; 0x03
    1fc8:	43 c0       	rjmp	.+134    	; 0x2050 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	60 e0       	ldi	r22, 0x00	; 0
    1fce:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd4:	98 2f       	mov	r25, r24
    1fd6:	9c 5f       	subi	r25, 0xFC	; 252
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	69 2f       	mov	r22, r25
    1fdc:	41 e0       	ldi	r20, 0x01	; 1
    1fde:	0e 94 9a 0c 	call	0x1934	; 0x1934 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe4:	88 2f       	mov	r24, r24
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	9c 01       	movw	r18, r24
    1fea:	2c 5f       	subi	r18, 0xFC	; 252
    1fec:	3f 4f       	sbci	r19, 0xFF	; 255
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	02 c0       	rjmp	.+4      	; 0x1ff8 <KEYPAD_getPressedKey+0x40>
    1ff4:	88 0f       	add	r24, r24
    1ff6:	99 1f       	adc	r25, r25
    1ff8:	2a 95       	dec	r18
    1ffa:	e2 f7       	brpl	.-8      	; 0x1ff4 <KEYPAD_getPressedKey+0x3c>
    1ffc:	80 95       	com	r24
    1ffe:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	69 81       	ldd	r22, Y+1	; 0x01
    2004:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2008:	1a 82       	std	Y+2, r1	; 0x02
    200a:	1c c0       	rjmp	.+56     	; 0x2044 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	6a 81       	ldd	r22, Y+2	; 0x02
    2010:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <GPIO_readPin>
    2014:	88 23       	and	r24, r24
    2016:	99 f4       	brne	.+38     	; 0x203e <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2018:	8a 81       	ldd	r24, Y+2	; 0x02
    201a:	88 2f       	mov	r24, r24
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	88 0f       	add	r24, r24
    2020:	99 1f       	adc	r25, r25
    2022:	88 0f       	add	r24, r24
    2024:	99 1f       	adc	r25, r25
    2026:	98 2f       	mov	r25, r24
    2028:	8b 81       	ldd	r24, Y+3	; 0x03
    202a:	89 0f       	add	r24, r25
    202c:	8f 5f       	subi	r24, 0xFF	; 255
    202e:	0e 94 2d 10 	call	0x205a	; 0x205a <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    2032:	0f 90       	pop	r0
    2034:	0f 90       	pop	r0
    2036:	0f 90       	pop	r0
    2038:	cf 91       	pop	r28
    203a:	df 91       	pop	r29
    203c:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    203e:	8a 81       	ldd	r24, Y+2	; 0x02
    2040:	8f 5f       	subi	r24, 0xFF	; 255
    2042:	8a 83       	std	Y+2, r24	; 0x02
    2044:	8a 81       	ldd	r24, Y+2	; 0x02
    2046:	84 30       	cpi	r24, 0x04	; 4
    2048:	08 f3       	brcs	.-62     	; 0x200c <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    204a:	8b 81       	ldd	r24, Y+3	; 0x03
    204c:	8f 5f       	subi	r24, 0xFF	; 255
    204e:	8b 83       	std	Y+3, r24	; 0x03
    2050:	8b 81       	ldd	r24, Y+3	; 0x03
    2052:	84 30       	cpi	r24, 0x04	; 4
    2054:	08 f4       	brcc	.+2      	; 0x2058 <KEYPAD_getPressedKey+0xa0>
    2056:	b9 cf       	rjmp	.-142    	; 0x1fca <KEYPAD_getPressedKey+0x12>
    2058:	b6 cf       	rjmp	.-148    	; 0x1fc6 <KEYPAD_getPressedKey+0xe>

0000205a <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    205a:	df 93       	push	r29
    205c:	cf 93       	push	r28
    205e:	00 d0       	rcall	.+0      	; 0x2060 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2060:	00 d0       	rcall	.+0      	; 0x2062 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2062:	cd b7       	in	r28, 0x3d	; 61
    2064:	de b7       	in	r29, 0x3e	; 62
    2066:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2068:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	28 2f       	mov	r18, r24
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	3c 83       	std	Y+4, r19	; 0x04
    2072:	2b 83       	std	Y+3, r18	; 0x03
    2074:	8b 81       	ldd	r24, Y+3	; 0x03
    2076:	9c 81       	ldd	r25, Y+4	; 0x04
    2078:	88 30       	cpi	r24, 0x08	; 8
    207a:	91 05       	cpc	r25, r1
    207c:	09 f4       	brne	.+2      	; 0x2080 <KEYPAD_4x4_adjustKeyNumber+0x26>
    207e:	70 c0       	rjmp	.+224    	; 0x2160 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2080:	2b 81       	ldd	r18, Y+3	; 0x03
    2082:	3c 81       	ldd	r19, Y+4	; 0x04
    2084:	29 30       	cpi	r18, 0x09	; 9
    2086:	31 05       	cpc	r19, r1
    2088:	5c f5       	brge	.+86     	; 0x20e0 <KEYPAD_4x4_adjustKeyNumber+0x86>
    208a:	8b 81       	ldd	r24, Y+3	; 0x03
    208c:	9c 81       	ldd	r25, Y+4	; 0x04
    208e:	84 30       	cpi	r24, 0x04	; 4
    2090:	91 05       	cpc	r25, r1
    2092:	09 f4       	brne	.+2      	; 0x2096 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2094:	59 c0       	rjmp	.+178    	; 0x2148 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2096:	2b 81       	ldd	r18, Y+3	; 0x03
    2098:	3c 81       	ldd	r19, Y+4	; 0x04
    209a:	25 30       	cpi	r18, 0x05	; 5
    209c:	31 05       	cpc	r19, r1
    209e:	9c f4       	brge	.+38     	; 0x20c6 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    20a0:	8b 81       	ldd	r24, Y+3	; 0x03
    20a2:	9c 81       	ldd	r25, Y+4	; 0x04
    20a4:	82 30       	cpi	r24, 0x02	; 2
    20a6:	91 05       	cpc	r25, r1
    20a8:	09 f4       	brne	.+2      	; 0x20ac <KEYPAD_4x4_adjustKeyNumber+0x52>
    20aa:	48 c0       	rjmp	.+144    	; 0x213c <KEYPAD_4x4_adjustKeyNumber+0xe2>
    20ac:	2b 81       	ldd	r18, Y+3	; 0x03
    20ae:	3c 81       	ldd	r19, Y+4	; 0x04
    20b0:	23 30       	cpi	r18, 0x03	; 3
    20b2:	31 05       	cpc	r19, r1
    20b4:	0c f0       	brlt	.+2      	; 0x20b8 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    20b6:	45 c0       	rjmp	.+138    	; 0x2142 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    20b8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ba:	9c 81       	ldd	r25, Y+4	; 0x04
    20bc:	81 30       	cpi	r24, 0x01	; 1
    20be:	91 05       	cpc	r25, r1
    20c0:	09 f4       	brne	.+2      	; 0x20c4 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    20c2:	39 c0       	rjmp	.+114    	; 0x2136 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    20c4:	67 c0       	rjmp	.+206    	; 0x2194 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    20c6:	2b 81       	ldd	r18, Y+3	; 0x03
    20c8:	3c 81       	ldd	r19, Y+4	; 0x04
    20ca:	26 30       	cpi	r18, 0x06	; 6
    20cc:	31 05       	cpc	r19, r1
    20ce:	09 f4       	brne	.+2      	; 0x20d2 <KEYPAD_4x4_adjustKeyNumber+0x78>
    20d0:	41 c0       	rjmp	.+130    	; 0x2154 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    20d2:	8b 81       	ldd	r24, Y+3	; 0x03
    20d4:	9c 81       	ldd	r25, Y+4	; 0x04
    20d6:	87 30       	cpi	r24, 0x07	; 7
    20d8:	91 05       	cpc	r25, r1
    20da:	0c f0       	brlt	.+2      	; 0x20de <KEYPAD_4x4_adjustKeyNumber+0x84>
    20dc:	3e c0       	rjmp	.+124    	; 0x215a <KEYPAD_4x4_adjustKeyNumber+0x100>
    20de:	37 c0       	rjmp	.+110    	; 0x214e <KEYPAD_4x4_adjustKeyNumber+0xf4>
    20e0:	2b 81       	ldd	r18, Y+3	; 0x03
    20e2:	3c 81       	ldd	r19, Y+4	; 0x04
    20e4:	2c 30       	cpi	r18, 0x0C	; 12
    20e6:	31 05       	cpc	r19, r1
    20e8:	09 f4       	brne	.+2      	; 0x20ec <KEYPAD_4x4_adjustKeyNumber+0x92>
    20ea:	46 c0       	rjmp	.+140    	; 0x2178 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    20ec:	8b 81       	ldd	r24, Y+3	; 0x03
    20ee:	9c 81       	ldd	r25, Y+4	; 0x04
    20f0:	8d 30       	cpi	r24, 0x0D	; 13
    20f2:	91 05       	cpc	r25, r1
    20f4:	5c f4       	brge	.+22     	; 0x210c <KEYPAD_4x4_adjustKeyNumber+0xb2>
    20f6:	2b 81       	ldd	r18, Y+3	; 0x03
    20f8:	3c 81       	ldd	r19, Y+4	; 0x04
    20fa:	2a 30       	cpi	r18, 0x0A	; 10
    20fc:	31 05       	cpc	r19, r1
    20fe:	b1 f1       	breq	.+108    	; 0x216c <KEYPAD_4x4_adjustKeyNumber+0x112>
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	9c 81       	ldd	r25, Y+4	; 0x04
    2104:	8b 30       	cpi	r24, 0x0B	; 11
    2106:	91 05       	cpc	r25, r1
    2108:	a4 f5       	brge	.+104    	; 0x2172 <KEYPAD_4x4_adjustKeyNumber+0x118>
    210a:	2d c0       	rjmp	.+90     	; 0x2166 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    210c:	2b 81       	ldd	r18, Y+3	; 0x03
    210e:	3c 81       	ldd	r19, Y+4	; 0x04
    2110:	2e 30       	cpi	r18, 0x0E	; 14
    2112:	31 05       	cpc	r19, r1
    2114:	b9 f1       	breq	.+110    	; 0x2184 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2116:	8b 81       	ldd	r24, Y+3	; 0x03
    2118:	9c 81       	ldd	r25, Y+4	; 0x04
    211a:	8e 30       	cpi	r24, 0x0E	; 14
    211c:	91 05       	cpc	r25, r1
    211e:	7c f1       	brlt	.+94     	; 0x217e <KEYPAD_4x4_adjustKeyNumber+0x124>
    2120:	2b 81       	ldd	r18, Y+3	; 0x03
    2122:	3c 81       	ldd	r19, Y+4	; 0x04
    2124:	2f 30       	cpi	r18, 0x0F	; 15
    2126:	31 05       	cpc	r19, r1
    2128:	79 f1       	breq	.+94     	; 0x2188 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    212a:	8b 81       	ldd	r24, Y+3	; 0x03
    212c:	9c 81       	ldd	r25, Y+4	; 0x04
    212e:	80 31       	cpi	r24, 0x10	; 16
    2130:	91 05       	cpc	r25, r1
    2132:	69 f1       	breq	.+90     	; 0x218e <KEYPAD_4x4_adjustKeyNumber+0x134>
    2134:	2f c0       	rjmp	.+94     	; 0x2194 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2136:	87 e0       	ldi	r24, 0x07	; 7
    2138:	89 83       	std	Y+1, r24	; 0x01
    213a:	2e c0       	rjmp	.+92     	; 0x2198 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    213c:	88 e0       	ldi	r24, 0x08	; 8
    213e:	89 83       	std	Y+1, r24	; 0x01
    2140:	2b c0       	rjmp	.+86     	; 0x2198 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2142:	89 e0       	ldi	r24, 0x09	; 9
    2144:	89 83       	std	Y+1, r24	; 0x01
    2146:	28 c0       	rjmp	.+80     	; 0x2198 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2148:	85 e2       	ldi	r24, 0x25	; 37
    214a:	89 83       	std	Y+1, r24	; 0x01
    214c:	25 c0       	rjmp	.+74     	; 0x2198 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    214e:	84 e0       	ldi	r24, 0x04	; 4
    2150:	89 83       	std	Y+1, r24	; 0x01
    2152:	22 c0       	rjmp	.+68     	; 0x2198 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2154:	85 e0       	ldi	r24, 0x05	; 5
    2156:	89 83       	std	Y+1, r24	; 0x01
    2158:	1f c0       	rjmp	.+62     	; 0x2198 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    215a:	86 e0       	ldi	r24, 0x06	; 6
    215c:	89 83       	std	Y+1, r24	; 0x01
    215e:	1c c0       	rjmp	.+56     	; 0x2198 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2160:	8a e2       	ldi	r24, 0x2A	; 42
    2162:	89 83       	std	Y+1, r24	; 0x01
    2164:	19 c0       	rjmp	.+50     	; 0x2198 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	89 83       	std	Y+1, r24	; 0x01
    216a:	16 c0       	rjmp	.+44     	; 0x2198 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    216c:	82 e0       	ldi	r24, 0x02	; 2
    216e:	89 83       	std	Y+1, r24	; 0x01
    2170:	13 c0       	rjmp	.+38     	; 0x2198 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2172:	83 e0       	ldi	r24, 0x03	; 3
    2174:	89 83       	std	Y+1, r24	; 0x01
    2176:	10 c0       	rjmp	.+32     	; 0x2198 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2178:	8d e2       	ldi	r24, 0x2D	; 45
    217a:	89 83       	std	Y+1, r24	; 0x01
    217c:	0d c0       	rjmp	.+26     	; 0x2198 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    217e:	8d e0       	ldi	r24, 0x0D	; 13
    2180:	89 83       	std	Y+1, r24	; 0x01
    2182:	0a c0       	rjmp	.+20     	; 0x2198 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2184:	19 82       	std	Y+1, r1	; 0x01
    2186:	08 c0       	rjmp	.+16     	; 0x2198 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2188:	8d e3       	ldi	r24, 0x3D	; 61
    218a:	89 83       	std	Y+1, r24	; 0x01
    218c:	05 c0       	rjmp	.+10     	; 0x2198 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    218e:	8b e2       	ldi	r24, 0x2B	; 43
    2190:	89 83       	std	Y+1, r24	; 0x01
    2192:	02 c0       	rjmp	.+4      	; 0x2198 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2194:	8a 81       	ldd	r24, Y+2	; 0x02
    2196:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2198:	89 81       	ldd	r24, Y+1	; 0x01
} 
    219a:	0f 90       	pop	r0
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	0f 90       	pop	r0
    21a2:	cf 91       	pop	r28
    21a4:	df 91       	pop	r29
    21a6:	08 95       	ret

000021a8 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    21a8:	df 93       	push	r29
    21aa:	cf 93       	push	r28
    21ac:	cd b7       	in	r28, 0x3d	; 61
    21ae:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	62 e0       	ldi	r22, 0x02	; 2
    21b4:	41 e0       	ldi	r20, 0x01	; 1
    21b6:	0e 94 9a 0c 	call	0x1934	; 0x1934 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	61 e0       	ldi	r22, 0x01	; 1
    21be:	41 e0       	ldi	r20, 0x01	; 1
    21c0:	0e 94 9a 0c 	call	0x1934	; 0x1934 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    21c4:	80 e0       	ldi	r24, 0x00	; 0
    21c6:	60 e0       	ldi	r22, 0x00	; 0
    21c8:	41 e0       	ldi	r20, 0x01	; 1
    21ca:	0e 94 9a 0c 	call	0x1934	; 0x1934 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    21ce:	82 e0       	ldi	r24, 0x02	; 2
    21d0:	6f ef       	ldi	r22, 0xFF	; 255
    21d2:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    21d6:	88 e3       	ldi	r24, 0x38	; 56
    21d8:	0e 94 f7 10 	call	0x21ee	; 0x21ee <LCD_sendCommand>

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    21dc:	8c e0       	ldi	r24, 0x0C	; 12
    21de:	0e 94 f7 10 	call	0x21ee	; 0x21ee <LCD_sendCommand>

	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	0e 94 f7 10 	call	0x21ee	; 0x21ee <LCD_sendCommand>
}
    21e8:	cf 91       	pop	r28
    21ea:	df 91       	pop	r29
    21ec:	08 95       	ret

000021ee <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    21ee:	df 93       	push	r29
    21f0:	cf 93       	push	r28
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
    21f6:	e9 97       	sbiw	r28, 0x39	; 57
    21f8:	0f b6       	in	r0, 0x3f	; 63
    21fa:	f8 94       	cli
    21fc:	de bf       	out	0x3e, r29	; 62
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	cd bf       	out	0x3d, r28	; 61
    2202:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	62 e0       	ldi	r22, 0x02	; 2
    2208:	40 e0       	ldi	r20, 0x00	; 0
    220a:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    220e:	80 e0       	ldi	r24, 0x00	; 0
    2210:	61 e0       	ldi	r22, 0x01	; 1
    2212:	40 e0       	ldi	r20, 0x00	; 0
    2214:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <GPIO_writePin>
    2218:	80 e0       	ldi	r24, 0x00	; 0
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	a0 e8       	ldi	r26, 0x80	; 128
    221e:	bf e3       	ldi	r27, 0x3F	; 63
    2220:	8d ab       	std	Y+53, r24	; 0x35
    2222:	9e ab       	std	Y+54, r25	; 0x36
    2224:	af ab       	std	Y+55, r26	; 0x37
    2226:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2228:	6d a9       	ldd	r22, Y+53	; 0x35
    222a:	7e a9       	ldd	r23, Y+54	; 0x36
    222c:	8f a9       	ldd	r24, Y+55	; 0x37
    222e:	98 ad       	ldd	r25, Y+56	; 0x38
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	4a ef       	ldi	r20, 0xFA	; 250
    2236:	54 e4       	ldi	r21, 0x44	; 68
    2238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	89 ab       	std	Y+49, r24	; 0x31
    2242:	9a ab       	std	Y+50, r25	; 0x32
    2244:	ab ab       	std	Y+51, r26	; 0x33
    2246:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2248:	69 a9       	ldd	r22, Y+49	; 0x31
    224a:	7a a9       	ldd	r23, Y+50	; 0x32
    224c:	8b a9       	ldd	r24, Y+51	; 0x33
    224e:	9c a9       	ldd	r25, Y+52	; 0x34
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	40 e8       	ldi	r20, 0x80	; 128
    2256:	5f e3       	ldi	r21, 0x3F	; 63
    2258:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    225c:	88 23       	and	r24, r24
    225e:	2c f4       	brge	.+10     	; 0x226a <LCD_sendCommand+0x7c>
		__ticks = 1;
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	98 ab       	std	Y+48, r25	; 0x30
    2266:	8f a7       	std	Y+47, r24	; 0x2f
    2268:	3f c0       	rjmp	.+126    	; 0x22e8 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    226a:	69 a9       	ldd	r22, Y+49	; 0x31
    226c:	7a a9       	ldd	r23, Y+50	; 0x32
    226e:	8b a9       	ldd	r24, Y+51	; 0x33
    2270:	9c a9       	ldd	r25, Y+52	; 0x34
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	3f ef       	ldi	r19, 0xFF	; 255
    2276:	4f e7       	ldi	r20, 0x7F	; 127
    2278:	57 e4       	ldi	r21, 0x47	; 71
    227a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    227e:	18 16       	cp	r1, r24
    2280:	4c f5       	brge	.+82     	; 0x22d4 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2282:	6d a9       	ldd	r22, Y+53	; 0x35
    2284:	7e a9       	ldd	r23, Y+54	; 0x36
    2286:	8f a9       	ldd	r24, Y+55	; 0x37
    2288:	98 ad       	ldd	r25, Y+56	; 0x38
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	40 e2       	ldi	r20, 0x20	; 32
    2290:	51 e4       	ldi	r21, 0x41	; 65
    2292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	bc 01       	movw	r22, r24
    229c:	cd 01       	movw	r24, r26
    229e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	98 ab       	std	Y+48, r25	; 0x30
    22a8:	8f a7       	std	Y+47, r24	; 0x2f
    22aa:	0f c0       	rjmp	.+30     	; 0x22ca <LCD_sendCommand+0xdc>
    22ac:	88 ec       	ldi	r24, 0xC8	; 200
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	9e a7       	std	Y+46, r25	; 0x2e
    22b2:	8d a7       	std	Y+45, r24	; 0x2d
    22b4:	8d a5       	ldd	r24, Y+45	; 0x2d
    22b6:	9e a5       	ldd	r25, Y+46	; 0x2e
    22b8:	01 97       	sbiw	r24, 0x01	; 1
    22ba:	f1 f7       	brne	.-4      	; 0x22b8 <LCD_sendCommand+0xca>
    22bc:	9e a7       	std	Y+46, r25	; 0x2e
    22be:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    22c2:	98 a9       	ldd	r25, Y+48	; 0x30
    22c4:	01 97       	sbiw	r24, 0x01	; 1
    22c6:	98 ab       	std	Y+48, r25	; 0x30
    22c8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    22cc:	98 a9       	ldd	r25, Y+48	; 0x30
    22ce:	00 97       	sbiw	r24, 0x00	; 0
    22d0:	69 f7       	brne	.-38     	; 0x22ac <LCD_sendCommand+0xbe>
    22d2:	14 c0       	rjmp	.+40     	; 0x22fc <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d4:	69 a9       	ldd	r22, Y+49	; 0x31
    22d6:	7a a9       	ldd	r23, Y+50	; 0x32
    22d8:	8b a9       	ldd	r24, Y+51	; 0x33
    22da:	9c a9       	ldd	r25, Y+52	; 0x34
    22dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	98 ab       	std	Y+48, r25	; 0x30
    22e6:	8f a7       	std	Y+47, r24	; 0x2f
    22e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    22ea:	98 a9       	ldd	r25, Y+48	; 0x30
    22ec:	9c a7       	std	Y+44, r25	; 0x2c
    22ee:	8b a7       	std	Y+43, r24	; 0x2b
    22f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    22f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    22f4:	01 97       	sbiw	r24, 0x01	; 1
    22f6:	f1 f7       	brne	.-4      	; 0x22f4 <LCD_sendCommand+0x106>
    22f8:	9c a7       	std	Y+44, r25	; 0x2c
    22fa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	60 e0       	ldi	r22, 0x00	; 0
    2300:	41 e0       	ldi	r20, 0x01	; 1
    2302:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <GPIO_writePin>
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	a0 e8       	ldi	r26, 0x80	; 128
    230c:	bf e3       	ldi	r27, 0x3F	; 63
    230e:	8f a3       	std	Y+39, r24	; 0x27
    2310:	98 a7       	std	Y+40, r25	; 0x28
    2312:	a9 a7       	std	Y+41, r26	; 0x29
    2314:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2316:	6f a1       	ldd	r22, Y+39	; 0x27
    2318:	78 a5       	ldd	r23, Y+40	; 0x28
    231a:	89 a5       	ldd	r24, Y+41	; 0x29
    231c:	9a a5       	ldd	r25, Y+42	; 0x2a
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	4a ef       	ldi	r20, 0xFA	; 250
    2324:	54 e4       	ldi	r21, 0x44	; 68
    2326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	8b a3       	std	Y+35, r24	; 0x23
    2330:	9c a3       	std	Y+36, r25	; 0x24
    2332:	ad a3       	std	Y+37, r26	; 0x25
    2334:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2336:	6b a1       	ldd	r22, Y+35	; 0x23
    2338:	7c a1       	ldd	r23, Y+36	; 0x24
    233a:	8d a1       	ldd	r24, Y+37	; 0x25
    233c:	9e a1       	ldd	r25, Y+38	; 0x26
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	40 e8       	ldi	r20, 0x80	; 128
    2344:	5f e3       	ldi	r21, 0x3F	; 63
    2346:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    234a:	88 23       	and	r24, r24
    234c:	2c f4       	brge	.+10     	; 0x2358 <LCD_sendCommand+0x16a>
		__ticks = 1;
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	9a a3       	std	Y+34, r25	; 0x22
    2354:	89 a3       	std	Y+33, r24	; 0x21
    2356:	3f c0       	rjmp	.+126    	; 0x23d6 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    2358:	6b a1       	ldd	r22, Y+35	; 0x23
    235a:	7c a1       	ldd	r23, Y+36	; 0x24
    235c:	8d a1       	ldd	r24, Y+37	; 0x25
    235e:	9e a1       	ldd	r25, Y+38	; 0x26
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	3f ef       	ldi	r19, 0xFF	; 255
    2364:	4f e7       	ldi	r20, 0x7F	; 127
    2366:	57 e4       	ldi	r21, 0x47	; 71
    2368:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    236c:	18 16       	cp	r1, r24
    236e:	4c f5       	brge	.+82     	; 0x23c2 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2370:	6f a1       	ldd	r22, Y+39	; 0x27
    2372:	78 a5       	ldd	r23, Y+40	; 0x28
    2374:	89 a5       	ldd	r24, Y+41	; 0x29
    2376:	9a a5       	ldd	r25, Y+42	; 0x2a
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	40 e2       	ldi	r20, 0x20	; 32
    237e:	51 e4       	ldi	r21, 0x41	; 65
    2380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	bc 01       	movw	r22, r24
    238a:	cd 01       	movw	r24, r26
    238c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	9a a3       	std	Y+34, r25	; 0x22
    2396:	89 a3       	std	Y+33, r24	; 0x21
    2398:	0f c0       	rjmp	.+30     	; 0x23b8 <LCD_sendCommand+0x1ca>
    239a:	88 ec       	ldi	r24, 0xC8	; 200
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	98 a3       	std	Y+32, r25	; 0x20
    23a0:	8f 8f       	std	Y+31, r24	; 0x1f
    23a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23a4:	98 a1       	ldd	r25, Y+32	; 0x20
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	f1 f7       	brne	.-4      	; 0x23a6 <LCD_sendCommand+0x1b8>
    23aa:	98 a3       	std	Y+32, r25	; 0x20
    23ac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ae:	89 a1       	ldd	r24, Y+33	; 0x21
    23b0:	9a a1       	ldd	r25, Y+34	; 0x22
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	9a a3       	std	Y+34, r25	; 0x22
    23b6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b8:	89 a1       	ldd	r24, Y+33	; 0x21
    23ba:	9a a1       	ldd	r25, Y+34	; 0x22
    23bc:	00 97       	sbiw	r24, 0x00	; 0
    23be:	69 f7       	brne	.-38     	; 0x239a <LCD_sendCommand+0x1ac>
    23c0:	14 c0       	rjmp	.+40     	; 0x23ea <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c2:	6b a1       	ldd	r22, Y+35	; 0x23
    23c4:	7c a1       	ldd	r23, Y+36	; 0x24
    23c6:	8d a1       	ldd	r24, Y+37	; 0x25
    23c8:	9e a1       	ldd	r25, Y+38	; 0x26
    23ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	9a a3       	std	Y+34, r25	; 0x22
    23d4:	89 a3       	std	Y+33, r24	; 0x21
    23d6:	89 a1       	ldd	r24, Y+33	; 0x21
    23d8:	9a a1       	ldd	r25, Y+34	; 0x22
    23da:	9e 8f       	std	Y+30, r25	; 0x1e
    23dc:	8d 8f       	std	Y+29, r24	; 0x1d
    23de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23e2:	01 97       	sbiw	r24, 0x01	; 1
    23e4:	f1 f7       	brne	.-4      	; 0x23e2 <LCD_sendCommand+0x1f4>
    23e6:	9e 8f       	std	Y+30, r25	; 0x1e
    23e8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    23ea:	82 e0       	ldi	r24, 0x02	; 2
    23ec:	69 ad       	ldd	r22, Y+57	; 0x39
    23ee:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <GPIO_writePort>
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	a0 e8       	ldi	r26, 0x80	; 128
    23f8:	bf e3       	ldi	r27, 0x3F	; 63
    23fa:	89 8f       	std	Y+25, r24	; 0x19
    23fc:	9a 8f       	std	Y+26, r25	; 0x1a
    23fe:	ab 8f       	std	Y+27, r26	; 0x1b
    2400:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2402:	69 8d       	ldd	r22, Y+25	; 0x19
    2404:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2406:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2408:	9c 8d       	ldd	r25, Y+28	; 0x1c
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	4a ef       	ldi	r20, 0xFA	; 250
    2410:	54 e4       	ldi	r21, 0x44	; 68
    2412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	8d 8b       	std	Y+21, r24	; 0x15
    241c:	9e 8b       	std	Y+22, r25	; 0x16
    241e:	af 8b       	std	Y+23, r26	; 0x17
    2420:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2422:	6d 89       	ldd	r22, Y+21	; 0x15
    2424:	7e 89       	ldd	r23, Y+22	; 0x16
    2426:	8f 89       	ldd	r24, Y+23	; 0x17
    2428:	98 8d       	ldd	r25, Y+24	; 0x18
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	40 e8       	ldi	r20, 0x80	; 128
    2430:	5f e3       	ldi	r21, 0x3F	; 63
    2432:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2436:	88 23       	and	r24, r24
    2438:	2c f4       	brge	.+10     	; 0x2444 <LCD_sendCommand+0x256>
		__ticks = 1;
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	9c 8b       	std	Y+20, r25	; 0x14
    2440:	8b 8b       	std	Y+19, r24	; 0x13
    2442:	3f c0       	rjmp	.+126    	; 0x24c2 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    2444:	6d 89       	ldd	r22, Y+21	; 0x15
    2446:	7e 89       	ldd	r23, Y+22	; 0x16
    2448:	8f 89       	ldd	r24, Y+23	; 0x17
    244a:	98 8d       	ldd	r25, Y+24	; 0x18
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	3f ef       	ldi	r19, 0xFF	; 255
    2450:	4f e7       	ldi	r20, 0x7F	; 127
    2452:	57 e4       	ldi	r21, 0x47	; 71
    2454:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2458:	18 16       	cp	r1, r24
    245a:	4c f5       	brge	.+82     	; 0x24ae <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    245c:	69 8d       	ldd	r22, Y+25	; 0x19
    245e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2460:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2462:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	40 e2       	ldi	r20, 0x20	; 32
    246a:	51 e4       	ldi	r21, 0x41	; 65
    246c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	bc 01       	movw	r22, r24
    2476:	cd 01       	movw	r24, r26
    2478:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	9c 8b       	std	Y+20, r25	; 0x14
    2482:	8b 8b       	std	Y+19, r24	; 0x13
    2484:	0f c0       	rjmp	.+30     	; 0x24a4 <LCD_sendCommand+0x2b6>
    2486:	88 ec       	ldi	r24, 0xC8	; 200
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	9a 8b       	std	Y+18, r25	; 0x12
    248c:	89 8b       	std	Y+17, r24	; 0x11
    248e:	89 89       	ldd	r24, Y+17	; 0x11
    2490:	9a 89       	ldd	r25, Y+18	; 0x12
    2492:	01 97       	sbiw	r24, 0x01	; 1
    2494:	f1 f7       	brne	.-4      	; 0x2492 <LCD_sendCommand+0x2a4>
    2496:	9a 8b       	std	Y+18, r25	; 0x12
    2498:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    249a:	8b 89       	ldd	r24, Y+19	; 0x13
    249c:	9c 89       	ldd	r25, Y+20	; 0x14
    249e:	01 97       	sbiw	r24, 0x01	; 1
    24a0:	9c 8b       	std	Y+20, r25	; 0x14
    24a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a4:	8b 89       	ldd	r24, Y+19	; 0x13
    24a6:	9c 89       	ldd	r25, Y+20	; 0x14
    24a8:	00 97       	sbiw	r24, 0x00	; 0
    24aa:	69 f7       	brne	.-38     	; 0x2486 <LCD_sendCommand+0x298>
    24ac:	14 c0       	rjmp	.+40     	; 0x24d6 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ae:	6d 89       	ldd	r22, Y+21	; 0x15
    24b0:	7e 89       	ldd	r23, Y+22	; 0x16
    24b2:	8f 89       	ldd	r24, Y+23	; 0x17
    24b4:	98 8d       	ldd	r25, Y+24	; 0x18
    24b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	9c 8b       	std	Y+20, r25	; 0x14
    24c0:	8b 8b       	std	Y+19, r24	; 0x13
    24c2:	8b 89       	ldd	r24, Y+19	; 0x13
    24c4:	9c 89       	ldd	r25, Y+20	; 0x14
    24c6:	98 8b       	std	Y+16, r25	; 0x10
    24c8:	8f 87       	std	Y+15, r24	; 0x0f
    24ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    24cc:	98 89       	ldd	r25, Y+16	; 0x10
    24ce:	01 97       	sbiw	r24, 0x01	; 1
    24d0:	f1 f7       	brne	.-4      	; 0x24ce <LCD_sendCommand+0x2e0>
    24d2:	98 8b       	std	Y+16, r25	; 0x10
    24d4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	60 e0       	ldi	r22, 0x00	; 0
    24da:	40 e0       	ldi	r20, 0x00	; 0
    24dc:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <GPIO_writePin>
    24e0:	80 e0       	ldi	r24, 0x00	; 0
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	a0 e8       	ldi	r26, 0x80	; 128
    24e6:	bf e3       	ldi	r27, 0x3F	; 63
    24e8:	8b 87       	std	Y+11, r24	; 0x0b
    24ea:	9c 87       	std	Y+12, r25	; 0x0c
    24ec:	ad 87       	std	Y+13, r26	; 0x0d
    24ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	4a ef       	ldi	r20, 0xFA	; 250
    24fe:	54 e4       	ldi	r21, 0x44	; 68
    2500:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	8f 83       	std	Y+7, r24	; 0x07
    250a:	98 87       	std	Y+8, r25	; 0x08
    250c:	a9 87       	std	Y+9, r26	; 0x09
    250e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2510:	6f 81       	ldd	r22, Y+7	; 0x07
    2512:	78 85       	ldd	r23, Y+8	; 0x08
    2514:	89 85       	ldd	r24, Y+9	; 0x09
    2516:	9a 85       	ldd	r25, Y+10	; 0x0a
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	40 e8       	ldi	r20, 0x80	; 128
    251e:	5f e3       	ldi	r21, 0x3F	; 63
    2520:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2524:	88 23       	and	r24, r24
    2526:	2c f4       	brge	.+10     	; 0x2532 <LCD_sendCommand+0x344>
		__ticks = 1;
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	9e 83       	std	Y+6, r25	; 0x06
    252e:	8d 83       	std	Y+5, r24	; 0x05
    2530:	3f c0       	rjmp	.+126    	; 0x25b0 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    2532:	6f 81       	ldd	r22, Y+7	; 0x07
    2534:	78 85       	ldd	r23, Y+8	; 0x08
    2536:	89 85       	ldd	r24, Y+9	; 0x09
    2538:	9a 85       	ldd	r25, Y+10	; 0x0a
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	3f ef       	ldi	r19, 0xFF	; 255
    253e:	4f e7       	ldi	r20, 0x7F	; 127
    2540:	57 e4       	ldi	r21, 0x47	; 71
    2542:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2546:	18 16       	cp	r1, r24
    2548:	4c f5       	brge	.+82     	; 0x259c <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    254a:	6b 85       	ldd	r22, Y+11	; 0x0b
    254c:	7c 85       	ldd	r23, Y+12	; 0x0c
    254e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2550:	9e 85       	ldd	r25, Y+14	; 0x0e
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	40 e2       	ldi	r20, 0x20	; 32
    2558:	51 e4       	ldi	r21, 0x41	; 65
    255a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	bc 01       	movw	r22, r24
    2564:	cd 01       	movw	r24, r26
    2566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	9e 83       	std	Y+6, r25	; 0x06
    2570:	8d 83       	std	Y+5, r24	; 0x05
    2572:	0f c0       	rjmp	.+30     	; 0x2592 <LCD_sendCommand+0x3a4>
    2574:	88 ec       	ldi	r24, 0xC8	; 200
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	9c 83       	std	Y+4, r25	; 0x04
    257a:	8b 83       	std	Y+3, r24	; 0x03
    257c:	8b 81       	ldd	r24, Y+3	; 0x03
    257e:	9c 81       	ldd	r25, Y+4	; 0x04
    2580:	01 97       	sbiw	r24, 0x01	; 1
    2582:	f1 f7       	brne	.-4      	; 0x2580 <LCD_sendCommand+0x392>
    2584:	9c 83       	std	Y+4, r25	; 0x04
    2586:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2588:	8d 81       	ldd	r24, Y+5	; 0x05
    258a:	9e 81       	ldd	r25, Y+6	; 0x06
    258c:	01 97       	sbiw	r24, 0x01	; 1
    258e:	9e 83       	std	Y+6, r25	; 0x06
    2590:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2592:	8d 81       	ldd	r24, Y+5	; 0x05
    2594:	9e 81       	ldd	r25, Y+6	; 0x06
    2596:	00 97       	sbiw	r24, 0x00	; 0
    2598:	69 f7       	brne	.-38     	; 0x2574 <LCD_sendCommand+0x386>
    259a:	14 c0       	rjmp	.+40     	; 0x25c4 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    259c:	6f 81       	ldd	r22, Y+7	; 0x07
    259e:	78 85       	ldd	r23, Y+8	; 0x08
    25a0:	89 85       	ldd	r24, Y+9	; 0x09
    25a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	9e 83       	std	Y+6, r25	; 0x06
    25ae:	8d 83       	std	Y+5, r24	; 0x05
    25b0:	8d 81       	ldd	r24, Y+5	; 0x05
    25b2:	9e 81       	ldd	r25, Y+6	; 0x06
    25b4:	9a 83       	std	Y+2, r25	; 0x02
    25b6:	89 83       	std	Y+1, r24	; 0x01
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	9a 81       	ldd	r25, Y+2	; 0x02
    25bc:	01 97       	sbiw	r24, 0x01	; 1
    25be:	f1 f7       	brne	.-4      	; 0x25bc <LCD_sendCommand+0x3ce>
    25c0:	9a 83       	std	Y+2, r25	; 0x02
    25c2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    25c4:	e9 96       	adiw	r28, 0x39	; 57
    25c6:	0f b6       	in	r0, 0x3f	; 63
    25c8:	f8 94       	cli
    25ca:	de bf       	out	0x3e, r29	; 62
    25cc:	0f be       	out	0x3f, r0	; 63
    25ce:	cd bf       	out	0x3d, r28	; 61
    25d0:	cf 91       	pop	r28
    25d2:	df 91       	pop	r29
    25d4:	08 95       	ret

000025d6 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    25d6:	df 93       	push	r29
    25d8:	cf 93       	push	r28
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
    25de:	e9 97       	sbiw	r28, 0x39	; 57
    25e0:	0f b6       	in	r0, 0x3f	; 63
    25e2:	f8 94       	cli
    25e4:	de bf       	out	0x3e, r29	; 62
    25e6:	0f be       	out	0x3f, r0	; 63
    25e8:	cd bf       	out	0x3d, r28	; 61
    25ea:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    25ec:	80 e0       	ldi	r24, 0x00	; 0
    25ee:	62 e0       	ldi	r22, 0x02	; 2
    25f0:	41 e0       	ldi	r20, 0x01	; 1
    25f2:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    25f6:	80 e0       	ldi	r24, 0x00	; 0
    25f8:	61 e0       	ldi	r22, 0x01	; 1
    25fa:	40 e0       	ldi	r20, 0x00	; 0
    25fc:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <GPIO_writePin>
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	a0 e8       	ldi	r26, 0x80	; 128
    2606:	bf e3       	ldi	r27, 0x3F	; 63
    2608:	8d ab       	std	Y+53, r24	; 0x35
    260a:	9e ab       	std	Y+54, r25	; 0x36
    260c:	af ab       	std	Y+55, r26	; 0x37
    260e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2610:	6d a9       	ldd	r22, Y+53	; 0x35
    2612:	7e a9       	ldd	r23, Y+54	; 0x36
    2614:	8f a9       	ldd	r24, Y+55	; 0x37
    2616:	98 ad       	ldd	r25, Y+56	; 0x38
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	4a ef       	ldi	r20, 0xFA	; 250
    261e:	54 e4       	ldi	r21, 0x44	; 68
    2620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	89 ab       	std	Y+49, r24	; 0x31
    262a:	9a ab       	std	Y+50, r25	; 0x32
    262c:	ab ab       	std	Y+51, r26	; 0x33
    262e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2630:	69 a9       	ldd	r22, Y+49	; 0x31
    2632:	7a a9       	ldd	r23, Y+50	; 0x32
    2634:	8b a9       	ldd	r24, Y+51	; 0x33
    2636:	9c a9       	ldd	r25, Y+52	; 0x34
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	40 e8       	ldi	r20, 0x80	; 128
    263e:	5f e3       	ldi	r21, 0x3F	; 63
    2640:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2644:	88 23       	and	r24, r24
    2646:	2c f4       	brge	.+10     	; 0x2652 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	98 ab       	std	Y+48, r25	; 0x30
    264e:	8f a7       	std	Y+47, r24	; 0x2f
    2650:	3f c0       	rjmp	.+126    	; 0x26d0 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    2652:	69 a9       	ldd	r22, Y+49	; 0x31
    2654:	7a a9       	ldd	r23, Y+50	; 0x32
    2656:	8b a9       	ldd	r24, Y+51	; 0x33
    2658:	9c a9       	ldd	r25, Y+52	; 0x34
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	3f ef       	ldi	r19, 0xFF	; 255
    265e:	4f e7       	ldi	r20, 0x7F	; 127
    2660:	57 e4       	ldi	r21, 0x47	; 71
    2662:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2666:	18 16       	cp	r1, r24
    2668:	4c f5       	brge	.+82     	; 0x26bc <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266a:	6d a9       	ldd	r22, Y+53	; 0x35
    266c:	7e a9       	ldd	r23, Y+54	; 0x36
    266e:	8f a9       	ldd	r24, Y+55	; 0x37
    2670:	98 ad       	ldd	r25, Y+56	; 0x38
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	40 e2       	ldi	r20, 0x20	; 32
    2678:	51 e4       	ldi	r21, 0x41	; 65
    267a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	bc 01       	movw	r22, r24
    2684:	cd 01       	movw	r24, r26
    2686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268a:	dc 01       	movw	r26, r24
    268c:	cb 01       	movw	r24, r22
    268e:	98 ab       	std	Y+48, r25	; 0x30
    2690:	8f a7       	std	Y+47, r24	; 0x2f
    2692:	0f c0       	rjmp	.+30     	; 0x26b2 <LCD_displayCharacter+0xdc>
    2694:	88 ec       	ldi	r24, 0xC8	; 200
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	9e a7       	std	Y+46, r25	; 0x2e
    269a:	8d a7       	std	Y+45, r24	; 0x2d
    269c:	8d a5       	ldd	r24, Y+45	; 0x2d
    269e:	9e a5       	ldd	r25, Y+46	; 0x2e
    26a0:	01 97       	sbiw	r24, 0x01	; 1
    26a2:	f1 f7       	brne	.-4      	; 0x26a0 <LCD_displayCharacter+0xca>
    26a4:	9e a7       	std	Y+46, r25	; 0x2e
    26a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    26aa:	98 a9       	ldd	r25, Y+48	; 0x30
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	98 ab       	std	Y+48, r25	; 0x30
    26b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    26b4:	98 a9       	ldd	r25, Y+48	; 0x30
    26b6:	00 97       	sbiw	r24, 0x00	; 0
    26b8:	69 f7       	brne	.-38     	; 0x2694 <LCD_displayCharacter+0xbe>
    26ba:	14 c0       	rjmp	.+40     	; 0x26e4 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26bc:	69 a9       	ldd	r22, Y+49	; 0x31
    26be:	7a a9       	ldd	r23, Y+50	; 0x32
    26c0:	8b a9       	ldd	r24, Y+51	; 0x33
    26c2:	9c a9       	ldd	r25, Y+52	; 0x34
    26c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	98 ab       	std	Y+48, r25	; 0x30
    26ce:	8f a7       	std	Y+47, r24	; 0x2f
    26d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    26d2:	98 a9       	ldd	r25, Y+48	; 0x30
    26d4:	9c a7       	std	Y+44, r25	; 0x2c
    26d6:	8b a7       	std	Y+43, r24	; 0x2b
    26d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    26da:	9c a5       	ldd	r25, Y+44	; 0x2c
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	f1 f7       	brne	.-4      	; 0x26dc <LCD_displayCharacter+0x106>
    26e0:	9c a7       	std	Y+44, r25	; 0x2c
    26e2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	60 e0       	ldi	r22, 0x00	; 0
    26e8:	41 e0       	ldi	r20, 0x01	; 1
    26ea:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <GPIO_writePin>
    26ee:	80 e0       	ldi	r24, 0x00	; 0
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	a0 e8       	ldi	r26, 0x80	; 128
    26f4:	bf e3       	ldi	r27, 0x3F	; 63
    26f6:	8f a3       	std	Y+39, r24	; 0x27
    26f8:	98 a7       	std	Y+40, r25	; 0x28
    26fa:	a9 a7       	std	Y+41, r26	; 0x29
    26fc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26fe:	6f a1       	ldd	r22, Y+39	; 0x27
    2700:	78 a5       	ldd	r23, Y+40	; 0x28
    2702:	89 a5       	ldd	r24, Y+41	; 0x29
    2704:	9a a5       	ldd	r25, Y+42	; 0x2a
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	4a ef       	ldi	r20, 0xFA	; 250
    270c:	54 e4       	ldi	r21, 0x44	; 68
    270e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2712:	dc 01       	movw	r26, r24
    2714:	cb 01       	movw	r24, r22
    2716:	8b a3       	std	Y+35, r24	; 0x23
    2718:	9c a3       	std	Y+36, r25	; 0x24
    271a:	ad a3       	std	Y+37, r26	; 0x25
    271c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    271e:	6b a1       	ldd	r22, Y+35	; 0x23
    2720:	7c a1       	ldd	r23, Y+36	; 0x24
    2722:	8d a1       	ldd	r24, Y+37	; 0x25
    2724:	9e a1       	ldd	r25, Y+38	; 0x26
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	40 e8       	ldi	r20, 0x80	; 128
    272c:	5f e3       	ldi	r21, 0x3F	; 63
    272e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2732:	88 23       	and	r24, r24
    2734:	2c f4       	brge	.+10     	; 0x2740 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	9a a3       	std	Y+34, r25	; 0x22
    273c:	89 a3       	std	Y+33, r24	; 0x21
    273e:	3f c0       	rjmp	.+126    	; 0x27be <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    2740:	6b a1       	ldd	r22, Y+35	; 0x23
    2742:	7c a1       	ldd	r23, Y+36	; 0x24
    2744:	8d a1       	ldd	r24, Y+37	; 0x25
    2746:	9e a1       	ldd	r25, Y+38	; 0x26
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	3f ef       	ldi	r19, 0xFF	; 255
    274c:	4f e7       	ldi	r20, 0x7F	; 127
    274e:	57 e4       	ldi	r21, 0x47	; 71
    2750:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2754:	18 16       	cp	r1, r24
    2756:	4c f5       	brge	.+82     	; 0x27aa <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2758:	6f a1       	ldd	r22, Y+39	; 0x27
    275a:	78 a5       	ldd	r23, Y+40	; 0x28
    275c:	89 a5       	ldd	r24, Y+41	; 0x29
    275e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	40 e2       	ldi	r20, 0x20	; 32
    2766:	51 e4       	ldi	r21, 0x41	; 65
    2768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	bc 01       	movw	r22, r24
    2772:	cd 01       	movw	r24, r26
    2774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	9a a3       	std	Y+34, r25	; 0x22
    277e:	89 a3       	std	Y+33, r24	; 0x21
    2780:	0f c0       	rjmp	.+30     	; 0x27a0 <LCD_displayCharacter+0x1ca>
    2782:	88 ec       	ldi	r24, 0xC8	; 200
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	98 a3       	std	Y+32, r25	; 0x20
    2788:	8f 8f       	std	Y+31, r24	; 0x1f
    278a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    278c:	98 a1       	ldd	r25, Y+32	; 0x20
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	f1 f7       	brne	.-4      	; 0x278e <LCD_displayCharacter+0x1b8>
    2792:	98 a3       	std	Y+32, r25	; 0x20
    2794:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2796:	89 a1       	ldd	r24, Y+33	; 0x21
    2798:	9a a1       	ldd	r25, Y+34	; 0x22
    279a:	01 97       	sbiw	r24, 0x01	; 1
    279c:	9a a3       	std	Y+34, r25	; 0x22
    279e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a0:	89 a1       	ldd	r24, Y+33	; 0x21
    27a2:	9a a1       	ldd	r25, Y+34	; 0x22
    27a4:	00 97       	sbiw	r24, 0x00	; 0
    27a6:	69 f7       	brne	.-38     	; 0x2782 <LCD_displayCharacter+0x1ac>
    27a8:	14 c0       	rjmp	.+40     	; 0x27d2 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27aa:	6b a1       	ldd	r22, Y+35	; 0x23
    27ac:	7c a1       	ldd	r23, Y+36	; 0x24
    27ae:	8d a1       	ldd	r24, Y+37	; 0x25
    27b0:	9e a1       	ldd	r25, Y+38	; 0x26
    27b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b6:	dc 01       	movw	r26, r24
    27b8:	cb 01       	movw	r24, r22
    27ba:	9a a3       	std	Y+34, r25	; 0x22
    27bc:	89 a3       	std	Y+33, r24	; 0x21
    27be:	89 a1       	ldd	r24, Y+33	; 0x21
    27c0:	9a a1       	ldd	r25, Y+34	; 0x22
    27c2:	9e 8f       	std	Y+30, r25	; 0x1e
    27c4:	8d 8f       	std	Y+29, r24	; 0x1d
    27c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27ca:	01 97       	sbiw	r24, 0x01	; 1
    27cc:	f1 f7       	brne	.-4      	; 0x27ca <LCD_displayCharacter+0x1f4>
    27ce:	9e 8f       	std	Y+30, r25	; 0x1e
    27d0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    27d2:	82 e0       	ldi	r24, 0x02	; 2
    27d4:	69 ad       	ldd	r22, Y+57	; 0x39
    27d6:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <GPIO_writePort>
    27da:	80 e0       	ldi	r24, 0x00	; 0
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	a0 e8       	ldi	r26, 0x80	; 128
    27e0:	bf e3       	ldi	r27, 0x3F	; 63
    27e2:	89 8f       	std	Y+25, r24	; 0x19
    27e4:	9a 8f       	std	Y+26, r25	; 0x1a
    27e6:	ab 8f       	std	Y+27, r26	; 0x1b
    27e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ea:	69 8d       	ldd	r22, Y+25	; 0x19
    27ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	4a ef       	ldi	r20, 0xFA	; 250
    27f8:	54 e4       	ldi	r21, 0x44	; 68
    27fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	8d 8b       	std	Y+21, r24	; 0x15
    2804:	9e 8b       	std	Y+22, r25	; 0x16
    2806:	af 8b       	std	Y+23, r26	; 0x17
    2808:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    280a:	6d 89       	ldd	r22, Y+21	; 0x15
    280c:	7e 89       	ldd	r23, Y+22	; 0x16
    280e:	8f 89       	ldd	r24, Y+23	; 0x17
    2810:	98 8d       	ldd	r25, Y+24	; 0x18
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	40 e8       	ldi	r20, 0x80	; 128
    2818:	5f e3       	ldi	r21, 0x3F	; 63
    281a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    281e:	88 23       	and	r24, r24
    2820:	2c f4       	brge	.+10     	; 0x282c <LCD_displayCharacter+0x256>
		__ticks = 1;
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	9c 8b       	std	Y+20, r25	; 0x14
    2828:	8b 8b       	std	Y+19, r24	; 0x13
    282a:	3f c0       	rjmp	.+126    	; 0x28aa <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    282c:	6d 89       	ldd	r22, Y+21	; 0x15
    282e:	7e 89       	ldd	r23, Y+22	; 0x16
    2830:	8f 89       	ldd	r24, Y+23	; 0x17
    2832:	98 8d       	ldd	r25, Y+24	; 0x18
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	3f ef       	ldi	r19, 0xFF	; 255
    2838:	4f e7       	ldi	r20, 0x7F	; 127
    283a:	57 e4       	ldi	r21, 0x47	; 71
    283c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2840:	18 16       	cp	r1, r24
    2842:	4c f5       	brge	.+82     	; 0x2896 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2844:	69 8d       	ldd	r22, Y+25	; 0x19
    2846:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2848:	8b 8d       	ldd	r24, Y+27	; 0x1b
    284a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	40 e2       	ldi	r20, 0x20	; 32
    2852:	51 e4       	ldi	r21, 0x41	; 65
    2854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	bc 01       	movw	r22, r24
    285e:	cd 01       	movw	r24, r26
    2860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2864:	dc 01       	movw	r26, r24
    2866:	cb 01       	movw	r24, r22
    2868:	9c 8b       	std	Y+20, r25	; 0x14
    286a:	8b 8b       	std	Y+19, r24	; 0x13
    286c:	0f c0       	rjmp	.+30     	; 0x288c <LCD_displayCharacter+0x2b6>
    286e:	88 ec       	ldi	r24, 0xC8	; 200
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	9a 8b       	std	Y+18, r25	; 0x12
    2874:	89 8b       	std	Y+17, r24	; 0x11
    2876:	89 89       	ldd	r24, Y+17	; 0x11
    2878:	9a 89       	ldd	r25, Y+18	; 0x12
    287a:	01 97       	sbiw	r24, 0x01	; 1
    287c:	f1 f7       	brne	.-4      	; 0x287a <LCD_displayCharacter+0x2a4>
    287e:	9a 8b       	std	Y+18, r25	; 0x12
    2880:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2882:	8b 89       	ldd	r24, Y+19	; 0x13
    2884:	9c 89       	ldd	r25, Y+20	; 0x14
    2886:	01 97       	sbiw	r24, 0x01	; 1
    2888:	9c 8b       	std	Y+20, r25	; 0x14
    288a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    288c:	8b 89       	ldd	r24, Y+19	; 0x13
    288e:	9c 89       	ldd	r25, Y+20	; 0x14
    2890:	00 97       	sbiw	r24, 0x00	; 0
    2892:	69 f7       	brne	.-38     	; 0x286e <LCD_displayCharacter+0x298>
    2894:	14 c0       	rjmp	.+40     	; 0x28be <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2896:	6d 89       	ldd	r22, Y+21	; 0x15
    2898:	7e 89       	ldd	r23, Y+22	; 0x16
    289a:	8f 89       	ldd	r24, Y+23	; 0x17
    289c:	98 8d       	ldd	r25, Y+24	; 0x18
    289e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	9c 8b       	std	Y+20, r25	; 0x14
    28a8:	8b 8b       	std	Y+19, r24	; 0x13
    28aa:	8b 89       	ldd	r24, Y+19	; 0x13
    28ac:	9c 89       	ldd	r25, Y+20	; 0x14
    28ae:	98 8b       	std	Y+16, r25	; 0x10
    28b0:	8f 87       	std	Y+15, r24	; 0x0f
    28b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    28b4:	98 89       	ldd	r25, Y+16	; 0x10
    28b6:	01 97       	sbiw	r24, 0x01	; 1
    28b8:	f1 f7       	brne	.-4      	; 0x28b6 <LCD_displayCharacter+0x2e0>
    28ba:	98 8b       	std	Y+16, r25	; 0x10
    28bc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    28be:	80 e0       	ldi	r24, 0x00	; 0
    28c0:	60 e0       	ldi	r22, 0x00	; 0
    28c2:	40 e0       	ldi	r20, 0x00	; 0
    28c4:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <GPIO_writePin>
    28c8:	80 e0       	ldi	r24, 0x00	; 0
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	a0 e8       	ldi	r26, 0x80	; 128
    28ce:	bf e3       	ldi	r27, 0x3F	; 63
    28d0:	8b 87       	std	Y+11, r24	; 0x0b
    28d2:	9c 87       	std	Y+12, r25	; 0x0c
    28d4:	ad 87       	std	Y+13, r26	; 0x0d
    28d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    28da:	7c 85       	ldd	r23, Y+12	; 0x0c
    28dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    28de:	9e 85       	ldd	r25, Y+14	; 0x0e
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	4a ef       	ldi	r20, 0xFA	; 250
    28e6:	54 e4       	ldi	r21, 0x44	; 68
    28e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ec:	dc 01       	movw	r26, r24
    28ee:	cb 01       	movw	r24, r22
    28f0:	8f 83       	std	Y+7, r24	; 0x07
    28f2:	98 87       	std	Y+8, r25	; 0x08
    28f4:	a9 87       	std	Y+9, r26	; 0x09
    28f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28f8:	6f 81       	ldd	r22, Y+7	; 0x07
    28fa:	78 85       	ldd	r23, Y+8	; 0x08
    28fc:	89 85       	ldd	r24, Y+9	; 0x09
    28fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	40 e8       	ldi	r20, 0x80	; 128
    2906:	5f e3       	ldi	r21, 0x3F	; 63
    2908:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    290c:	88 23       	and	r24, r24
    290e:	2c f4       	brge	.+10     	; 0x291a <LCD_displayCharacter+0x344>
		__ticks = 1;
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	9e 83       	std	Y+6, r25	; 0x06
    2916:	8d 83       	std	Y+5, r24	; 0x05
    2918:	3f c0       	rjmp	.+126    	; 0x2998 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    291a:	6f 81       	ldd	r22, Y+7	; 0x07
    291c:	78 85       	ldd	r23, Y+8	; 0x08
    291e:	89 85       	ldd	r24, Y+9	; 0x09
    2920:	9a 85       	ldd	r25, Y+10	; 0x0a
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	3f ef       	ldi	r19, 0xFF	; 255
    2926:	4f e7       	ldi	r20, 0x7F	; 127
    2928:	57 e4       	ldi	r21, 0x47	; 71
    292a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    292e:	18 16       	cp	r1, r24
    2930:	4c f5       	brge	.+82     	; 0x2984 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2932:	6b 85       	ldd	r22, Y+11	; 0x0b
    2934:	7c 85       	ldd	r23, Y+12	; 0x0c
    2936:	8d 85       	ldd	r24, Y+13	; 0x0d
    2938:	9e 85       	ldd	r25, Y+14	; 0x0e
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	40 e2       	ldi	r20, 0x20	; 32
    2940:	51 e4       	ldi	r21, 0x41	; 65
    2942:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	bc 01       	movw	r22, r24
    294c:	cd 01       	movw	r24, r26
    294e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2952:	dc 01       	movw	r26, r24
    2954:	cb 01       	movw	r24, r22
    2956:	9e 83       	std	Y+6, r25	; 0x06
    2958:	8d 83       	std	Y+5, r24	; 0x05
    295a:	0f c0       	rjmp	.+30     	; 0x297a <LCD_displayCharacter+0x3a4>
    295c:	88 ec       	ldi	r24, 0xC8	; 200
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	9c 83       	std	Y+4, r25	; 0x04
    2962:	8b 83       	std	Y+3, r24	; 0x03
    2964:	8b 81       	ldd	r24, Y+3	; 0x03
    2966:	9c 81       	ldd	r25, Y+4	; 0x04
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	f1 f7       	brne	.-4      	; 0x2968 <LCD_displayCharacter+0x392>
    296c:	9c 83       	std	Y+4, r25	; 0x04
    296e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2970:	8d 81       	ldd	r24, Y+5	; 0x05
    2972:	9e 81       	ldd	r25, Y+6	; 0x06
    2974:	01 97       	sbiw	r24, 0x01	; 1
    2976:	9e 83       	std	Y+6, r25	; 0x06
    2978:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    297a:	8d 81       	ldd	r24, Y+5	; 0x05
    297c:	9e 81       	ldd	r25, Y+6	; 0x06
    297e:	00 97       	sbiw	r24, 0x00	; 0
    2980:	69 f7       	brne	.-38     	; 0x295c <LCD_displayCharacter+0x386>
    2982:	14 c0       	rjmp	.+40     	; 0x29ac <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2984:	6f 81       	ldd	r22, Y+7	; 0x07
    2986:	78 85       	ldd	r23, Y+8	; 0x08
    2988:	89 85       	ldd	r24, Y+9	; 0x09
    298a:	9a 85       	ldd	r25, Y+10	; 0x0a
    298c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	9e 83       	std	Y+6, r25	; 0x06
    2996:	8d 83       	std	Y+5, r24	; 0x05
    2998:	8d 81       	ldd	r24, Y+5	; 0x05
    299a:	9e 81       	ldd	r25, Y+6	; 0x06
    299c:	9a 83       	std	Y+2, r25	; 0x02
    299e:	89 83       	std	Y+1, r24	; 0x01
    29a0:	89 81       	ldd	r24, Y+1	; 0x01
    29a2:	9a 81       	ldd	r25, Y+2	; 0x02
    29a4:	01 97       	sbiw	r24, 0x01	; 1
    29a6:	f1 f7       	brne	.-4      	; 0x29a4 <LCD_displayCharacter+0x3ce>
    29a8:	9a 83       	std	Y+2, r25	; 0x02
    29aa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    29ac:	e9 96       	adiw	r28, 0x39	; 57
    29ae:	0f b6       	in	r0, 0x3f	; 63
    29b0:	f8 94       	cli
    29b2:	de bf       	out	0x3e, r29	; 62
    29b4:	0f be       	out	0x3f, r0	; 63
    29b6:	cd bf       	out	0x3d, r28	; 61
    29b8:	cf 91       	pop	r28
    29ba:	df 91       	pop	r29
    29bc:	08 95       	ret

000029be <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    29be:	df 93       	push	r29
    29c0:	cf 93       	push	r28
    29c2:	00 d0       	rcall	.+0      	; 0x29c4 <LCD_displayString+0x6>
    29c4:	0f 92       	push	r0
    29c6:	cd b7       	in	r28, 0x3d	; 61
    29c8:	de b7       	in	r29, 0x3e	; 62
    29ca:	9b 83       	std	Y+3, r25	; 0x03
    29cc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    29ce:	19 82       	std	Y+1, r1	; 0x01
    29d0:	0e c0       	rjmp	.+28     	; 0x29ee <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    29d2:	89 81       	ldd	r24, Y+1	; 0x01
    29d4:	28 2f       	mov	r18, r24
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	8a 81       	ldd	r24, Y+2	; 0x02
    29da:	9b 81       	ldd	r25, Y+3	; 0x03
    29dc:	fc 01       	movw	r30, r24
    29de:	e2 0f       	add	r30, r18
    29e0:	f3 1f       	adc	r31, r19
    29e2:	80 81       	ld	r24, Z
    29e4:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <LCD_displayCharacter>
		i++;
    29e8:	89 81       	ldd	r24, Y+1	; 0x01
    29ea:	8f 5f       	subi	r24, 0xFF	; 255
    29ec:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    29ee:	89 81       	ldd	r24, Y+1	; 0x01
    29f0:	28 2f       	mov	r18, r24
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	8a 81       	ldd	r24, Y+2	; 0x02
    29f6:	9b 81       	ldd	r25, Y+3	; 0x03
    29f8:	fc 01       	movw	r30, r24
    29fa:	e2 0f       	add	r30, r18
    29fc:	f3 1f       	adc	r31, r19
    29fe:	80 81       	ld	r24, Z
    2a00:	88 23       	and	r24, r24
    2a02:	39 f7       	brne	.-50     	; 0x29d2 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    2a04:	0f 90       	pop	r0
    2a06:	0f 90       	pop	r0
    2a08:	0f 90       	pop	r0
    2a0a:	cf 91       	pop	r28
    2a0c:	df 91       	pop	r29
    2a0e:	08 95       	ret

00002a10 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2a10:	df 93       	push	r29
    2a12:	cf 93       	push	r28
    2a14:	00 d0       	rcall	.+0      	; 0x2a16 <LCD_moveCursor+0x6>
    2a16:	00 d0       	rcall	.+0      	; 0x2a18 <LCD_moveCursor+0x8>
    2a18:	0f 92       	push	r0
    2a1a:	cd b7       	in	r28, 0x3d	; 61
    2a1c:	de b7       	in	r29, 0x3e	; 62
    2a1e:	8a 83       	std	Y+2, r24	; 0x02
    2a20:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2a22:	8a 81       	ldd	r24, Y+2	; 0x02
    2a24:	28 2f       	mov	r18, r24
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	3d 83       	std	Y+5, r19	; 0x05
    2a2a:	2c 83       	std	Y+4, r18	; 0x04
    2a2c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a2e:	9d 81       	ldd	r25, Y+5	; 0x05
    2a30:	81 30       	cpi	r24, 0x01	; 1
    2a32:	91 05       	cpc	r25, r1
    2a34:	c1 f0       	breq	.+48     	; 0x2a66 <LCD_moveCursor+0x56>
    2a36:	2c 81       	ldd	r18, Y+4	; 0x04
    2a38:	3d 81       	ldd	r19, Y+5	; 0x05
    2a3a:	22 30       	cpi	r18, 0x02	; 2
    2a3c:	31 05       	cpc	r19, r1
    2a3e:	2c f4       	brge	.+10     	; 0x2a4a <LCD_moveCursor+0x3a>
    2a40:	8c 81       	ldd	r24, Y+4	; 0x04
    2a42:	9d 81       	ldd	r25, Y+5	; 0x05
    2a44:	00 97       	sbiw	r24, 0x00	; 0
    2a46:	61 f0       	breq	.+24     	; 0x2a60 <LCD_moveCursor+0x50>
    2a48:	19 c0       	rjmp	.+50     	; 0x2a7c <LCD_moveCursor+0x6c>
    2a4a:	2c 81       	ldd	r18, Y+4	; 0x04
    2a4c:	3d 81       	ldd	r19, Y+5	; 0x05
    2a4e:	22 30       	cpi	r18, 0x02	; 2
    2a50:	31 05       	cpc	r19, r1
    2a52:	69 f0       	breq	.+26     	; 0x2a6e <LCD_moveCursor+0x5e>
    2a54:	8c 81       	ldd	r24, Y+4	; 0x04
    2a56:	9d 81       	ldd	r25, Y+5	; 0x05
    2a58:	83 30       	cpi	r24, 0x03	; 3
    2a5a:	91 05       	cpc	r25, r1
    2a5c:	61 f0       	breq	.+24     	; 0x2a76 <LCD_moveCursor+0x66>
    2a5e:	0e c0       	rjmp	.+28     	; 0x2a7c <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2a60:	8b 81       	ldd	r24, Y+3	; 0x03
    2a62:	89 83       	std	Y+1, r24	; 0x01
    2a64:	0b c0       	rjmp	.+22     	; 0x2a7c <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2a66:	8b 81       	ldd	r24, Y+3	; 0x03
    2a68:	80 5c       	subi	r24, 0xC0	; 192
    2a6a:	89 83       	std	Y+1, r24	; 0x01
    2a6c:	07 c0       	rjmp	.+14     	; 0x2a7c <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a70:	80 5f       	subi	r24, 0xF0	; 240
    2a72:	89 83       	std	Y+1, r24	; 0x01
    2a74:	03 c0       	rjmp	.+6      	; 0x2a7c <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2a76:	8b 81       	ldd	r24, Y+3	; 0x03
    2a78:	80 5b       	subi	r24, 0xB0	; 176
    2a7a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2a7c:	89 81       	ldd	r24, Y+1	; 0x01
    2a7e:	80 68       	ori	r24, 0x80	; 128
    2a80:	0e 94 f7 10 	call	0x21ee	; 0x21ee <LCD_sendCommand>
}
    2a84:	0f 90       	pop	r0
    2a86:	0f 90       	pop	r0
    2a88:	0f 90       	pop	r0
    2a8a:	0f 90       	pop	r0
    2a8c:	0f 90       	pop	r0
    2a8e:	cf 91       	pop	r28
    2a90:	df 91       	pop	r29
    2a92:	08 95       	ret

00002a94 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2a94:	df 93       	push	r29
    2a96:	cf 93       	push	r28
    2a98:	00 d0       	rcall	.+0      	; 0x2a9a <LCD_displayStringRowColumn+0x6>
    2a9a:	00 d0       	rcall	.+0      	; 0x2a9c <LCD_displayStringRowColumn+0x8>
    2a9c:	cd b7       	in	r28, 0x3d	; 61
    2a9e:	de b7       	in	r29, 0x3e	; 62
    2aa0:	89 83       	std	Y+1, r24	; 0x01
    2aa2:	6a 83       	std	Y+2, r22	; 0x02
    2aa4:	5c 83       	std	Y+4, r21	; 0x04
    2aa6:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2aa8:	89 81       	ldd	r24, Y+1	; 0x01
    2aaa:	6a 81       	ldd	r22, Y+2	; 0x02
    2aac:	0e 94 08 15 	call	0x2a10	; 0x2a10 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ab4:	0e 94 df 14 	call	0x29be	; 0x29be <LCD_displayString>
}
    2ab8:	0f 90       	pop	r0
    2aba:	0f 90       	pop	r0
    2abc:	0f 90       	pop	r0
    2abe:	0f 90       	pop	r0
    2ac0:	cf 91       	pop	r28
    2ac2:	df 91       	pop	r29
    2ac4:	08 95       	ret

00002ac6 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2ac6:	df 93       	push	r29
    2ac8:	cf 93       	push	r28
    2aca:	cd b7       	in	r28, 0x3d	; 61
    2acc:	de b7       	in	r29, 0x3e	; 62
    2ace:	62 97       	sbiw	r28, 0x12	; 18
    2ad0:	0f b6       	in	r0, 0x3f	; 63
    2ad2:	f8 94       	cli
    2ad4:	de bf       	out	0x3e, r29	; 62
    2ad6:	0f be       	out	0x3f, r0	; 63
    2ad8:	cd bf       	out	0x3d, r28	; 61
    2ada:	9a 8b       	std	Y+18, r25	; 0x12
    2adc:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2ade:	89 89       	ldd	r24, Y+17	; 0x11
    2ae0:	9a 89       	ldd	r25, Y+18	; 0x12
    2ae2:	9e 01       	movw	r18, r28
    2ae4:	2f 5f       	subi	r18, 0xFF	; 255
    2ae6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ae8:	b9 01       	movw	r22, r18
    2aea:	4a e0       	ldi	r20, 0x0A	; 10
    2aec:	50 e0       	ldi	r21, 0x00	; 0
    2aee:	0e 94 a6 19 	call	0x334c	; 0x334c <itoa>
   LCD_displayString(buff); /* Display the string */
    2af2:	ce 01       	movw	r24, r28
    2af4:	01 96       	adiw	r24, 0x01	; 1
    2af6:	0e 94 df 14 	call	0x29be	; 0x29be <LCD_displayString>
}
    2afa:	62 96       	adiw	r28, 0x12	; 18
    2afc:	0f b6       	in	r0, 0x3f	; 63
    2afe:	f8 94       	cli
    2b00:	de bf       	out	0x3e, r29	; 62
    2b02:	0f be       	out	0x3f, r0	; 63
    2b04:	cd bf       	out	0x3d, r28	; 61
    2b06:	cf 91       	pop	r28
    2b08:	df 91       	pop	r29
    2b0a:	08 95       	ret

00002b0c <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2b0c:	df 93       	push	r29
    2b0e:	cf 93       	push	r28
    2b10:	cd b7       	in	r28, 0x3d	; 61
    2b12:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	0e 94 f7 10 	call	0x21ee	; 0x21ee <LCD_sendCommand>
}
    2b1a:	cf 91       	pop	r28
    2b1c:	df 91       	pop	r29
    2b1e:	08 95       	ret

00002b20 <__vector_9>:

/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/
ISR(TIMER0_OVF_vect)
{
    2b20:	1f 92       	push	r1
    2b22:	0f 92       	push	r0
    2b24:	0f b6       	in	r0, 0x3f	; 63
    2b26:	0f 92       	push	r0
    2b28:	11 24       	eor	r1, r1
    2b2a:	2f 93       	push	r18
    2b2c:	3f 93       	push	r19
    2b2e:	4f 93       	push	r20
    2b30:	5f 93       	push	r21
    2b32:	6f 93       	push	r22
    2b34:	7f 93       	push	r23
    2b36:	8f 93       	push	r24
    2b38:	9f 93       	push	r25
    2b3a:	af 93       	push	r26
    2b3c:	bf 93       	push	r27
    2b3e:	ef 93       	push	r30
    2b40:	ff 93       	push	r31
    2b42:	df 93       	push	r29
    2b44:	cf 93       	push	r28
    2b46:	cd b7       	in	r28, 0x3d	; 61
    2b48:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    2b4a:	80 91 35 01 	lds	r24, 0x0135
    2b4e:	90 91 36 01 	lds	r25, 0x0136
    2b52:	00 97       	sbiw	r24, 0x00	; 0
    2b54:	29 f0       	breq	.+10     	; 0x2b60 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the interrupt is detected */
		(*g_callBackPtr0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2b56:	e0 91 35 01 	lds	r30, 0x0135
    2b5a:	f0 91 36 01 	lds	r31, 0x0136
    2b5e:	09 95       	icall
	}
}
    2b60:	cf 91       	pop	r28
    2b62:	df 91       	pop	r29
    2b64:	ff 91       	pop	r31
    2b66:	ef 91       	pop	r30
    2b68:	bf 91       	pop	r27
    2b6a:	af 91       	pop	r26
    2b6c:	9f 91       	pop	r25
    2b6e:	8f 91       	pop	r24
    2b70:	7f 91       	pop	r23
    2b72:	6f 91       	pop	r22
    2b74:	5f 91       	pop	r21
    2b76:	4f 91       	pop	r20
    2b78:	3f 91       	pop	r19
    2b7a:	2f 91       	pop	r18
    2b7c:	0f 90       	pop	r0
    2b7e:	0f be       	out	0x3f, r0	; 63
    2b80:	0f 90       	pop	r0
    2b82:	1f 90       	pop	r1
    2b84:	18 95       	reti

00002b86 <__vector_19>:


ISR(TIMER0_COMP_vect)
{
    2b86:	1f 92       	push	r1
    2b88:	0f 92       	push	r0
    2b8a:	0f b6       	in	r0, 0x3f	; 63
    2b8c:	0f 92       	push	r0
    2b8e:	11 24       	eor	r1, r1
    2b90:	2f 93       	push	r18
    2b92:	3f 93       	push	r19
    2b94:	4f 93       	push	r20
    2b96:	5f 93       	push	r21
    2b98:	6f 93       	push	r22
    2b9a:	7f 93       	push	r23
    2b9c:	8f 93       	push	r24
    2b9e:	9f 93       	push	r25
    2ba0:	af 93       	push	r26
    2ba2:	bf 93       	push	r27
    2ba4:	ef 93       	push	r30
    2ba6:	ff 93       	push	r31
    2ba8:	df 93       	push	r29
    2baa:	cf 93       	push	r28
    2bac:	cd b7       	in	r28, 0x3d	; 61
    2bae:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    2bb0:	80 91 35 01 	lds	r24, 0x0135
    2bb4:	90 91 36 01 	lds	r25, 0x0136
    2bb8:	00 97       	sbiw	r24, 0x00	; 0
    2bba:	29 f0       	breq	.+10     	; 0x2bc6 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the interrupt is detected */
		(*g_callBackPtr0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2bbc:	e0 91 35 01 	lds	r30, 0x0135
    2bc0:	f0 91 36 01 	lds	r31, 0x0136
    2bc4:	09 95       	icall
	}
}
    2bc6:	cf 91       	pop	r28
    2bc8:	df 91       	pop	r29
    2bca:	ff 91       	pop	r31
    2bcc:	ef 91       	pop	r30
    2bce:	bf 91       	pop	r27
    2bd0:	af 91       	pop	r26
    2bd2:	9f 91       	pop	r25
    2bd4:	8f 91       	pop	r24
    2bd6:	7f 91       	pop	r23
    2bd8:	6f 91       	pop	r22
    2bda:	5f 91       	pop	r21
    2bdc:	4f 91       	pop	r20
    2bde:	3f 91       	pop	r19
    2be0:	2f 91       	pop	r18
    2be2:	0f 90       	pop	r0
    2be4:	0f be       	out	0x3f, r0	; 63
    2be6:	0f 90       	pop	r0
    2be8:	1f 90       	pop	r1
    2bea:	18 95       	reti

00002bec <__vector_8>:




ISR(TIMER1_OVF_vect)
{
    2bec:	1f 92       	push	r1
    2bee:	0f 92       	push	r0
    2bf0:	0f b6       	in	r0, 0x3f	; 63
    2bf2:	0f 92       	push	r0
    2bf4:	11 24       	eor	r1, r1
    2bf6:	2f 93       	push	r18
    2bf8:	3f 93       	push	r19
    2bfa:	4f 93       	push	r20
    2bfc:	5f 93       	push	r21
    2bfe:	6f 93       	push	r22
    2c00:	7f 93       	push	r23
    2c02:	8f 93       	push	r24
    2c04:	9f 93       	push	r25
    2c06:	af 93       	push	r26
    2c08:	bf 93       	push	r27
    2c0a:	ef 93       	push	r30
    2c0c:	ff 93       	push	r31
    2c0e:	df 93       	push	r29
    2c10:	cf 93       	push	r28
    2c12:	cd b7       	in	r28, 0x3d	; 61
    2c14:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    2c16:	80 91 37 01 	lds	r24, 0x0137
    2c1a:	90 91 38 01 	lds	r25, 0x0138
    2c1e:	00 97       	sbiw	r24, 0x00	; 0
    2c20:	29 f0       	breq	.+10     	; 0x2c2c <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the interrupt is detected */
		(*g_callBackPtr1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2c22:	e0 91 37 01 	lds	r30, 0x0137
    2c26:	f0 91 38 01 	lds	r31, 0x0138
    2c2a:	09 95       	icall
	}
}
    2c2c:	cf 91       	pop	r28
    2c2e:	df 91       	pop	r29
    2c30:	ff 91       	pop	r31
    2c32:	ef 91       	pop	r30
    2c34:	bf 91       	pop	r27
    2c36:	af 91       	pop	r26
    2c38:	9f 91       	pop	r25
    2c3a:	8f 91       	pop	r24
    2c3c:	7f 91       	pop	r23
    2c3e:	6f 91       	pop	r22
    2c40:	5f 91       	pop	r21
    2c42:	4f 91       	pop	r20
    2c44:	3f 91       	pop	r19
    2c46:	2f 91       	pop	r18
    2c48:	0f 90       	pop	r0
    2c4a:	0f be       	out	0x3f, r0	; 63
    2c4c:	0f 90       	pop	r0
    2c4e:	1f 90       	pop	r1
    2c50:	18 95       	reti

00002c52 <__vector_6>:


ISR(TIMER1_COMPA_vect)
{
    2c52:	1f 92       	push	r1
    2c54:	0f 92       	push	r0
    2c56:	0f b6       	in	r0, 0x3f	; 63
    2c58:	0f 92       	push	r0
    2c5a:	11 24       	eor	r1, r1
    2c5c:	2f 93       	push	r18
    2c5e:	3f 93       	push	r19
    2c60:	4f 93       	push	r20
    2c62:	5f 93       	push	r21
    2c64:	6f 93       	push	r22
    2c66:	7f 93       	push	r23
    2c68:	8f 93       	push	r24
    2c6a:	9f 93       	push	r25
    2c6c:	af 93       	push	r26
    2c6e:	bf 93       	push	r27
    2c70:	ef 93       	push	r30
    2c72:	ff 93       	push	r31
    2c74:	df 93       	push	r29
    2c76:	cf 93       	push	r28
    2c78:	cd b7       	in	r28, 0x3d	; 61
    2c7a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    2c7c:	80 91 37 01 	lds	r24, 0x0137
    2c80:	90 91 38 01 	lds	r25, 0x0138
    2c84:	00 97       	sbiw	r24, 0x00	; 0
    2c86:	29 f0       	breq	.+10     	; 0x2c92 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the interrupt is detected */
		(*g_callBackPtr1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2c88:	e0 91 37 01 	lds	r30, 0x0137
    2c8c:	f0 91 38 01 	lds	r31, 0x0138
    2c90:	09 95       	icall
	}
}
    2c92:	cf 91       	pop	r28
    2c94:	df 91       	pop	r29
    2c96:	ff 91       	pop	r31
    2c98:	ef 91       	pop	r30
    2c9a:	bf 91       	pop	r27
    2c9c:	af 91       	pop	r26
    2c9e:	9f 91       	pop	r25
    2ca0:	8f 91       	pop	r24
    2ca2:	7f 91       	pop	r23
    2ca4:	6f 91       	pop	r22
    2ca6:	5f 91       	pop	r21
    2ca8:	4f 91       	pop	r20
    2caa:	3f 91       	pop	r19
    2cac:	2f 91       	pop	r18
    2cae:	0f 90       	pop	r0
    2cb0:	0f be       	out	0x3f, r0	; 63
    2cb2:	0f 90       	pop	r0
    2cb4:	1f 90       	pop	r1
    2cb6:	18 95       	reti

00002cb8 <__vector_4>:




ISR(TIMER2_OVF_vect)
{
    2cb8:	1f 92       	push	r1
    2cba:	0f 92       	push	r0
    2cbc:	0f b6       	in	r0, 0x3f	; 63
    2cbe:	0f 92       	push	r0
    2cc0:	11 24       	eor	r1, r1
    2cc2:	2f 93       	push	r18
    2cc4:	3f 93       	push	r19
    2cc6:	4f 93       	push	r20
    2cc8:	5f 93       	push	r21
    2cca:	6f 93       	push	r22
    2ccc:	7f 93       	push	r23
    2cce:	8f 93       	push	r24
    2cd0:	9f 93       	push	r25
    2cd2:	af 93       	push	r26
    2cd4:	bf 93       	push	r27
    2cd6:	ef 93       	push	r30
    2cd8:	ff 93       	push	r31
    2cda:	df 93       	push	r29
    2cdc:	cf 93       	push	r28
    2cde:	cd b7       	in	r28, 0x3d	; 61
    2ce0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    2ce2:	80 91 39 01 	lds	r24, 0x0139
    2ce6:	90 91 3a 01 	lds	r25, 0x013A
    2cea:	00 97       	sbiw	r24, 0x00	; 0
    2cec:	29 f0       	breq	.+10     	; 0x2cf8 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the interrupt is detected */
		(*g_callBackPtr2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2cee:	e0 91 39 01 	lds	r30, 0x0139
    2cf2:	f0 91 3a 01 	lds	r31, 0x013A
    2cf6:	09 95       	icall
	}
}
    2cf8:	cf 91       	pop	r28
    2cfa:	df 91       	pop	r29
    2cfc:	ff 91       	pop	r31
    2cfe:	ef 91       	pop	r30
    2d00:	bf 91       	pop	r27
    2d02:	af 91       	pop	r26
    2d04:	9f 91       	pop	r25
    2d06:	8f 91       	pop	r24
    2d08:	7f 91       	pop	r23
    2d0a:	6f 91       	pop	r22
    2d0c:	5f 91       	pop	r21
    2d0e:	4f 91       	pop	r20
    2d10:	3f 91       	pop	r19
    2d12:	2f 91       	pop	r18
    2d14:	0f 90       	pop	r0
    2d16:	0f be       	out	0x3f, r0	; 63
    2d18:	0f 90       	pop	r0
    2d1a:	1f 90       	pop	r1
    2d1c:	18 95       	reti

00002d1e <__vector_3>:


ISR(TIMER2_COMP_vect)
{
    2d1e:	1f 92       	push	r1
    2d20:	0f 92       	push	r0
    2d22:	0f b6       	in	r0, 0x3f	; 63
    2d24:	0f 92       	push	r0
    2d26:	11 24       	eor	r1, r1
    2d28:	2f 93       	push	r18
    2d2a:	3f 93       	push	r19
    2d2c:	4f 93       	push	r20
    2d2e:	5f 93       	push	r21
    2d30:	6f 93       	push	r22
    2d32:	7f 93       	push	r23
    2d34:	8f 93       	push	r24
    2d36:	9f 93       	push	r25
    2d38:	af 93       	push	r26
    2d3a:	bf 93       	push	r27
    2d3c:	ef 93       	push	r30
    2d3e:	ff 93       	push	r31
    2d40:	df 93       	push	r29
    2d42:	cf 93       	push	r28
    2d44:	cd b7       	in	r28, 0x3d	; 61
    2d46:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    2d48:	80 91 39 01 	lds	r24, 0x0139
    2d4c:	90 91 3a 01 	lds	r25, 0x013A
    2d50:	00 97       	sbiw	r24, 0x00	; 0
    2d52:	29 f0       	breq	.+10     	; 0x2d5e <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the interrupt is detected */
		(*g_callBackPtr2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2d54:	e0 91 39 01 	lds	r30, 0x0139
    2d58:	f0 91 3a 01 	lds	r31, 0x013A
    2d5c:	09 95       	icall
	}
}
    2d5e:	cf 91       	pop	r28
    2d60:	df 91       	pop	r29
    2d62:	ff 91       	pop	r31
    2d64:	ef 91       	pop	r30
    2d66:	bf 91       	pop	r27
    2d68:	af 91       	pop	r26
    2d6a:	9f 91       	pop	r25
    2d6c:	8f 91       	pop	r24
    2d6e:	7f 91       	pop	r23
    2d70:	6f 91       	pop	r22
    2d72:	5f 91       	pop	r21
    2d74:	4f 91       	pop	r20
    2d76:	3f 91       	pop	r19
    2d78:	2f 91       	pop	r18
    2d7a:	0f 90       	pop	r0
    2d7c:	0f be       	out	0x3f, r0	; 63
    2d7e:	0f 90       	pop	r0
    2d80:	1f 90       	pop	r1
    2d82:	18 95       	reti

00002d84 <Timer0_Start>:
 *******************************************************************************/
/*
 * Description: Function to initialize Timer0 of AVR.
 */
void Timer0_Start(const Timer0Setup * Config_Ptr)
{
    2d84:	df 93       	push	r29
    2d86:	cf 93       	push	r28
    2d88:	00 d0       	rcall	.+0      	; 0x2d8a <Timer0_Start+0x6>
    2d8a:	cd b7       	in	r28, 0x3d	; 61
    2d8c:	de b7       	in	r29, 0x3e	; 62
    2d8e:	9a 83       	std	Y+2, r25	; 0x02
    2d90:	89 83       	std	Y+1, r24	; 0x01
	 * FOC0 = 1 (when PWM mode is disabled) (set auto with Config_Ptr->mode)
	 * WGM01:0  to choose mode of timer (CTC-PWM(fast)-OVF).
	 * COM01:0  to choose mode of CTC mode.
	 * CS02:0   to choose clock and prescaler of timer0.
	 */
	TCCR0 |= (Config_Ptr->mode) | (Config_Ptr->prescaler) ;
    2d92:	a3 e5       	ldi	r26, 0x53	; 83
    2d94:	b0 e0       	ldi	r27, 0x00	; 0
    2d96:	e3 e5       	ldi	r30, 0x53	; 83
    2d98:	f0 e0       	ldi	r31, 0x00	; 0
    2d9a:	20 81       	ld	r18, Z
    2d9c:	e9 81       	ldd	r30, Y+1	; 0x01
    2d9e:	fa 81       	ldd	r31, Y+2	; 0x02
    2da0:	90 81       	ld	r25, Z
    2da2:	e9 81       	ldd	r30, Y+1	; 0x01
    2da4:	fa 81       	ldd	r31, Y+2	; 0x02
    2da6:	81 81       	ldd	r24, Z+1	; 0x01
    2da8:	89 2b       	or	r24, r25
    2daa:	82 2b       	or	r24, r18
    2dac:	8c 93       	st	X, r24
	TCNT0  = (Config_Ptr->TCNTValue);
    2dae:	a2 e5       	ldi	r26, 0x52	; 82
    2db0:	b0 e0       	ldi	r27, 0x00	; 0
    2db2:	e9 81       	ldd	r30, Y+1	; 0x01
    2db4:	fa 81       	ldd	r31, Y+2	; 0x02
    2db6:	83 81       	ldd	r24, Z+3	; 0x03
    2db8:	8c 93       	st	X, r24
	OCR0   = (Config_Ptr->OCRValue);
    2dba:	ac e5       	ldi	r26, 0x5C	; 92
    2dbc:	b0 e0       	ldi	r27, 0x00	; 0
    2dbe:	e9 81       	ldd	r30, Y+1	; 0x01
    2dc0:	fa 81       	ldd	r31, Y+2	; 0x02
    2dc2:	84 81       	ldd	r24, Z+4	; 0x04
    2dc4:	8c 93       	st	X, r24
	/* TIMSK Register Bits Description:
	 * TOIE0    = 1 Enable interrupt request for timer0 OVF mode.
	 * OCIE0    = 1 Enable interrupt request for timer0 CTC mode.
	 */
	TIMSK = (Config_Ptr->intEnable0);
    2dc6:	a9 e5       	ldi	r26, 0x59	; 89
    2dc8:	b0 e0       	ldi	r27, 0x00	; 0
    2dca:	e9 81       	ldd	r30, Y+1	; 0x01
    2dcc:	fa 81       	ldd	r31, Y+2	; 0x02
    2dce:	82 81       	ldd	r24, Z+2	; 0x02
    2dd0:	8c 93       	st	X, r24
}
    2dd2:	0f 90       	pop	r0
    2dd4:	0f 90       	pop	r0
    2dd6:	cf 91       	pop	r28
    2dd8:	df 91       	pop	r29
    2dda:	08 95       	ret

00002ddc <Timer1_Start>:

/*
 * Description: Function to initialize Timer2 of AVR.
 */
void Timer1_Start(const Timer1Setup * Config_Ptr)
{
    2ddc:	df 93       	push	r29
    2dde:	cf 93       	push	r28
    2de0:	00 d0       	rcall	.+0      	; 0x2de2 <Timer1_Start+0x6>
    2de2:	cd b7       	in	r28, 0x3d	; 61
    2de4:	de b7       	in	r29, 0x3e	; 62
    2de6:	9a 83       	std	Y+2, r25	; 0x02
    2de8:	89 83       	std	Y+1, r24	; 0x01
	 * FOC1B = 1 (when PWM mode is disabled) (set auto with Config_Ptr->mode)
	 * WGM13:0  to choose mode of timer (CTC-PWM(fast)-OVF).
	 * COM1A1/COM1B1:0  to choose mode of CTC mode.
	 * CS12:0   to choose clock and prescaler of timer0.
	 */
	TCCR1A |= (Config_Ptr->modeA)  ;
    2dea:	af e4       	ldi	r26, 0x4F	; 79
    2dec:	b0 e0       	ldi	r27, 0x00	; 0
    2dee:	ef e4       	ldi	r30, 0x4F	; 79
    2df0:	f0 e0       	ldi	r31, 0x00	; 0
    2df2:	90 81       	ld	r25, Z
    2df4:	e9 81       	ldd	r30, Y+1	; 0x01
    2df6:	fa 81       	ldd	r31, Y+2	; 0x02
    2df8:	80 81       	ld	r24, Z
    2dfa:	89 2b       	or	r24, r25
    2dfc:	8c 93       	st	X, r24
	TCCR1B |= (Config_Ptr->modeB) | (Config_Ptr->prescaler) ;
    2dfe:	ae e4       	ldi	r26, 0x4E	; 78
    2e00:	b0 e0       	ldi	r27, 0x00	; 0
    2e02:	ee e4       	ldi	r30, 0x4E	; 78
    2e04:	f0 e0       	ldi	r31, 0x00	; 0
    2e06:	20 81       	ld	r18, Z
    2e08:	e9 81       	ldd	r30, Y+1	; 0x01
    2e0a:	fa 81       	ldd	r31, Y+2	; 0x02
    2e0c:	91 81       	ldd	r25, Z+1	; 0x01
    2e0e:	e9 81       	ldd	r30, Y+1	; 0x01
    2e10:	fa 81       	ldd	r31, Y+2	; 0x02
    2e12:	82 81       	ldd	r24, Z+2	; 0x02
    2e14:	89 2b       	or	r24, r25
    2e16:	82 2b       	or	r24, r18
    2e18:	8c 93       	st	X, r24
	TCNT1   = (Config_Ptr->TCNTValue);
    2e1a:	ac e4       	ldi	r26, 0x4C	; 76
    2e1c:	b0 e0       	ldi	r27, 0x00	; 0
    2e1e:	e9 81       	ldd	r30, Y+1	; 0x01
    2e20:	fa 81       	ldd	r31, Y+2	; 0x02
    2e22:	84 81       	ldd	r24, Z+4	; 0x04
    2e24:	95 81       	ldd	r25, Z+5	; 0x05
    2e26:	11 96       	adiw	r26, 0x01	; 1
    2e28:	9c 93       	st	X, r25
    2e2a:	8e 93       	st	-X, r24
	OCR1A   = (Config_Ptr->OCRValue);
    2e2c:	aa e4       	ldi	r26, 0x4A	; 74
    2e2e:	b0 e0       	ldi	r27, 0x00	; 0
    2e30:	e9 81       	ldd	r30, Y+1	; 0x01
    2e32:	fa 81       	ldd	r31, Y+2	; 0x02
    2e34:	86 81       	ldd	r24, Z+6	; 0x06
    2e36:	97 81       	ldd	r25, Z+7	; 0x07
    2e38:	11 96       	adiw	r26, 0x01	; 1
    2e3a:	9c 93       	st	X, r25
    2e3c:	8e 93       	st	-X, r24
	 * TOIE1    = 1 Enable interrupt request for timer1 OVF mode.
	 * OCIE1A   = 1 Enable interrupt request for timer1-(channel A) CTC mode.
	 * OCIE1B   = 1 Enable interrupt request for timer1-(channel B) CTC mode (Needed PWM mode/ Not supported here).
	 * OCIE2    = 1 Enable interrupt request for timer2 CTC mode.
	 */
	TIMSK = (Config_Ptr->intEnable1);
    2e3e:	a9 e5       	ldi	r26, 0x59	; 89
    2e40:	b0 e0       	ldi	r27, 0x00	; 0
    2e42:	e9 81       	ldd	r30, Y+1	; 0x01
    2e44:	fa 81       	ldd	r31, Y+2	; 0x02
    2e46:	83 81       	ldd	r24, Z+3	; 0x03
    2e48:	8c 93       	st	X, r24
}
    2e4a:	0f 90       	pop	r0
    2e4c:	0f 90       	pop	r0
    2e4e:	cf 91       	pop	r28
    2e50:	df 91       	pop	r29
    2e52:	08 95       	ret

00002e54 <Timer2_Start>:

/*
 * Description: Function to initialize Timer2 of AVR.
 */
void Timer2_Start(const Timer2Setup * Config_Ptr)
{
    2e54:	df 93       	push	r29
    2e56:	cf 93       	push	r28
    2e58:	00 d0       	rcall	.+0      	; 0x2e5a <Timer2_Start+0x6>
    2e5a:	cd b7       	in	r28, 0x3d	; 61
    2e5c:	de b7       	in	r29, 0x3e	; 62
    2e5e:	9a 83       	std	Y+2, r25	; 0x02
    2e60:	89 83       	std	Y+1, r24	; 0x01
	 * FOC2 = 1 (when PWM mode is disabled) (set auto with Config_Ptr->mode)
	 * WGM21:0  to choose mode of timer (CTC-PWM(fast)-OVF).
	 * COM21:0  to choose mode of PWM mode or CTC mode.
	 * CS22:0   to choose clock and prescaler of timer0.
	 */
	TCCR2 |= (Config_Ptr->mode) | (Config_Ptr->prescaler) ;
    2e62:	a5 e4       	ldi	r26, 0x45	; 69
    2e64:	b0 e0       	ldi	r27, 0x00	; 0
    2e66:	e5 e4       	ldi	r30, 0x45	; 69
    2e68:	f0 e0       	ldi	r31, 0x00	; 0
    2e6a:	20 81       	ld	r18, Z
    2e6c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e6e:	fa 81       	ldd	r31, Y+2	; 0x02
    2e70:	90 81       	ld	r25, Z
    2e72:	e9 81       	ldd	r30, Y+1	; 0x01
    2e74:	fa 81       	ldd	r31, Y+2	; 0x02
    2e76:	81 81       	ldd	r24, Z+1	; 0x01
    2e78:	89 2b       	or	r24, r25
    2e7a:	82 2b       	or	r24, r18
    2e7c:	8c 93       	st	X, r24
	TCNT2 = (Config_Ptr->TCNTValue);
    2e7e:	a4 e4       	ldi	r26, 0x44	; 68
    2e80:	b0 e0       	ldi	r27, 0x00	; 0
    2e82:	e9 81       	ldd	r30, Y+1	; 0x01
    2e84:	fa 81       	ldd	r31, Y+2	; 0x02
    2e86:	83 81       	ldd	r24, Z+3	; 0x03
    2e88:	8c 93       	st	X, r24
	OCR2  = (Config_Ptr->OCRValue);
    2e8a:	a3 e4       	ldi	r26, 0x43	; 67
    2e8c:	b0 e0       	ldi	r27, 0x00	; 0
    2e8e:	e9 81       	ldd	r30, Y+1	; 0x01
    2e90:	fa 81       	ldd	r31, Y+2	; 0x02
    2e92:	84 81       	ldd	r24, Z+4	; 0x04
    2e94:	8c 93       	st	X, r24
	/* TIMSK Register Bits Description:
	 * TOIE2    = 1 Enable interrupt request for timer2 OVF mode.
	 * OCIE2    = 1 Enable interrupt request for timer2 CTC mode.
	 */
	TIMSK = (Config_Ptr->intEnable2);
    2e96:	a9 e5       	ldi	r26, 0x59	; 89
    2e98:	b0 e0       	ldi	r27, 0x00	; 0
    2e9a:	e9 81       	ldd	r30, Y+1	; 0x01
    2e9c:	fa 81       	ldd	r31, Y+2	; 0x02
    2e9e:	82 81       	ldd	r24, Z+2	; 0x02
    2ea0:	8c 93       	st	X, r24
}
    2ea2:	0f 90       	pop	r0
    2ea4:	0f 90       	pop	r0
    2ea6:	cf 91       	pop	r28
    2ea8:	df 91       	pop	r29
    2eaa:	08 95       	ret

00002eac <Timer0_setClock>:


/*
 * Description: Function to change clock of timer0.
 */
void Timer0_setClock(uint8 clock ){
    2eac:	df 93       	push	r29
    2eae:	cf 93       	push	r28
    2eb0:	0f 92       	push	r0
    2eb2:	cd b7       	in	r28, 0x3d	; 61
    2eb4:	de b7       	in	r29, 0x3e	; 62
    2eb6:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 |= ((TCCR0 & 0xF8) | clock);
    2eb8:	a3 e5       	ldi	r26, 0x53	; 83
    2eba:	b0 e0       	ldi	r27, 0x00	; 0
    2ebc:	e3 e5       	ldi	r30, 0x53	; 83
    2ebe:	f0 e0       	ldi	r31, 0x00	; 0
    2ec0:	80 81       	ld	r24, Z
    2ec2:	28 2f       	mov	r18, r24
    2ec4:	e3 e5       	ldi	r30, 0x53	; 83
    2ec6:	f0 e0       	ldi	r31, 0x00	; 0
    2ec8:	80 81       	ld	r24, Z
    2eca:	98 2f       	mov	r25, r24
    2ecc:	98 7f       	andi	r25, 0xF8	; 248
    2ece:	89 81       	ldd	r24, Y+1	; 0x01
    2ed0:	89 2b       	or	r24, r25
    2ed2:	82 2b       	or	r24, r18
    2ed4:	8c 93       	st	X, r24
}
    2ed6:	0f 90       	pop	r0
    2ed8:	cf 91       	pop	r28
    2eda:	df 91       	pop	r29
    2edc:	08 95       	ret

00002ede <Timer1_setClock>:


/*
 * Description: Function to change clock of timer1.
 */
void Timer1_setClock(uint8 clock ){
    2ede:	df 93       	push	r29
    2ee0:	cf 93       	push	r28
    2ee2:	0f 92       	push	r0
    2ee4:	cd b7       	in	r28, 0x3d	; 61
    2ee6:	de b7       	in	r29, 0x3e	; 62
    2ee8:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B |= ((TCCR1B & 0xF8) | clock);
    2eea:	ae e4       	ldi	r26, 0x4E	; 78
    2eec:	b0 e0       	ldi	r27, 0x00	; 0
    2eee:	ee e4       	ldi	r30, 0x4E	; 78
    2ef0:	f0 e0       	ldi	r31, 0x00	; 0
    2ef2:	80 81       	ld	r24, Z
    2ef4:	28 2f       	mov	r18, r24
    2ef6:	ee e4       	ldi	r30, 0x4E	; 78
    2ef8:	f0 e0       	ldi	r31, 0x00	; 0
    2efa:	80 81       	ld	r24, Z
    2efc:	98 2f       	mov	r25, r24
    2efe:	98 7f       	andi	r25, 0xF8	; 248
    2f00:	89 81       	ldd	r24, Y+1	; 0x01
    2f02:	89 2b       	or	r24, r25
    2f04:	82 2b       	or	r24, r18
    2f06:	8c 93       	st	X, r24
}
    2f08:	0f 90       	pop	r0
    2f0a:	cf 91       	pop	r28
    2f0c:	df 91       	pop	r29
    2f0e:	08 95       	ret

00002f10 <Timer2_setClock>:


/*
 * Description: Function to change clock of timer2.
 */
void Timer2_setClock(uint8 clock ){
    2f10:	df 93       	push	r29
    2f12:	cf 93       	push	r28
    2f14:	0f 92       	push	r0
    2f16:	cd b7       	in	r28, 0x3d	; 61
    2f18:	de b7       	in	r29, 0x3e	; 62
    2f1a:	89 83       	std	Y+1, r24	; 0x01
	TCCR2 |= ((TCCR2 & 0xF8) | clock);
    2f1c:	a5 e4       	ldi	r26, 0x45	; 69
    2f1e:	b0 e0       	ldi	r27, 0x00	; 0
    2f20:	e5 e4       	ldi	r30, 0x45	; 69
    2f22:	f0 e0       	ldi	r31, 0x00	; 0
    2f24:	80 81       	ld	r24, Z
    2f26:	28 2f       	mov	r18, r24
    2f28:	e5 e4       	ldi	r30, 0x45	; 69
    2f2a:	f0 e0       	ldi	r31, 0x00	; 0
    2f2c:	80 81       	ld	r24, Z
    2f2e:	98 2f       	mov	r25, r24
    2f30:	98 7f       	andi	r25, 0xF8	; 248
    2f32:	89 81       	ldd	r24, Y+1	; 0x01
    2f34:	89 2b       	or	r24, r25
    2f36:	82 2b       	or	r24, r18
    2f38:	8c 93       	st	X, r24
}
    2f3a:	0f 90       	pop	r0
    2f3c:	cf 91       	pop	r28
    2f3e:	df 91       	pop	r29
    2f40:	08 95       	ret

00002f42 <Timer0_setCTC>:


/*
 * Description: Function to change compare value of timer0.
 */
void Timer0_setCTC(uint8 ctc ){
    2f42:	df 93       	push	r29
    2f44:	cf 93       	push	r28
    2f46:	0f 92       	push	r0
    2f48:	cd b7       	in	r28, 0x3d	; 61
    2f4a:	de b7       	in	r29, 0x3e	; 62
    2f4c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=0;
    2f4e:	e2 e5       	ldi	r30, 0x52	; 82
    2f50:	f0 e0       	ldi	r31, 0x00	; 0
    2f52:	10 82       	st	Z, r1
	OCR0=ctc;
    2f54:	ec e5       	ldi	r30, 0x5C	; 92
    2f56:	f0 e0       	ldi	r31, 0x00	; 0
    2f58:	89 81       	ldd	r24, Y+1	; 0x01
    2f5a:	80 83       	st	Z, r24
}
    2f5c:	0f 90       	pop	r0
    2f5e:	cf 91       	pop	r28
    2f60:	df 91       	pop	r29
    2f62:	08 95       	ret

00002f64 <Timer1_setCTC>:


/*
 * Description: Function to change compare value of timer1.
 */
void Timer1_setCTC(uint16 ctc ){
    2f64:	df 93       	push	r29
    2f66:	cf 93       	push	r28
    2f68:	00 d0       	rcall	.+0      	; 0x2f6a <Timer1_setCTC+0x6>
    2f6a:	cd b7       	in	r28, 0x3d	; 61
    2f6c:	de b7       	in	r29, 0x3e	; 62
    2f6e:	9a 83       	std	Y+2, r25	; 0x02
    2f70:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=0;
    2f72:	ec e4       	ldi	r30, 0x4C	; 76
    2f74:	f0 e0       	ldi	r31, 0x00	; 0
    2f76:	11 82       	std	Z+1, r1	; 0x01
    2f78:	10 82       	st	Z, r1
	OCR1A=ctc;
    2f7a:	ea e4       	ldi	r30, 0x4A	; 74
    2f7c:	f0 e0       	ldi	r31, 0x00	; 0
    2f7e:	89 81       	ldd	r24, Y+1	; 0x01
    2f80:	9a 81       	ldd	r25, Y+2	; 0x02
    2f82:	91 83       	std	Z+1, r25	; 0x01
    2f84:	80 83       	st	Z, r24
}
    2f86:	0f 90       	pop	r0
    2f88:	0f 90       	pop	r0
    2f8a:	cf 91       	pop	r28
    2f8c:	df 91       	pop	r29
    2f8e:	08 95       	ret

00002f90 <Timer2_setCTC>:


/*
 * Description: Function to change compare value of timer2.
 */
void Timer2_setCTC(uint8 ctc ){
    2f90:	df 93       	push	r29
    2f92:	cf 93       	push	r28
    2f94:	0f 92       	push	r0
    2f96:	cd b7       	in	r28, 0x3d	; 61
    2f98:	de b7       	in	r29, 0x3e	; 62
    2f9a:	89 83       	std	Y+1, r24	; 0x01
	TCNT2=0;
    2f9c:	e4 e4       	ldi	r30, 0x44	; 68
    2f9e:	f0 e0       	ldi	r31, 0x00	; 0
    2fa0:	10 82       	st	Z, r1
	OCR2=ctc;
    2fa2:	e3 e4       	ldi	r30, 0x43	; 67
    2fa4:	f0 e0       	ldi	r31, 0x00	; 0
    2fa6:	89 81       	ldd	r24, Y+1	; 0x01
    2fa8:	80 83       	st	Z, r24
}
    2faa:	0f 90       	pop	r0
    2fac:	cf 91       	pop	r28
    2fae:	df 91       	pop	r29
    2fb0:	08 95       	ret

00002fb2 <Timer0_DeInit>:


/*
 * Description: Function to stop Timer2 of AVR after done.
 */
void Timer0_DeInit(){
    2fb2:	df 93       	push	r29
    2fb4:	cf 93       	push	r28
    2fb6:	cd b7       	in	r28, 0x3d	; 61
    2fb8:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0;
    2fba:	e3 e5       	ldi	r30, 0x53	; 83
    2fbc:	f0 e0       	ldi	r31, 0x00	; 0
    2fbe:	10 82       	st	Z, r1
	OCR0=0;
    2fc0:	ec e5       	ldi	r30, 0x5C	; 92
    2fc2:	f0 e0       	ldi	r31, 0x00	; 0
    2fc4:	10 82       	st	Z, r1
	TIMSK &= ~(1<<OCIE0);
    2fc6:	a9 e5       	ldi	r26, 0x59	; 89
    2fc8:	b0 e0       	ldi	r27, 0x00	; 0
    2fca:	e9 e5       	ldi	r30, 0x59	; 89
    2fcc:	f0 e0       	ldi	r31, 0x00	; 0
    2fce:	80 81       	ld	r24, Z
    2fd0:	8d 7f       	andi	r24, 0xFD	; 253
    2fd2:	8c 93       	st	X, r24
	TIMSK &= ~(1<<TOIE0);
    2fd4:	a9 e5       	ldi	r26, 0x59	; 89
    2fd6:	b0 e0       	ldi	r27, 0x00	; 0
    2fd8:	e9 e5       	ldi	r30, 0x59	; 89
    2fda:	f0 e0       	ldi	r31, 0x00	; 0
    2fdc:	80 81       	ld	r24, Z
    2fde:	8e 7f       	andi	r24, 0xFE	; 254
    2fe0:	8c 93       	st	X, r24
}
    2fe2:	cf 91       	pop	r28
    2fe4:	df 91       	pop	r29
    2fe6:	08 95       	ret

00002fe8 <Timer1_DeInit>:


/*
 * Description: Function to stop Timer2 of AVR after done.
 */
void Timer1_DeInit(){
    2fe8:	df 93       	push	r29
    2fea:	cf 93       	push	r28
    2fec:	cd b7       	in	r28, 0x3d	; 61
    2fee:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
    2ff0:	ef e4       	ldi	r30, 0x4F	; 79
    2ff2:	f0 e0       	ldi	r31, 0x00	; 0
    2ff4:	10 82       	st	Z, r1
	TCCR1B=0;
    2ff6:	ee e4       	ldi	r30, 0x4E	; 78
    2ff8:	f0 e0       	ldi	r31, 0x00	; 0
    2ffa:	10 82       	st	Z, r1
	OCR1A=0;
    2ffc:	ea e4       	ldi	r30, 0x4A	; 74
    2ffe:	f0 e0       	ldi	r31, 0x00	; 0
    3000:	11 82       	std	Z+1, r1	; 0x01
    3002:	10 82       	st	Z, r1
	TCNT1=0;
    3004:	ec e4       	ldi	r30, 0x4C	; 76
    3006:	f0 e0       	ldi	r31, 0x00	; 0
    3008:	11 82       	std	Z+1, r1	; 0x01
    300a:	10 82       	st	Z, r1
	TIMSK &= ~(1<<OCIE1A);
    300c:	a9 e5       	ldi	r26, 0x59	; 89
    300e:	b0 e0       	ldi	r27, 0x00	; 0
    3010:	e9 e5       	ldi	r30, 0x59	; 89
    3012:	f0 e0       	ldi	r31, 0x00	; 0
    3014:	80 81       	ld	r24, Z
    3016:	8f 7e       	andi	r24, 0xEF	; 239
    3018:	8c 93       	st	X, r24
	TIMSK &= ~(1<<TOIE1);
    301a:	a9 e5       	ldi	r26, 0x59	; 89
    301c:	b0 e0       	ldi	r27, 0x00	; 0
    301e:	e9 e5       	ldi	r30, 0x59	; 89
    3020:	f0 e0       	ldi	r31, 0x00	; 0
    3022:	80 81       	ld	r24, Z
    3024:	8b 7f       	andi	r24, 0xFB	; 251
    3026:	8c 93       	st	X, r24
}
    3028:	cf 91       	pop	r28
    302a:	df 91       	pop	r29
    302c:	08 95       	ret

0000302e <Timer2_DeInit>:


/*
 * Description: Function to stop Timer2 of AVR after done.
 */
void Timer2_DeInit(){
    302e:	df 93       	push	r29
    3030:	cf 93       	push	r28
    3032:	cd b7       	in	r28, 0x3d	; 61
    3034:	de b7       	in	r29, 0x3e	; 62
	TCCR2=0;
    3036:	e5 e4       	ldi	r30, 0x45	; 69
    3038:	f0 e0       	ldi	r31, 0x00	; 0
    303a:	10 82       	st	Z, r1
	OCR2=0;
    303c:	e3 e4       	ldi	r30, 0x43	; 67
    303e:	f0 e0       	ldi	r31, 0x00	; 0
    3040:	10 82       	st	Z, r1
	TIMSK &= ~(1<<OCIE2);
    3042:	a9 e5       	ldi	r26, 0x59	; 89
    3044:	b0 e0       	ldi	r27, 0x00	; 0
    3046:	e9 e5       	ldi	r30, 0x59	; 89
    3048:	f0 e0       	ldi	r31, 0x00	; 0
    304a:	80 81       	ld	r24, Z
    304c:	8f 77       	andi	r24, 0x7F	; 127
    304e:	8c 93       	st	X, r24
	TIMSK &= ~(1<<TOIE2);
    3050:	a9 e5       	ldi	r26, 0x59	; 89
    3052:	b0 e0       	ldi	r27, 0x00	; 0
    3054:	e9 e5       	ldi	r30, 0x59	; 89
    3056:	f0 e0       	ldi	r31, 0x00	; 0
    3058:	80 81       	ld	r24, Z
    305a:	8f 7b       	andi	r24, 0xBF	; 191
    305c:	8c 93       	st	X, r24
}
    305e:	cf 91       	pop	r28
    3060:	df 91       	pop	r29
    3062:	08 95       	ret

00003064 <Timer0_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer0_setCallBack(void(*a_ptr)(void))
{
    3064:	df 93       	push	r29
    3066:	cf 93       	push	r28
    3068:	00 d0       	rcall	.+0      	; 0x306a <Timer0_setCallBack+0x6>
    306a:	cd b7       	in	r28, 0x3d	; 61
    306c:	de b7       	in	r29, 0x3e	; 62
    306e:	9a 83       	std	Y+2, r25	; 0x02
    3070:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr0 = a_ptr;
    3072:	89 81       	ldd	r24, Y+1	; 0x01
    3074:	9a 81       	ldd	r25, Y+2	; 0x02
    3076:	90 93 36 01 	sts	0x0136, r25
    307a:	80 93 35 01 	sts	0x0135, r24
}
    307e:	0f 90       	pop	r0
    3080:	0f 90       	pop	r0
    3082:	cf 91       	pop	r28
    3084:	df 91       	pop	r29
    3086:	08 95       	ret

00003088 <Timer1_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    3088:	df 93       	push	r29
    308a:	cf 93       	push	r28
    308c:	00 d0       	rcall	.+0      	; 0x308e <Timer1_setCallBack+0x6>
    308e:	cd b7       	in	r28, 0x3d	; 61
    3090:	de b7       	in	r29, 0x3e	; 62
    3092:	9a 83       	std	Y+2, r25	; 0x02
    3094:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr1 = a_ptr;
    3096:	89 81       	ldd	r24, Y+1	; 0x01
    3098:	9a 81       	ldd	r25, Y+2	; 0x02
    309a:	90 93 38 01 	sts	0x0138, r25
    309e:	80 93 37 01 	sts	0x0137, r24
}
    30a2:	0f 90       	pop	r0
    30a4:	0f 90       	pop	r0
    30a6:	cf 91       	pop	r28
    30a8:	df 91       	pop	r29
    30aa:	08 95       	ret

000030ac <Timer2_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer2_setCallBack(void(*a_ptr)(void))
{
    30ac:	df 93       	push	r29
    30ae:	cf 93       	push	r28
    30b0:	00 d0       	rcall	.+0      	; 0x30b2 <Timer2_setCallBack+0x6>
    30b2:	cd b7       	in	r28, 0x3d	; 61
    30b4:	de b7       	in	r29, 0x3e	; 62
    30b6:	9a 83       	std	Y+2, r25	; 0x02
    30b8:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr2 = a_ptr;
    30ba:	89 81       	ldd	r24, Y+1	; 0x01
    30bc:	9a 81       	ldd	r25, Y+2	; 0x02
    30be:	90 93 3a 01 	sts	0x013A, r25
    30c2:	80 93 39 01 	sts	0x0139, r24
}
    30c6:	0f 90       	pop	r0
    30c8:	0f 90       	pop	r0
    30ca:	cf 91       	pop	r28
    30cc:	df 91       	pop	r29
    30ce:	08 95       	ret

000030d0 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_Config *Config_Ptr)
{
    30d0:	df 93       	push	r29
    30d2:	cf 93       	push	r28
    30d4:	00 d0       	rcall	.+0      	; 0x30d6 <UART_init+0x6>
    30d6:	00 d0       	rcall	.+0      	; 0x30d8 <UART_init+0x8>
    30d8:	cd b7       	in	r28, 0x3d	; 61
    30da:	de b7       	in	r29, 0x3e	; 62
    30dc:	9c 83       	std	Y+4, r25	; 0x04
    30de:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    30e0:	1a 82       	std	Y+2, r1	; 0x02
    30e2:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    30e4:	eb e2       	ldi	r30, 0x2B	; 43
    30e6:	f0 e0       	ldi	r31, 0x00	; 0
    30e8:	82 e0       	ldi	r24, 0x02	; 2
    30ea:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    30ec:	ea e2       	ldi	r30, 0x2A	; 42
    30ee:	f0 e0       	ldi	r31, 0x00	; 0
    30f0:	88 e1       	ldi	r24, 0x18	; 24
    30f2:	80 83       	st	Z, r24
	 * UPM1:0  = entered value for (none-even-odd) parity bit
	 * USBS    = entered value for (1-2) stop bits
	 * UCSZ1:0 = entered value for (5-6-7-8) bit data-mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (Config_Ptr->parity) | (Config_Ptr->stop) | (Config_Ptr->size);
    30f4:	a0 e4       	ldi	r26, 0x40	; 64
    30f6:	b0 e0       	ldi	r27, 0x00	; 0
    30f8:	eb 81       	ldd	r30, Y+3	; 0x03
    30fa:	fc 81       	ldd	r31, Y+4	; 0x04
    30fc:	91 81       	ldd	r25, Z+1	; 0x01
    30fe:	eb 81       	ldd	r30, Y+3	; 0x03
    3100:	fc 81       	ldd	r31, Y+4	; 0x04
    3102:	82 81       	ldd	r24, Z+2	; 0x02
    3104:	98 2b       	or	r25, r24
    3106:	eb 81       	ldd	r30, Y+3	; 0x03
    3108:	fc 81       	ldd	r31, Y+4	; 0x04
    310a:	80 81       	ld	r24, Z
    310c:	89 2b       	or	r24, r25
    310e:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baudRate) * 8UL))) - 1);
    3110:	eb 81       	ldd	r30, Y+3	; 0x03
    3112:	fc 81       	ldd	r31, Y+4	; 0x04
    3114:	83 81       	ldd	r24, Z+3	; 0x03
    3116:	94 81       	ldd	r25, Z+4	; 0x04
    3118:	a5 81       	ldd	r26, Z+5	; 0x05
    311a:	b6 81       	ldd	r27, Z+6	; 0x06
    311c:	88 0f       	add	r24, r24
    311e:	99 1f       	adc	r25, r25
    3120:	aa 1f       	adc	r26, r26
    3122:	bb 1f       	adc	r27, r27
    3124:	88 0f       	add	r24, r24
    3126:	99 1f       	adc	r25, r25
    3128:	aa 1f       	adc	r26, r26
    312a:	bb 1f       	adc	r27, r27
    312c:	88 0f       	add	r24, r24
    312e:	99 1f       	adc	r25, r25
    3130:	aa 1f       	adc	r26, r26
    3132:	bb 1f       	adc	r27, r27
    3134:	9c 01       	movw	r18, r24
    3136:	ad 01       	movw	r20, r26
    3138:	80 e0       	ldi	r24, 0x00	; 0
    313a:	92 e1       	ldi	r25, 0x12	; 18
    313c:	aa e7       	ldi	r26, 0x7A	; 122
    313e:	b0 e0       	ldi	r27, 0x00	; 0
    3140:	bc 01       	movw	r22, r24
    3142:	cd 01       	movw	r24, r26
    3144:	0e 94 4d 19 	call	0x329a	; 0x329a <__udivmodsi4>
    3148:	da 01       	movw	r26, r20
    314a:	c9 01       	movw	r24, r18
    314c:	01 97       	sbiw	r24, 0x01	; 1
    314e:	9a 83       	std	Y+2, r25	; 0x02
    3150:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3152:	e0 e4       	ldi	r30, 0x40	; 64
    3154:	f0 e0       	ldi	r31, 0x00	; 0
    3156:	89 81       	ldd	r24, Y+1	; 0x01
    3158:	9a 81       	ldd	r25, Y+2	; 0x02
    315a:	89 2f       	mov	r24, r25
    315c:	99 27       	eor	r25, r25
    315e:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3160:	e9 e2       	ldi	r30, 0x29	; 41
    3162:	f0 e0       	ldi	r31, 0x00	; 0
    3164:	89 81       	ldd	r24, Y+1	; 0x01
    3166:	80 83       	st	Z, r24
}
    3168:	0f 90       	pop	r0
    316a:	0f 90       	pop	r0
    316c:	0f 90       	pop	r0
    316e:	0f 90       	pop	r0
    3170:	cf 91       	pop	r28
    3172:	df 91       	pop	r29
    3174:	08 95       	ret

00003176 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3176:	df 93       	push	r29
    3178:	cf 93       	push	r28
    317a:	0f 92       	push	r0
    317c:	cd b7       	in	r28, 0x3d	; 61
    317e:	de b7       	in	r29, 0x3e	; 62
    3180:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3182:	eb e2       	ldi	r30, 0x2B	; 43
    3184:	f0 e0       	ldi	r31, 0x00	; 0
    3186:	80 81       	ld	r24, Z
    3188:	88 2f       	mov	r24, r24
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	80 72       	andi	r24, 0x20	; 32
    318e:	90 70       	andi	r25, 0x00	; 0
    3190:	00 97       	sbiw	r24, 0x00	; 0
    3192:	b9 f3       	breq	.-18     	; 0x3182 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3194:	ec e2       	ldi	r30, 0x2C	; 44
    3196:	f0 e0       	ldi	r31, 0x00	; 0
    3198:	89 81       	ldd	r24, Y+1	; 0x01
    319a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    319c:	0f 90       	pop	r0
    319e:	cf 91       	pop	r28
    31a0:	df 91       	pop	r29
    31a2:	08 95       	ret

000031a4 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    31a4:	df 93       	push	r29
    31a6:	cf 93       	push	r28
    31a8:	cd b7       	in	r28, 0x3d	; 61
    31aa:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    31ac:	eb e2       	ldi	r30, 0x2B	; 43
    31ae:	f0 e0       	ldi	r31, 0x00	; 0
    31b0:	80 81       	ld	r24, Z
    31b2:	88 23       	and	r24, r24
    31b4:	dc f7       	brge	.-10     	; 0x31ac <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    31b6:	ec e2       	ldi	r30, 0x2C	; 44
    31b8:	f0 e0       	ldi	r31, 0x00	; 0
    31ba:	80 81       	ld	r24, Z
}
    31bc:	cf 91       	pop	r28
    31be:	df 91       	pop	r29
    31c0:	08 95       	ret

000031c2 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    31c2:	df 93       	push	r29
    31c4:	cf 93       	push	r28
    31c6:	00 d0       	rcall	.+0      	; 0x31c8 <UART_sendString+0x6>
    31c8:	0f 92       	push	r0
    31ca:	cd b7       	in	r28, 0x3d	; 61
    31cc:	de b7       	in	r29, 0x3e	; 62
    31ce:	9b 83       	std	Y+3, r25	; 0x03
    31d0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    31d2:	19 82       	std	Y+1, r1	; 0x01
    31d4:	0e c0       	rjmp	.+28     	; 0x31f2 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    31d6:	89 81       	ldd	r24, Y+1	; 0x01
    31d8:	28 2f       	mov	r18, r24
    31da:	30 e0       	ldi	r19, 0x00	; 0
    31dc:	8a 81       	ldd	r24, Y+2	; 0x02
    31de:	9b 81       	ldd	r25, Y+3	; 0x03
    31e0:	fc 01       	movw	r30, r24
    31e2:	e2 0f       	add	r30, r18
    31e4:	f3 1f       	adc	r31, r19
    31e6:	80 81       	ld	r24, Z
    31e8:	0e 94 bb 18 	call	0x3176	; 0x3176 <UART_sendByte>
		i++;
    31ec:	89 81       	ldd	r24, Y+1	; 0x01
    31ee:	8f 5f       	subi	r24, 0xFF	; 255
    31f0:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    31f2:	89 81       	ldd	r24, Y+1	; 0x01
    31f4:	28 2f       	mov	r18, r24
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	8a 81       	ldd	r24, Y+2	; 0x02
    31fa:	9b 81       	ldd	r25, Y+3	; 0x03
    31fc:	fc 01       	movw	r30, r24
    31fe:	e2 0f       	add	r30, r18
    3200:	f3 1f       	adc	r31, r19
    3202:	80 81       	ld	r24, Z
    3204:	88 23       	and	r24, r24
    3206:	39 f7       	brne	.-50     	; 0x31d6 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    3208:	0f 90       	pop	r0
    320a:	0f 90       	pop	r0
    320c:	0f 90       	pop	r0
    320e:	cf 91       	pop	r28
    3210:	df 91       	pop	r29
    3212:	08 95       	ret

00003214 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3214:	0f 93       	push	r16
    3216:	1f 93       	push	r17
    3218:	df 93       	push	r29
    321a:	cf 93       	push	r28
    321c:	00 d0       	rcall	.+0      	; 0x321e <UART_receiveString+0xa>
    321e:	0f 92       	push	r0
    3220:	cd b7       	in	r28, 0x3d	; 61
    3222:	de b7       	in	r29, 0x3e	; 62
    3224:	9b 83       	std	Y+3, r25	; 0x03
    3226:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3228:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    322a:	89 81       	ldd	r24, Y+1	; 0x01
    322c:	28 2f       	mov	r18, r24
    322e:	30 e0       	ldi	r19, 0x00	; 0
    3230:	8a 81       	ldd	r24, Y+2	; 0x02
    3232:	9b 81       	ldd	r25, Y+3	; 0x03
    3234:	8c 01       	movw	r16, r24
    3236:	02 0f       	add	r16, r18
    3238:	13 1f       	adc	r17, r19
    323a:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <UART_recieveByte>
    323e:	f8 01       	movw	r30, r16
    3240:	80 83       	st	Z, r24
    3242:	0f c0       	rjmp	.+30     	; 0x3262 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3244:	89 81       	ldd	r24, Y+1	; 0x01
    3246:	8f 5f       	subi	r24, 0xFF	; 255
    3248:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    324a:	89 81       	ldd	r24, Y+1	; 0x01
    324c:	28 2f       	mov	r18, r24
    324e:	30 e0       	ldi	r19, 0x00	; 0
    3250:	8a 81       	ldd	r24, Y+2	; 0x02
    3252:	9b 81       	ldd	r25, Y+3	; 0x03
    3254:	8c 01       	movw	r16, r24
    3256:	02 0f       	add	r16, r18
    3258:	13 1f       	adc	r17, r19
    325a:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <UART_recieveByte>
    325e:	f8 01       	movw	r30, r16
    3260:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3262:	89 81       	ldd	r24, Y+1	; 0x01
    3264:	28 2f       	mov	r18, r24
    3266:	30 e0       	ldi	r19, 0x00	; 0
    3268:	8a 81       	ldd	r24, Y+2	; 0x02
    326a:	9b 81       	ldd	r25, Y+3	; 0x03
    326c:	fc 01       	movw	r30, r24
    326e:	e2 0f       	add	r30, r18
    3270:	f3 1f       	adc	r31, r19
    3272:	80 81       	ld	r24, Z
    3274:	83 32       	cpi	r24, 0x23	; 35
    3276:	31 f7       	brne	.-52     	; 0x3244 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3278:	89 81       	ldd	r24, Y+1	; 0x01
    327a:	28 2f       	mov	r18, r24
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	8a 81       	ldd	r24, Y+2	; 0x02
    3280:	9b 81       	ldd	r25, Y+3	; 0x03
    3282:	fc 01       	movw	r30, r24
    3284:	e2 0f       	add	r30, r18
    3286:	f3 1f       	adc	r31, r19
    3288:	10 82       	st	Z, r1
}
    328a:	0f 90       	pop	r0
    328c:	0f 90       	pop	r0
    328e:	0f 90       	pop	r0
    3290:	cf 91       	pop	r28
    3292:	df 91       	pop	r29
    3294:	1f 91       	pop	r17
    3296:	0f 91       	pop	r16
    3298:	08 95       	ret

0000329a <__udivmodsi4>:
    329a:	a1 e2       	ldi	r26, 0x21	; 33
    329c:	1a 2e       	mov	r1, r26
    329e:	aa 1b       	sub	r26, r26
    32a0:	bb 1b       	sub	r27, r27
    32a2:	fd 01       	movw	r30, r26
    32a4:	0d c0       	rjmp	.+26     	; 0x32c0 <__udivmodsi4_ep>

000032a6 <__udivmodsi4_loop>:
    32a6:	aa 1f       	adc	r26, r26
    32a8:	bb 1f       	adc	r27, r27
    32aa:	ee 1f       	adc	r30, r30
    32ac:	ff 1f       	adc	r31, r31
    32ae:	a2 17       	cp	r26, r18
    32b0:	b3 07       	cpc	r27, r19
    32b2:	e4 07       	cpc	r30, r20
    32b4:	f5 07       	cpc	r31, r21
    32b6:	20 f0       	brcs	.+8      	; 0x32c0 <__udivmodsi4_ep>
    32b8:	a2 1b       	sub	r26, r18
    32ba:	b3 0b       	sbc	r27, r19
    32bc:	e4 0b       	sbc	r30, r20
    32be:	f5 0b       	sbc	r31, r21

000032c0 <__udivmodsi4_ep>:
    32c0:	66 1f       	adc	r22, r22
    32c2:	77 1f       	adc	r23, r23
    32c4:	88 1f       	adc	r24, r24
    32c6:	99 1f       	adc	r25, r25
    32c8:	1a 94       	dec	r1
    32ca:	69 f7       	brne	.-38     	; 0x32a6 <__udivmodsi4_loop>
    32cc:	60 95       	com	r22
    32ce:	70 95       	com	r23
    32d0:	80 95       	com	r24
    32d2:	90 95       	com	r25
    32d4:	9b 01       	movw	r18, r22
    32d6:	ac 01       	movw	r20, r24
    32d8:	bd 01       	movw	r22, r26
    32da:	cf 01       	movw	r24, r30
    32dc:	08 95       	ret

000032de <__prologue_saves__>:
    32de:	2f 92       	push	r2
    32e0:	3f 92       	push	r3
    32e2:	4f 92       	push	r4
    32e4:	5f 92       	push	r5
    32e6:	6f 92       	push	r6
    32e8:	7f 92       	push	r7
    32ea:	8f 92       	push	r8
    32ec:	9f 92       	push	r9
    32ee:	af 92       	push	r10
    32f0:	bf 92       	push	r11
    32f2:	cf 92       	push	r12
    32f4:	df 92       	push	r13
    32f6:	ef 92       	push	r14
    32f8:	ff 92       	push	r15
    32fa:	0f 93       	push	r16
    32fc:	1f 93       	push	r17
    32fe:	cf 93       	push	r28
    3300:	df 93       	push	r29
    3302:	cd b7       	in	r28, 0x3d	; 61
    3304:	de b7       	in	r29, 0x3e	; 62
    3306:	ca 1b       	sub	r28, r26
    3308:	db 0b       	sbc	r29, r27
    330a:	0f b6       	in	r0, 0x3f	; 63
    330c:	f8 94       	cli
    330e:	de bf       	out	0x3e, r29	; 62
    3310:	0f be       	out	0x3f, r0	; 63
    3312:	cd bf       	out	0x3d, r28	; 61
    3314:	09 94       	ijmp

00003316 <__epilogue_restores__>:
    3316:	2a 88       	ldd	r2, Y+18	; 0x12
    3318:	39 88       	ldd	r3, Y+17	; 0x11
    331a:	48 88       	ldd	r4, Y+16	; 0x10
    331c:	5f 84       	ldd	r5, Y+15	; 0x0f
    331e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3320:	7d 84       	ldd	r7, Y+13	; 0x0d
    3322:	8c 84       	ldd	r8, Y+12	; 0x0c
    3324:	9b 84       	ldd	r9, Y+11	; 0x0b
    3326:	aa 84       	ldd	r10, Y+10	; 0x0a
    3328:	b9 84       	ldd	r11, Y+9	; 0x09
    332a:	c8 84       	ldd	r12, Y+8	; 0x08
    332c:	df 80       	ldd	r13, Y+7	; 0x07
    332e:	ee 80       	ldd	r14, Y+6	; 0x06
    3330:	fd 80       	ldd	r15, Y+5	; 0x05
    3332:	0c 81       	ldd	r16, Y+4	; 0x04
    3334:	1b 81       	ldd	r17, Y+3	; 0x03
    3336:	aa 81       	ldd	r26, Y+2	; 0x02
    3338:	b9 81       	ldd	r27, Y+1	; 0x01
    333a:	ce 0f       	add	r28, r30
    333c:	d1 1d       	adc	r29, r1
    333e:	0f b6       	in	r0, 0x3f	; 63
    3340:	f8 94       	cli
    3342:	de bf       	out	0x3e, r29	; 62
    3344:	0f be       	out	0x3f, r0	; 63
    3346:	cd bf       	out	0x3d, r28	; 61
    3348:	ed 01       	movw	r28, r26
    334a:	08 95       	ret

0000334c <itoa>:
    334c:	fb 01       	movw	r30, r22
    334e:	9f 01       	movw	r18, r30
    3350:	e8 94       	clt
    3352:	42 30       	cpi	r20, 0x02	; 2
    3354:	c4 f0       	brlt	.+48     	; 0x3386 <itoa+0x3a>
    3356:	45 32       	cpi	r20, 0x25	; 37
    3358:	b4 f4       	brge	.+44     	; 0x3386 <itoa+0x3a>
    335a:	4a 30       	cpi	r20, 0x0A	; 10
    335c:	29 f4       	brne	.+10     	; 0x3368 <itoa+0x1c>
    335e:	97 fb       	bst	r25, 7
    3360:	1e f4       	brtc	.+6      	; 0x3368 <itoa+0x1c>
    3362:	90 95       	com	r25
    3364:	81 95       	neg	r24
    3366:	9f 4f       	sbci	r25, 0xFF	; 255
    3368:	64 2f       	mov	r22, r20
    336a:	77 27       	eor	r23, r23
    336c:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__udivmodhi4>
    3370:	80 5d       	subi	r24, 0xD0	; 208
    3372:	8a 33       	cpi	r24, 0x3A	; 58
    3374:	0c f0       	brlt	.+2      	; 0x3378 <itoa+0x2c>
    3376:	89 5d       	subi	r24, 0xD9	; 217
    3378:	81 93       	st	Z+, r24
    337a:	cb 01       	movw	r24, r22
    337c:	00 97       	sbiw	r24, 0x00	; 0
    337e:	a1 f7       	brne	.-24     	; 0x3368 <itoa+0x1c>
    3380:	16 f4       	brtc	.+4      	; 0x3386 <itoa+0x3a>
    3382:	5d e2       	ldi	r21, 0x2D	; 45
    3384:	51 93       	st	Z+, r21
    3386:	10 82       	st	Z, r1
    3388:	c9 01       	movw	r24, r18
    338a:	0c 94 c7 19 	jmp	0x338e	; 0x338e <strrev>

0000338e <strrev>:
    338e:	dc 01       	movw	r26, r24
    3390:	fc 01       	movw	r30, r24
    3392:	67 2f       	mov	r22, r23
    3394:	71 91       	ld	r23, Z+
    3396:	77 23       	and	r23, r23
    3398:	e1 f7       	brne	.-8      	; 0x3392 <strrev+0x4>
    339a:	32 97       	sbiw	r30, 0x02	; 2
    339c:	04 c0       	rjmp	.+8      	; 0x33a6 <strrev+0x18>
    339e:	7c 91       	ld	r23, X
    33a0:	6d 93       	st	X+, r22
    33a2:	70 83       	st	Z, r23
    33a4:	62 91       	ld	r22, -Z
    33a6:	ae 17       	cp	r26, r30
    33a8:	bf 07       	cpc	r27, r31
    33aa:	c8 f3       	brcs	.-14     	; 0x339e <strrev+0x10>
    33ac:	08 95       	ret

000033ae <__udivmodhi4>:
    33ae:	aa 1b       	sub	r26, r26
    33b0:	bb 1b       	sub	r27, r27
    33b2:	51 e1       	ldi	r21, 0x11	; 17
    33b4:	07 c0       	rjmp	.+14     	; 0x33c4 <__udivmodhi4_ep>

000033b6 <__udivmodhi4_loop>:
    33b6:	aa 1f       	adc	r26, r26
    33b8:	bb 1f       	adc	r27, r27
    33ba:	a6 17       	cp	r26, r22
    33bc:	b7 07       	cpc	r27, r23
    33be:	10 f0       	brcs	.+4      	; 0x33c4 <__udivmodhi4_ep>
    33c0:	a6 1b       	sub	r26, r22
    33c2:	b7 0b       	sbc	r27, r23

000033c4 <__udivmodhi4_ep>:
    33c4:	88 1f       	adc	r24, r24
    33c6:	99 1f       	adc	r25, r25
    33c8:	5a 95       	dec	r21
    33ca:	a9 f7       	brne	.-22     	; 0x33b6 <__udivmodhi4_loop>
    33cc:	80 95       	com	r24
    33ce:	90 95       	com	r25
    33d0:	bc 01       	movw	r22, r24
    33d2:	cd 01       	movw	r24, r26
    33d4:	08 95       	ret

000033d6 <_exit>:
    33d6:	f8 94       	cli

000033d8 <__stop_program>:
    33d8:	ff cf       	rjmp	.-2      	; 0x33d8 <__stop_program>
